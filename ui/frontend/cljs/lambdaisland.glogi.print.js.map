{"version":3,"sources":["lambdaisland/glogi/print.cljs"],"mappings":"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","names":["lambdaisland.glogi.print/colors","lambdaisland.glogi.print/level-color","level","pred__41787","expr__41788","G__41790","G__41791","G__41792","G__41793","G__41794","G__41795","G__41796","G__41797","G__41798","G__41799","G__41800","G__41801","G__41802","G__41803","cljs.core/<=","lambdaisland.glogi/level-value","var_args","G__41805","lambdaisland.glogi.print/add","js/Error","p__41807","vec__41808","cljs.core.nth","p__41813","vec__41814","p__41818","vec__41824","res","res-css","s","color","cljs.core.conj","cljs.core.get","fg","bg","lambdaisland.glogi.print/print-console-log-css","value","cljs.core._EQ_","lambdaisland.glogi.print.add","cljs.core/Keyword","cljs.core/Symbol","cljs.core.pr_str","cljs.core/map-entry?","G__41834","G__41835","cljs.core/key","G__41831","G__41832","cljs.core/val","cljs.core/PersistentArrayMap","cljs.core/PersistentHashMap","%","cljs.core.reduce","cljs.core.interpose","cljs.core/map?","t","cljs.core/type","n","cljs.core/empty?","cljs.core/set?","cljs.core/vector?","cljs.core/PersistentQueue","cljs.core.into","cljs.core/seq?","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IAtom","cljs.core/deref","cljs.core/uuid?","cljs.core/object?","p1__41828#","p2__41829#","cljs.core.assoc","cljs.core.keyword","goog.object/get","js/Object.keys","cljs.core/array?","lambdaisland.glogi.print/format","logger-name","vec__41843","cljs.core/cons"],"sourcesContent":["(ns lambdaisland.glogi.print\n  (:require [lambdaisland.glogi :as glogi]\n            [goog.object :as gobj]))\n\n;; https://github.com/chriskempson/base16-tomorrow-scheme/blob/master/tomorrow.yaml\n\n(def colors\n  {:white    \"#ffffff\"\n   :gray1    \"#e0e0e0\"\n   :gray2    \"#d6d6d6\"\n   :gray3    \"#8e908c\"\n   :gray4    \"#969896\"\n   :gray5    \"#4d4d4c\"\n   :gray6    \"#282a2e\"\n   :black    \"#1d1f21\"\n   :red      \"#c82829\"\n   :orange   \"#f5871f\"\n   :yellow   \"#eab700\"\n   :green    \"#718c00\"\n   :turqoise \"#3e999f\"\n   :blue     \"#4271ae\"\n   :purple   \"#8959a8\"\n   :brown    \"#a3685a\"})\n\n(defn level-color [level]\n  (condp <= (glogi/level-value level)\n    (glogi/level-value :severe)  :red\n    (glogi/level-value :warning) :orange\n    (glogi/level-value :info)    :blue\n    (glogi/level-value :config)  :green\n    (glogi/level-value :fine)    :yellow\n    (glogi/level-value :finer)   :gray3\n    (glogi/level-value :finest)  :gray4\n    :gray2))\n\n(defn add\n  ([[res res-css] s]\n   [(str res s) res-css])\n  ([[res res-css] s color]\n   [(str res \"%c\" (str s) \"%c\") (conj res-css (str \"color:\" (get colors color)) \"color:black\")])\n  ([[res res-css] s fg bg]\n   [(str res \"%c\" (str s) \"%c\") (conj res-css\n                                      (str \"color:\" (get colors fg)\n                                           \";background-color:\" (get colors bg))\n                                      \"color:black;background-color:inherit\")]))\n\n(defn print-console-log-css [res value]\n  (cond\n    (= ::comma value)\n    (add res \", \" :gray2)\n\n    (= ::space value)\n    (add res \" \")\n\n    (keyword? value)\n    (add res value :blue)\n\n    (symbol? value)\n    (add res value :green)\n\n    (string? value)\n    (add res (pr-str value) :turqoise)\n\n    (map-entry? value)\n    (-> res\n        (print-console-log-css (key value))\n        (add \" \")\n        (print-console-log-css (val value)))\n\n    (or (instance? cljs.core/PersistentArrayMap value)\n        (instance? cljs.core/PersistentHashMap value))\n    (as-> res %\n      (add % \"{\" :purple)\n      (reduce print-console-log-css % (interpose ::comma value))\n      (add % \"}\" :purple))\n\n    (map? value) ;; non-standard map implementation\n    (as-> res %\n      (add % (str \"#\" (let [t (type value)\n                            n (.-name t)]\n                        (if (empty? n)\n                          (pr-str t)\n                          n)) \" \") :brown)\n      (add % \"{\" :purple)\n      (reduce print-console-log-css % (interpose ::comma value))\n      (add % \"}\" :purple))\n\n    (set? value)\n    (as-> res %\n      (add % \"#{\" :purple)\n      (reduce print-console-log-css % (interpose ::space value))\n      (add % \"}\" :purple))\n\n    (vector? value)\n    (as-> res %\n      (add % \"[\" :purple)\n      (reduce print-console-log-css % (interpose ::space value))\n      (add % \"]\" :purple))\n\n    (instance? cljs.core.PersistentQueue value)\n    (-> res\n        (add \"#queue \" :brown)\n        (recur (into [] value)))\n\n    (seq? value)\n    (as-> res %\n      (add % \"(\" :brown)\n      (reduce print-console-log-css % (interpose ::space value))\n      (add % \")\" :brown))\n\n    (satisfies? IAtom value)\n    (-> res\n        (add \"#atom \" :brown)\n        (recur @value))\n\n    (uuid? value)\n    (-> res\n        (add \"#uuid \" :brown)\n        (recur (str value)))\n\n    (object? value)\n    (-> res\n        (add \"#js \" :brown)\n        (recur (reduce #(assoc %1 (keyword %2) (gobj/get value %2)) {} (js/Object.keys value))))\n\n    (array? value)\n    (-> res\n        (add \"#js \" :brown)\n        (recur (into [] value)))\n\n    :else\n    (add res (pr-str value) :gray5)))\n\n(defn format [level logger-name value]\n  (let [color (level-color level)\n        [res res-css] (-> [\"\" []]\n                          (add \"[\" :white color)\n                          (add logger-name :white color)\n                          (add \"]\" :white color)\n                          (add \" \")\n                          (print-console-log-css value))]\n    (cons res res-css)))\n"]}