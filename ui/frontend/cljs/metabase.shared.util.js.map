{"version":3,"sources":["metabase/shared/util.cljc"],"mappings":";;;;;;;;;;;;;;;;;;;AAEA;;;;;;AAAA,AAAMA,AAKHC;AALH,AAME,AAAM,AAAA,AAAA,AAAOA;AAAb,AACE,AAAAC,AAAkB,AAAA,AAAA,AACe,AAAAE,AAAUH,AACvB,AAACI,AAAUJ;AAF/B,AAAA,AAAAC;AAAA,AAAAA,AAASC;AAAT,AAGE,AAAA,AAAKA,AAAa,AAACG,AAAKL;;AACxB,AAACK,AAAKL;;;AALV","names":["metabase.shared.util/qualified-name","k","temp__5733__auto__","namespac","cljs.core/Keyword","cljs.core/namespace","cljs.core/name"],"sourcesContent":["(ns metabase.shared.util)\n\n(defn qualified-name\n  \"Return `k` as a string, qualified by its namespace, if any (unlike `name`). Handles `nil` values gracefully as well\n  (also unlike `name`).\n\n     (u/qualified-name :type/FK) -> \\\"type/FK\\\"\"\n  [k]\n  (when (some? k)\n    (if-let [namespac (when #?(:clj (instance? clojure.lang.Named k)\n                               :cljs (keyword? k))\n                        (namespace k))]\n      (str namespac \"/\" (name k))\n      (name k))))\n"]}