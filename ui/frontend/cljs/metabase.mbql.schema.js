var $CLJS = require("./cljs_env");
var $jscomp = $CLJS.$jscomp;
var COMPILED = false;
require("./cljs.core.js");
require("./clojure.set.js");
require("./metabase.mbql.schema.helpers.js");
require("./metabase.mbql.schema.macros.js");
require("./schema.core.js");
var cognitect=$CLJS.cognitect || ($CLJS.cognitect = {});
var module$shadow_js_shim_module$ttag=$CLJS.module$shadow_js_shim_module$ttag || ($CLJS.module$shadow_js_shim_module$ttag = {});
var clojure=$CLJS.clojure || ($CLJS.clojure = {});
var cljs=$CLJS.cljs || ($CLJS.cljs = {});
var schema=$CLJS.schema || ($CLJS.schema = {});
var shadow=$CLJS.shadow || ($CLJS.shadow = {});
var goog=$CLJS.goog || ($CLJS.goog = {});
var lambdaisland=$CLJS.lambdaisland || ($CLJS.lambdaisland = {});
var medley=$CLJS.medley || ($CLJS.medley = {});
var metabase=$CLJS.metabase || ($CLJS.metabase = {});
var com=$CLJS.com || ($CLJS.com = {});

$CLJS.SHADOW_ENV.setLoaded("metabase.mbql.schema.js");

goog.provide('metabase.mbql.schema');
/**
 * Set of valid units for bucketing or comparing against a *date* Field.
 */
metabase.mbql.schema.date_bucketing_units = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [new cljs.core.Keyword(null,"quarter","quarter",-508147616),null,new cljs.core.Keyword(null,"day","day",-274800446),null,new cljs.core.Keyword(null,"week","week",-1326473278),null,new cljs.core.Keyword(null,"default","default",-1987822328),null,new cljs.core.Keyword(null,"day-of-week","day-of-week",1639326729),null,new cljs.core.Keyword(null,"month","month",-1960248533),null,new cljs.core.Keyword(null,"month-of-year","month-of-year",760756492),null,new cljs.core.Keyword(null,"day-of-month","day-of-month",-1096650288),null,new cljs.core.Keyword(null,"year","year",335913393),null,new cljs.core.Keyword(null,"day-of-year","day-of-year",478600113),null,new cljs.core.Keyword(null,"week-of-year","week-of-year",-910114435),null,new cljs.core.Keyword(null,"quarter-of-year","quarter-of-year",-472803491),null], null), null);
/**
 * Set of valid units for bucketing or comparing against a *time* Field.
 */
metabase.mbql.schema.time_bucketing_units = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null,"hour","hour",-555989214),null,new cljs.core.Keyword(null,"second","second",-444702010),null,new cljs.core.Keyword(null,"default","default",-1987822328),null,new cljs.core.Keyword(null,"hour-of-day","hour-of-day",2086777099),null,new cljs.core.Keyword(null,"millisecond","millisecond",-540123566),null,new cljs.core.Keyword(null,"minute-of-hour","minute-of-hour",1903220478),null,new cljs.core.Keyword(null,"minute","minute",-642875969),null], null), null);
/**
 * Set of valid units for bucketing or comparing against a *datetime* Field.
 */
metabase.mbql.schema.datetime_bucketing_units = clojure.set.union.cljs$core$IFn$_invoke$arity$2(metabase.mbql.schema.date_bucketing_units,metabase.mbql.schema.time_bucketing_units);
/**
 * Valid unit for *date* bucketing.
 */
metabase.mbql.schema.DateUnit = schema.core.named(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(schema.core.enum$,metabase.mbql.schema.date_bucketing_units),"date-bucketing-unit");
/**
 * Valid unit for *time* bucketing.
 */
metabase.mbql.schema.TimeUnit = schema.core.named(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(schema.core.enum$,metabase.mbql.schema.time_bucketing_units),"time-bucketing-unit");
/**
 * Valid unit for *datetime* bucketing.
 */
metabase.mbql.schema.DateTimeUnit = schema.core.named(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(schema.core.enum$,metabase.mbql.schema.datetime_bucketing_units),"datetime-bucketing-unit");
/**
 * Schema for all valid datetime bucketing units. DEPRECATED -- use `DateUnit`, `TimeUnit`, or
 *   `DateTimeUnit` instead.
 */
metabase.mbql.schema.DatetimeFieldUnit = schema.core.named(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(schema.core.enum$,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [new cljs.core.Keyword(null,"quarter","quarter",-508147616),null,new cljs.core.Keyword(null,"day","day",-274800446),null,new cljs.core.Keyword(null,"hour","hour",-555989214),null,new cljs.core.Keyword(null,"week","week",-1326473278),null,new cljs.core.Keyword(null,"default","default",-1987822328),null,new cljs.core.Keyword(null,"day-of-week","day-of-week",1639326729),null,new cljs.core.Keyword(null,"hour-of-day","hour-of-day",2086777099),null,new cljs.core.Keyword(null,"month","month",-1960248533),null,new cljs.core.Keyword(null,"month-of-year","month-of-year",760756492),null,new cljs.core.Keyword(null,"day-of-month","day-of-month",-1096650288),null,new cljs.core.Keyword(null,"year","year",335913393),null,new cljs.core.Keyword(null,"day-of-year","day-of-year",478600113),null,new cljs.core.Keyword(null,"week-of-year","week-of-year",-910114435),null,new cljs.core.Keyword(null,"quarter-of-year","quarter-of-year",-472803491),null,new cljs.core.Keyword(null,"minute-of-hour","minute-of-hour",1903220478),null,new cljs.core.Keyword(null,"minute","minute",-642875969),null], null), null)),"datetime-unit");
metabase.mbql.schema.RelativeDatetimeUnit = schema.core.named(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(schema.core.enum$,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null,"quarter","quarter",-508147616),null,new cljs.core.Keyword(null,"day","day",-274800446),null,new cljs.core.Keyword(null,"hour","hour",-555989214),null,new cljs.core.Keyword(null,"week","week",-1326473278),null,new cljs.core.Keyword(null,"default","default",-1987822328),null,new cljs.core.Keyword(null,"month","month",-1960248533),null,new cljs.core.Keyword(null,"year","year",335913393),null,new cljs.core.Keyword(null,"minute","minute",-642875969),null], null), null)),"relative-datetime-unit");
metabase.mbql.schema.can_parse_iso_8601_QMARK_ = (function metabase$mbql$schema$can_parse_iso_8601_QMARK_(s){
if(typeof s === 'string'){
return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(Date.parse(s),NaN);
} else {
return null;
}
});
metabase.mbql.schema.can_parse_date_QMARK_ = metabase.mbql.schema.can_parse_iso_8601_QMARK_;
metabase.mbql.schema.can_parse_datetime_QMARK_ = metabase.mbql.schema.can_parse_iso_8601_QMARK_;
metabase.mbql.schema.can_parse_time_QMARK_ = metabase.mbql.schema.can_parse_iso_8601_QMARK_;
/**
 * Schema for an ISO-8601-formatted date string literal.
 */
metabase.mbql.schema.LiteralDateString = schema.core.constrained.cljs$core$IFn$_invoke$arity$3(metabase.mbql.schema.helpers.NonBlankString,metabase.mbql.schema.can_parse_date_QMARK_,"valid ISO-8601 datetime string literal");
/**
 * Schema for an ISO-8601-formattedor datetime string literal.
 */
metabase.mbql.schema.LiteralDatetimeString = schema.core.constrained.cljs$core$IFn$_invoke$arity$3(metabase.mbql.schema.helpers.NonBlankString,metabase.mbql.schema.can_parse_datetime_QMARK_,"valid ISO-8601 datetime string literal");
/**
 * Schema for an ISO-8601-formatted time string literal.
 */
metabase.mbql.schema.LiteralTimeString = schema.core.constrained.cljs$core$IFn$_invoke$arity$3(metabase.mbql.schema.helpers.NonBlankString,metabase.mbql.schema.can_parse_time_QMARK_,"valid ISO-8601 time string literal");
/**
 * Schema for either a literal datetime string, literal date string, or a literal time string.
 */
metabase.mbql.schema.TemporalLiteralString = schema.core.named(schema.core.conditional.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([metabase.mbql.schema.can_parse_datetime_QMARK_,metabase.mbql.schema.LiteralDatetimeString,metabase.mbql.schema.can_parse_date_QMARK_,metabase.mbql.schema.LiteralDateString,metabase.mbql.schema.can_parse_time_QMARK_,metabase.mbql.schema.LiteralTimeString], 0)),"valid ISO-8601 datetime, date, or time string literal");
/**
 * Schema for a valid relative-datetime clause.
 */
metabase.mbql.schema.relative_datetime = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"relative-datetime","relative-datetime",1285169278),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["n",schema.core.cond_pre.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([schema.core.eq(new cljs.core.Keyword(null,"current","current",-1088038603)),schema.core.Int], 0)),"unit",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"optional","optional",2053951509),metabase.mbql.schema.RelativeDatetimeUnit], null)], 0));
/**
 * Schema for a valid interval clause.
 */
metabase.mbql.schema.interval = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"interval","interval",1708495417),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["n",schema.core.Int,"unit",metabase.mbql.schema.RelativeDatetimeUnit], 0));
/**
 * Schema for an `:absolute-datetime` clause.
 */
metabase.mbql.schema.absolute_datetime = schema.core.conditional.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(function (p1__42442_SHARP_){
return cljs.core.not(metabase.mbql.schema.helpers.is_clause_QMARK_(new cljs.core.Keyword(null,"absolute-datetime","absolute-datetime",-560340465),p1__42442_SHARP_));
}),metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"absolute-datetime","absolute-datetime",-560340465),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["t",Date,"unit",metabase.mbql.schema.DateTimeUnit], 0)),(function (p1__42443_SHARP_){
return (cljs.core.second(p1__42443_SHARP_) instanceof Date);
}),metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"absolute-datetime","absolute-datetime",-560340465),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["date",Date,"unit",metabase.mbql.schema.DateUnit], 0)),new cljs.core.Keyword(null,"else","else",-1508377146),metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"absolute-datetime","absolute-datetime",-560340465),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["datetime",Date,"unit",metabase.mbql.schema.DateTimeUnit], 0))], 0));
/**
 * Schema for a valid time clause.
 */
metabase.mbql.schema.time = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"time","time",1385887882),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["time",Date,"unit",metabase.mbql.schema.TimeUnit], 0));
/**
 * Schema for valid absolute datetime literals.
 */
metabase.mbql.schema.DatetimeLiteral = schema.core.conditional.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.schema.helpers.is_clause_QMARK_,new cljs.core.Keyword(null,"absolute-datetime","absolute-datetime",-560340465)),metabase.mbql.schema.absolute_datetime,cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.schema.helpers.is_clause_QMARK_,new cljs.core.Keyword(null,"time","time",1385887882)),metabase.mbql.schema.time,new cljs.core.Keyword(null,"else","else",-1508377146),schema.core.cond_pre.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([metabase.mbql.schema.TemporalLiteralString,Date], 0))], 0));
/**
 * Schema for a datetime value drivers will personally have to handle, either an `absolute-datetime` form or a
 *   `relative-datetime` form.
 */
metabase.mbql.schema.DateTimeValue = metabase.mbql.schema.helpers.one_of_STAR_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.absolute_datetime !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.absolute_datetime;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","absolute-datetime","metabase.mbql.schema/absolute-datetime",-1180642019,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"internal","internal",-854870097),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"absolute-datetime","absolute-datetime",1080191062,null),"metabase/mbql/schema.cljc",69,new cljs.core.Keyword(null,"absolute-datetime","absolute-datetime",-560340465),1,true,161,161,cljs.core.List.EMPTY,"Schema for an `:absolute-datetime` clause.",(cljs.core.truth_(metabase.mbql.schema.absolute_datetime)?metabase.mbql.schema.absolute_datetime.cljs$lang$test:null)]))):null))),metabase.mbql.schema.absolute_datetime], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.relative_datetime !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.relative_datetime;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","relative-datetime","metabase.mbql.schema/relative-datetime",1965492610,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"relative-datetime","relative-datetime",-1369266491,null),"metabase/mbql/schema.cljc",29,new cljs.core.Keyword(null,"relative-datetime","relative-datetime",1285169278),1,143,143,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"relative-datetime","relative-datetime",1285169278),new cljs.core.Keyword(null,"n","n",562130025),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol("s","cond-pre","s/cond-pre",-923707600,null),cljs.core.list(new cljs.core.Symbol("s","eq","s/eq",1021992833,null),new cljs.core.Keyword(null,"current","current",-1088038603)),new cljs.core.Symbol("s","Int","s/Int",-2116888657,null))),new cljs.core.Keyword(null,"unit","unit",375175175),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,"optional","optional",-600484260,null),new cljs.core.Symbol(null,"RelativeDatetimeUnit","RelativeDatetimeUnit",-1157637501,null)))], null),cljs.core.List.EMPTY,"Schema for a valid relative-datetime clause.",(cljs.core.truth_(metabase.mbql.schema.relative_datetime)?metabase.mbql.schema.relative_datetime.cljs$lang$test:null)]))):null))),metabase.mbql.schema.relative_datetime], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.time !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.time;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","time","metabase.mbql.schema/time",-1927273576,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"internal","internal",-854870097),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"time","time",-1268547887,null),"metabase/mbql/schema.cljc",27,new cljs.core.Keyword(null,"time","time",1385887882),1,true,194,194,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"time","time",1385887882),new cljs.core.Keyword(null,"time","time",1385887882),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol("js","Date","js/Date",946858373,null)),new cljs.core.Keyword(null,"unit","unit",375175175),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"TimeUnit","TimeUnit",1200517789,null))], null),cljs.core.List.EMPTY,"Schema for a valid time clause.",(cljs.core.truth_(metabase.mbql.schema.time)?metabase.mbql.schema.time.cljs$lang$test:null)]))):null))),metabase.mbql.schema.time], null)], 0));
/**
 * Type info about a value in a `:value` clause. Added automatically by `wrap-value-literals` middleware to values in
 *   filter clauses based on the Field in the clause.
 */
metabase.mbql.schema.ValueTypeInfo = cljs.core.PersistentArrayMap.createAsIfByAssoc([schema.core.optional_key(new cljs.core.Keyword(null,"database_type","database_type",-54700895)),schema.core.maybe(metabase.mbql.schema.helpers.NonBlankString),schema.core.optional_key(new cljs.core.Keyword(null,"base_type","base_type",1908272670)),schema.core.maybe(metabase.mbql.schema.helpers.FieldType),schema.core.optional_key(new cljs.core.Keyword(null,"semantic_type","semantic_type",272485089)),schema.core.maybe(metabase.mbql.schema.helpers.FieldSemanticOrRelationType),schema.core.optional_key(new cljs.core.Keyword(null,"unit","unit",375175175)),schema.core.maybe(metabase.mbql.schema.DateTimeUnit),schema.core.optional_key(new cljs.core.Keyword(null,"name","name",1843675177)),schema.core.maybe(metabase.mbql.schema.helpers.NonBlankString),schema.core.Keyword,schema.core.Any]);
/**
 * Schema for a valid value clause.
 */
metabase.mbql.schema.value = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"value","value",305978217),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["value",schema.core.Any,"type-info",schema.core.maybe(metabase.mbql.schema.ValueTypeInfo)], 0));
/**
 * Schema for a valid expression clause.
 */
metabase.mbql.schema.expression = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"expression","expression",202311876),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["expression-name",metabase.mbql.schema.helpers.NonBlankString], 0));
/**
 * Schema for a valid value for the `strategy-name` param of a `binning-strategy` clause.
 */
metabase.mbql.schema.BinningStrategyName = schema.core.enum$.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,"num-bins","num-bins",847672055),new cljs.core.Keyword(null,"bin-width","bin-width",1377922579),new cljs.core.Keyword(null,"default","default",-1987822328)], 0));
metabase.mbql.schema.validate_bin_width = (function metabase$mbql$schema$validate_bin_width(schema__$1){
return schema.core.constrained.cljs$core$IFn$_invoke$arity$3(schema__$1,(function (p__42446){
var map__42447 = p__42446;
var map__42447__$1 = (((((!((map__42447 == null))))?(((((map__42447.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__42447.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__42447):map__42447);
var strategy = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__42447__$1,new cljs.core.Keyword(null,"strategy","strategy",-1471631918));
var bin_width = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__42447__$1,new cljs.core.Keyword(null,"bin-width","bin-width",1377922579));
if(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(strategy,new cljs.core.Keyword(null,"bin-width","bin-width",1377922579))){
return bin_width;
} else {
return true;
}
}),"You must specify :bin-width when using the :bin-width strategy.");
});
metabase.mbql.schema.validate_num_bins = (function metabase$mbql$schema$validate_num_bins(schema__$1){
return schema.core.constrained.cljs$core$IFn$_invoke$arity$3(schema__$1,(function (p__42449){
var map__42450 = p__42449;
var map__42450__$1 = (((((!((map__42450 == null))))?(((((map__42450.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__42450.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__42450):map__42450);
var strategy = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__42450__$1,new cljs.core.Keyword(null,"strategy","strategy",-1471631918));
var num_bins = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__42450__$1,new cljs.core.Keyword(null,"num-bins","num-bins",847672055));
if(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(strategy,new cljs.core.Keyword(null,"num-bins","num-bins",847672055))){
return num_bins;
} else {
return true;
}
}),"You must specify :num-bins when using the :num-bins strategy.");
});
/**
 * Schema for `:binning` options passed to a `:field` clause.
 */
metabase.mbql.schema.FieldBinningOptions = metabase.mbql.schema.validate_num_bins(metabase.mbql.schema.validate_bin_width(cljs.core.PersistentArrayMap.createAsIfByAssoc([new cljs.core.Keyword(null,"strategy","strategy",-1471631918),metabase.mbql.schema.BinningStrategyName,schema.core.optional_key(new cljs.core.Keyword(null,"num-bins","num-bins",847672055)),metabase.mbql.schema.helpers.IntGreaterThanZero,schema.core.optional_key(new cljs.core.Keyword(null,"bin-width","bin-width",1377922579)),schema.core.constrained.cljs$core$IFn$_invoke$arity$3(schema.core.Num,cljs.core.complement(cljs.core.neg_QMARK_),"bin width must be >= 0."),schema.core.Keyword,schema.core.Any])));
metabase.mbql.schema.validate_temporal_unit = (function metabase$mbql$schema$validate_temporal_unit(schema__$1){
return schema.core.constrained.cljs$core$IFn$_invoke$arity$3(schema__$1,(function (p__42457){
var map__42458 = p__42457;
var map__42458__$1 = (((((!((map__42458 == null))))?(((((map__42458.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__42458.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__42458):map__42458);
var base_type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__42458__$1,new cljs.core.Keyword(null,"base-type","base-type",1167971299));
var temporal_unit = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__42458__$1,new cljs.core.Keyword(null,"temporal-unit","temporal-unit",-1892306358));
if(cljs.core.not(temporal_unit)){
return true;
} else {
var temp__5733__auto__ = (function (){var pred__42461 = (function (p1__42456_SHARP_,p2__42455_SHARP_){
return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2(p2__42455_SHARP_,p1__42456_SHARP_);
});
var expr__42462 = base_type;
if(pred__42461(new cljs.core.Keyword("type","Date","type/Date",-690428629),expr__42462)){
return metabase.mbql.schema.date_bucketing_units;
} else {
if(pred__42461(new cljs.core.Keyword("type","Time","type/Time",-814852413),expr__42462)){
return metabase.mbql.schema.time_bucketing_units;
} else {
if(pred__42461(new cljs.core.Keyword("type","DateTime","type/DateTime",352113310),expr__42462)){
return metabase.mbql.schema.datetime_bucketing_units;
} else {
return null;
}
}
}
})();
if(cljs.core.truth_(temp__5733__auto__)){
var units = temp__5733__auto__;
return cljs.core.contains_QMARK_(units,temporal_unit);
} else {
return true;
}
}
}),"Invalid :temporal-unit for the specified :base-type.");
});
metabase.mbql.schema.no_binning_options_at_top_level = (function metabase$mbql$schema$no_binning_options_at_top_level(schema__$1){
return schema.core.constrained.cljs$core$IFn$_invoke$arity$3(schema__$1,cljs.core.complement(new cljs.core.Keyword(null,"strategy","strategy",-1471631918)),"Found :binning keys at the top level of :field options. binning-related options belong under the :binning key.");
});
metabase.mbql.schema.FieldOptions = metabase.mbql.schema.no_binning_options_at_top_level(metabase.mbql.schema.validate_temporal_unit(cljs.core.PersistentArrayMap.createAsIfByAssoc([schema.core.optional_key(new cljs.core.Keyword(null,"base-type","base-type",1167971299)),schema.core.maybe(metabase.mbql.schema.helpers.FieldType),schema.core.optional_key(new cljs.core.Keyword(null,"source-field","source-field",933829534)),schema.core.maybe(schema.core.cond_pre.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([metabase.mbql.schema.helpers.IntGreaterThanZero,metabase.mbql.schema.helpers.NonBlankString], 0))),schema.core.optional_key(new cljs.core.Keyword(null,"temporal-unit","temporal-unit",-1892306358)),schema.core.maybe(metabase.mbql.schema.DateTimeUnit),schema.core.optional_key(new cljs.core.Keyword(null,"join-alias","join-alias",1454206794)),schema.core.maybe(metabase.mbql.schema.helpers.NonBlankString),schema.core.optional_key(new cljs.core.Keyword(null,"binning","binning",1709835866)),schema.core.maybe(metabase.mbql.schema.FieldBinningOptions),schema.core.Keyword,schema.core.Any])));
metabase.mbql.schema.require_base_type_for_field_name = (function metabase$mbql$schema$require_base_type_for_field_name(schema__$1){
return schema.core.constrained.cljs$core$IFn$_invoke$arity$3(schema__$1,(function (p__42464){
var vec__42465 = p__42464;
var _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__42465,(0),null);
var id_or_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__42465,(1),null);
var map__42468 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__42465,(2),null);
var map__42468__$1 = (((((!((map__42468 == null))))?(((((map__42468.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__42468.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__42468):map__42468);
var base_type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__42468__$1,new cljs.core.Keyword(null,"base-type","base-type",1167971299));
if(typeof id_or_name === 'string'){
return base_type;
} else {
return true;
}
}),":field clauses using a string field name must specify :base-type.");
});
/**
 * Schema for a `:field` clause.
 */
metabase.mbql.schema.field = metabase.mbql.schema.require_base_type_for_field_name(metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"field","field",-1302436500),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["id-or-name",schema.core.cond_pre.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([metabase.mbql.schema.helpers.IntGreaterThanZero,metabase.mbql.schema.helpers.NonBlankString], 0)),"options",schema.core.maybe(schema.core.recursive(new cljs.core.Var(function(){return metabase.mbql.schema.FieldOptions;},new cljs.core.Symbol("metabase.mbql.schema","FieldOptions","metabase.mbql.schema/FieldOptions",-475072702,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"private","private",-558947994),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[true,cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"FieldOptions","FieldOptions",-1536320891,null),"metabase/mbql/schema.cljc",28,1,318,318,cljs.core.List.EMPTY,null,(cljs.core.truth_(metabase.mbql.schema.FieldOptions)?metabase.mbql.schema.FieldOptions.cljs$lang$test:null)]))))], 0)));
/**
 * Schema for a `:field` clause, with the added constraint that it must use an integer Field ID.
 */
metabase.mbql.schema.field_COLON_id = schema.core.constrained.cljs$core$IFn$_invoke$arity$3(metabase.mbql.schema.field,(function (p__42470){
var vec__42471 = p__42470;
var _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__42471,(0),null);
var id_or_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__42471,(1),null);
return cljs.core.integer_QMARK_(id_or_name);
}),"Must be a :field with an integer Field ID.");
/**
 * Schema for a `:field` clause, with the added constraint that it must use an string Field name.
 */
metabase.mbql.schema.field_COLON_name = schema.core.constrained.cljs$core$IFn$_invoke$arity$3(metabase.mbql.schema.field,(function (p__42474){
var vec__42475 = p__42474;
var _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__42475,(0),null);
var id_or_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__42475,(1),null);
return typeof id_or_name === 'string';
}),"Must be a :field with a string Field name.");
metabase.mbql.schema.Field_STAR_ = metabase.mbql.schema.helpers.one_of_STAR_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.expression !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.expression;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","expression","metabase.mbql.schema/expression",370334320,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"expressions","expressions",255689909),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"expression","expression",1842843403,null),"metabase/mbql/schema.cljc",60,new cljs.core.Keyword(null,"expression","expression",202311876),1,261,261,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"expression","expression",202311876),new cljs.core.Keyword(null,"expression-name","expression-name",-1798450709),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol("helpers","NonBlankString","helpers/NonBlankString",-2060904596,null))], null),cljs.core.List.EMPTY,"Schema for a valid expression clause.",(cljs.core.truth_(metabase.mbql.schema.expression)?metabase.mbql.schema.expression.cljs$lang$test:null)]))):null))),metabase.mbql.schema.expression], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.field !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.field;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","field","metabase.mbql.schema/field",1566852856,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"added","added",2057651688),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],["0.39.0",cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"field","field",338095027,null),"metabase/mbql/schema.cljc",51,new cljs.core.Keyword(null,"field","field",-1302436500),1,364,364,cljs.core.List.EMPTY,"Schema for a `:field` clause.",(cljs.core.truth_(metabase.mbql.schema.field)?metabase.mbql.schema.field.cljs$lang$test:null)]))):null))),metabase.mbql.schema.field], null)], 0));
/**
 * Schema for either a `:field` clause (reference to a Field) or an `:expression` clause (reference to an expression).
 */
metabase.mbql.schema.Field = schema.core.recursive(new cljs.core.Var(function(){return metabase.mbql.schema.Field_STAR_;},new cljs.core.Symbol("metabase.mbql.schema","Field*","metabase.mbql.schema/Field*",-1168278623,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"private","private",-558947994),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[true,cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"Field*","Field*",-2104480026,null),"metabase/mbql/schema.cljc",22,1,388,388,cljs.core.List.EMPTY,null,(cljs.core.truth_(metabase.mbql.schema.Field_STAR_)?metabase.mbql.schema.Field_STAR_.cljs$lang$test:null)])));
/**
 * Schema for a valid aggregation clause.
 */
metabase.mbql.schema.aggregation = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"aggregation","aggregation",1597476696),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["aggregation-clause-index",schema.core.Int], 0));
/**
 * Schema for any type of valid Field clause, or for an indexed reference to an aggregation clause.
 */
metabase.mbql.schema.FieldOrAggregationReference = schema.core.if$(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.schema.helpers.is_clause_QMARK_,new cljs.core.Keyword(null,"aggregation","aggregation",1597476696)),metabase.mbql.schema.aggregation,metabase.mbql.schema.Field);
/**
 * String functions
 */
metabase.mbql.schema.string_expressions = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 10, [new cljs.core.Keyword(null,"upper","upper",246243906),null,new cljs.core.Keyword(null,"ltrim","ltrim",1654269283),null,new cljs.core.Keyword(null,"substring","substring",1140866276),null,new cljs.core.Keyword(null,"replace","replace",-786587770),null,new cljs.core.Keyword(null,"concat","concat",-2108183992),null,new cljs.core.Keyword(null,"coalesce","coalesce",654622029),null,new cljs.core.Keyword(null,"lower","lower",1120320821),null,new cljs.core.Keyword(null,"trim","trim",774319767),null,new cljs.core.Keyword(null,"regex-match-first","regex-match-first",-657299718),null,new cljs.core.Keyword(null,"rtrim","rtrim",-661336449),null], null), null);
metabase.mbql.schema.StringExpressionArg = schema.core.conditional.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.string_QMARK_,schema.core.Str,cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.schema.helpers.is_clause_QMARK_,metabase.mbql.schema.string_expressions),schema.core.recursive(new cljs.core.Var(function(){return metabase.mbql.schema.StringExpression;},new cljs.core.Symbol("metabase.mbql.schema","StringExpression","metabase.mbql.schema/StringExpression",970196104,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"declared","declared",92336021),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"StringExpression","StringExpression",-233088561,null),"metabase/mbql/schema.cljc",26,1,427,true,427,cljs.core.List.EMPTY,null,(cljs.core.truth_(metabase.mbql.schema.StringExpression)?metabase.mbql.schema.StringExpression.cljs$lang$test:null)]))),cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.schema.helpers.is_clause_QMARK_,new cljs.core.Keyword(null,"value","value",305978217)),metabase.mbql.schema.value,new cljs.core.Keyword(null,"else","else",-1508377146),metabase.mbql.schema.Field], 0));
/**
 * Set of valid arithmetic expression clause keywords.
 */
metabase.mbql.schema.arithmetic_expressions = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [new cljs.core.Keyword(null,"ceil","ceil",-1824929952),null,new cljs.core.Keyword(null,"*","*",-1294732318),null,new cljs.core.Keyword(null,"sqrt","sqrt",-1270051929),null,new cljs.core.Keyword(null,"-","-",-2112348439),null,new cljs.core.Keyword(null,"exp","exp",-261706262),null,new cljs.core.Keyword(null,"coalesce","coalesce",654622029),null,new cljs.core.Keyword(null,"/","/",1282502798),null,new cljs.core.Keyword(null,"round","round",2009433328),null,new cljs.core.Keyword(null,"power","power",-937852079),null,new cljs.core.Keyword(null,"+","+",1913524883),null,new cljs.core.Keyword(null,"abs","abs",-246026477),null,new cljs.core.Keyword(null,"length","length",588987862),null,new cljs.core.Keyword(null,"log","log",-1595516004),null,new cljs.core.Keyword(null,"floor","floor",1882041021),null], null), null);
metabase.mbql.schema.aggregations = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [new cljs.core.Keyword(null,"min","min",444991522),null,new cljs.core.Keyword(null,"stddev","stddev",-865474939),null,new cljs.core.Keyword(null,"count-where","count-where",385407720),null,new cljs.core.Keyword(null,"cum-count","cum-count",-1964431543),null,new cljs.core.Keyword(null,"sum-where","sum-where",2135348428),null,new cljs.core.Keyword(null,"cum-sum","cum-sum",2064902349),null,new cljs.core.Keyword(null,"distinct","distinct",-1788879121),null,new cljs.core.Keyword(null,"percentile","percentile",-601188752),null,new cljs.core.Keyword(null,"aggregation-options","aggregation-options",-1904917550),null,new cljs.core.Keyword(null,"var","var",-769682797),null,new cljs.core.Keyword(null,"median","median",569566131),null,new cljs.core.Keyword(null,"share","share",-589433933),null,new cljs.core.Keyword(null,"max","max",61366548),null,new cljs.core.Keyword(null,"count","count",2139924085),null,new cljs.core.Keyword(null,"avg","avg",197406200),null,new cljs.core.Keyword(null,"metric","metric",408798077),null,new cljs.core.Keyword(null,"sum","sum",136986814),null], null), null);
metabase.mbql.schema.NumericExpressionArg = schema.core.conditional.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.number_QMARK_,schema.core.Num,cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.schema.helpers.is_clause_QMARK_,metabase.mbql.schema.arithmetic_expressions),schema.core.recursive(new cljs.core.Var(function(){return metabase.mbql.schema.ArithmeticExpression;},new cljs.core.Symbol("metabase.mbql.schema","ArithmeticExpression","metabase.mbql.schema/ArithmeticExpression",-2037262177,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"declared","declared",92336021),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"ArithmeticExpression","ArithmeticExpression",-2677674,null),"metabase/mbql/schema.cljc",30,1,449,true,449,cljs.core.List.EMPTY,null,(cljs.core.truth_(metabase.mbql.schema.ArithmeticExpression)?metabase.mbql.schema.ArithmeticExpression.cljs$lang$test:null)]))),cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.schema.helpers.is_clause_QMARK_,metabase.mbql.schema.aggregations),schema.core.recursive(new cljs.core.Var(function(){return metabase.mbql.schema.Aggregation;},new cljs.core.Symbol("metabase.mbql.schema","Aggregation","metabase.mbql.schema/Aggregation",-1908264889,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"declared","declared",92336021),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"Aggregation","Aggregation",-955933538,null),"metabase/mbql/schema.cljc",21,1,450,true,450,cljs.core.List.EMPTY,null,(cljs.core.truth_(metabase.mbql.schema.Aggregation)?metabase.mbql.schema.Aggregation.cljs$lang$test:null)]))),cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.schema.helpers.is_clause_QMARK_,new cljs.core.Keyword(null,"value","value",305978217)),metabase.mbql.schema.value,new cljs.core.Keyword(null,"else","else",-1508377146),metabase.mbql.schema.Field], 0));
metabase.mbql.schema.ExpressionArg = schema.core.conditional.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.number_QMARK_,schema.core.Num,cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.schema.helpers.is_clause_QMARK_,metabase.mbql.schema.arithmetic_expressions),schema.core.recursive(new cljs.core.Var(function(){return metabase.mbql.schema.ArithmeticExpression;},new cljs.core.Symbol("metabase.mbql.schema","ArithmeticExpression","metabase.mbql.schema/ArithmeticExpression",-2037262177,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"declared","declared",92336021),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"ArithmeticExpression","ArithmeticExpression",-2677674,null),"metabase/mbql/schema.cljc",30,1,449,true,449,cljs.core.List.EMPTY,null,(cljs.core.truth_(metabase.mbql.schema.ArithmeticExpression)?metabase.mbql.schema.ArithmeticExpression.cljs$lang$test:null)]))),cljs.core.string_QMARK_,schema.core.Str,cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.schema.helpers.is_clause_QMARK_,metabase.mbql.schema.string_expressions),schema.core.recursive(new cljs.core.Var(function(){return metabase.mbql.schema.StringExpression;},new cljs.core.Symbol("metabase.mbql.schema","StringExpression","metabase.mbql.schema/StringExpression",970196104,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"declared","declared",92336021),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"StringExpression","StringExpression",-233088561,null),"metabase/mbql/schema.cljc",26,1,427,true,427,cljs.core.List.EMPTY,null,(cljs.core.truth_(metabase.mbql.schema.StringExpression)?metabase.mbql.schema.StringExpression.cljs$lang$test:null)]))),cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.schema.helpers.is_clause_QMARK_,new cljs.core.Keyword(null,"value","value",305978217)),metabase.mbql.schema.value,new cljs.core.Keyword(null,"else","else",-1508377146),metabase.mbql.schema.Field], 0));
metabase.mbql.schema.NumericExpressionArgOrInterval = schema.core.if$(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.schema.helpers.is_clause_QMARK_,new cljs.core.Keyword(null,"interval","interval",1708495417)),metabase.mbql.schema.interval,metabase.mbql.schema.NumericExpressionArg);
/**
 * Schema for a valid coalesce clause.
 */
metabase.mbql.schema.coalesce = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"coalesce","coalesce",654622029),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["a",metabase.mbql.schema.ExpressionArg,"b",metabase.mbql.schema.ExpressionArg,"more",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"rest","rest",-1241696419),metabase.mbql.schema.ExpressionArg], null)], 0));
/**
 * Schema for a valid substring clause.
 */
metabase.mbql.schema.substring = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"substring","substring",1140866276),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["s",metabase.mbql.schema.StringExpressionArg,"start",metabase.mbql.schema.NumericExpressionArg,"length",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"optional","optional",2053951509),metabase.mbql.schema.NumericExpressionArg], null)], 0));
/**
 * Schema for a valid length clause.
 */
metabase.mbql.schema.length = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"length","length",588987862),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["s",metabase.mbql.schema.StringExpressionArg], 0));
/**
 * Schema for a valid trim clause.
 */
metabase.mbql.schema.trim = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"trim","trim",774319767),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["s",metabase.mbql.schema.StringExpressionArg], 0));
/**
 * Schema for a valid rtrim clause.
 */
metabase.mbql.schema.rtrim = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"rtrim","rtrim",-661336449),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["s",metabase.mbql.schema.StringExpressionArg], 0));
/**
 * Schema for a valid ltrim clause.
 */
metabase.mbql.schema.ltrim = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"ltrim","ltrim",1654269283),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["s",metabase.mbql.schema.StringExpressionArg], 0));
/**
 * Schema for a valid upper clause.
 */
metabase.mbql.schema.upper = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"upper","upper",246243906),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["s",metabase.mbql.schema.StringExpressionArg], 0));
/**
 * Schema for a valid lower clause.
 */
metabase.mbql.schema.lower = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"lower","lower",1120320821),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["s",metabase.mbql.schema.StringExpressionArg], 0));
/**
 * Schema for a valid replace clause.
 */
metabase.mbql.schema.replace = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"replace","replace",-786587770),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["s",metabase.mbql.schema.StringExpressionArg,"match",schema.core.Str,"replacement",schema.core.Str], 0));
/**
 * Schema for a valid concat clause.
 */
metabase.mbql.schema.concat = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"concat","concat",-2108183992),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["a",metabase.mbql.schema.StringExpressionArg,"b",metabase.mbql.schema.StringExpressionArg,"more",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"rest","rest",-1241696419),metabase.mbql.schema.StringExpressionArg], null)], 0));
/**
 * Schema for a valid regex-match-first clause.
 */
metabase.mbql.schema.regex_match_first = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"regex-match-first","regex-match-first",-657299718),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["s",metabase.mbql.schema.StringExpressionArg,"pattern",schema.core.Str], 0));
metabase.mbql.schema.StringExpression_STAR_ = metabase.mbql.schema.helpers.one_of_STAR_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.substring !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.substring;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","substring","metabase.mbql.schema/substring",1829402610,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"expressions","expressions",255689909),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"substring","substring",-1513569493,null),"metabase/mbql/schema.cljc",59,new cljs.core.Keyword(null,"substring","substring",1140866276),1,497,497,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"substring","substring",1140866276),new cljs.core.Keyword(null,"s","s",1705939918),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"StringExpressionArg","StringExpressionArg",-1131357258,null)),new cljs.core.Keyword(null,"start","start",-355208981),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"NumericExpressionArg","NumericExpressionArg",-1537445195,null)),new cljs.core.Keyword(null,"length","length",588987862),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,"optional","optional",-600484260,null),new cljs.core.Symbol(null,"NumericExpressionArg","NumericExpressionArg",-1537445195,null)))], null),cljs.core.List.EMPTY,"Schema for a valid substring clause.",(cljs.core.truth_(metabase.mbql.schema.substring)?metabase.mbql.schema.substring.cljs$lang$test:null)]))):null))),metabase.mbql.schema.substring], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.trim !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.trim;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","trim","metabase.mbql.schema/trim",1991053191,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"expressions","expressions",255689909),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"trim","trim",-1880116002,null),"metabase/mbql/schema.cljc",54,new cljs.core.Keyword(null,"trim","trim",774319767),1,503,503,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"trim","trim",774319767),new cljs.core.Keyword(null,"s","s",1705939918),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"StringExpressionArg","StringExpressionArg",-1131357258,null))], null),cljs.core.List.EMPTY,"Schema for a valid trim clause.",(cljs.core.truth_(metabase.mbql.schema.trim)?metabase.mbql.schema.trim.cljs$lang$test:null)]))):null))),metabase.mbql.schema.trim], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.ltrim !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.ltrim;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","ltrim","metabase.mbql.schema/ltrim",52894949,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"expressions","expressions",255689909),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"ltrim","ltrim",-1000166486,null),"metabase/mbql/schema.cljc",55,new cljs.core.Keyword(null,"ltrim","ltrim",1654269283),1,509,509,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ltrim","ltrim",1654269283),new cljs.core.Keyword(null,"s","s",1705939918),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"StringExpressionArg","StringExpressionArg",-1131357258,null))], null),cljs.core.List.EMPTY,"Schema for a valid ltrim clause.",(cljs.core.truth_(metabase.mbql.schema.ltrim)?metabase.mbql.schema.ltrim.cljs$lang$test:null)]))):null))),metabase.mbql.schema.ltrim], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.rtrim !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.rtrim;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","rtrim","metabase.mbql.schema/rtrim",1937815937,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"expressions","expressions",255689909),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"rtrim","rtrim",979195078,null),"metabase/mbql/schema.cljc",55,new cljs.core.Keyword(null,"rtrim","rtrim",-661336449),1,506,506,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"rtrim","rtrim",-661336449),new cljs.core.Keyword(null,"s","s",1705939918),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"StringExpressionArg","StringExpressionArg",-1131357258,null))], null),cljs.core.List.EMPTY,"Schema for a valid rtrim clause.",(cljs.core.truth_(metabase.mbql.schema.rtrim)?metabase.mbql.schema.rtrim.cljs$lang$test:null)]))):null))),metabase.mbql.schema.rtrim], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.replace !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.replace;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","replace","metabase.mbql.schema/replace",1269362826,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"expressions","expressions",255689909),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"replace","replace",853943757,null),"metabase/mbql/schema.cljc",57,new cljs.core.Keyword(null,"replace","replace",-786587770),1,518,518,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"replace","replace",-786587770),new cljs.core.Keyword(null,"s","s",1705939918),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"StringExpressionArg","StringExpressionArg",-1131357258,null)),new cljs.core.Keyword(null,"match","match",1220059550),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol("s","Str","s/Str",907974338,null)),new cljs.core.Keyword(null,"replacement","replacement",-1836238839),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol("s","Str","s/Str",907974338,null))], null),cljs.core.List.EMPTY,"Schema for a valid replace clause.",(cljs.core.truth_(metabase.mbql.schema.replace)?metabase.mbql.schema.replace.cljs$lang$test:null)]))):null))),metabase.mbql.schema.replace], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.lower !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.lower;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","lower","metabase.mbql.schema/lower",-313920313,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"expressions","expressions",255689909),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"lower","lower",-1534114948,null),"metabase/mbql/schema.cljc",55,new cljs.core.Keyword(null,"lower","lower",1120320821),1,515,515,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"lower","lower",1120320821),new cljs.core.Keyword(null,"s","s",1705939918),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"StringExpressionArg","StringExpressionArg",-1131357258,null))], null),cljs.core.List.EMPTY,"Schema for a valid lower clause.",(cljs.core.truth_(metabase.mbql.schema.lower)?metabase.mbql.schema.lower.cljs$lang$test:null)]))):null))),metabase.mbql.schema.lower], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.upper !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.upper;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","upper","metabase.mbql.schema/upper",993691634,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"expressions","expressions",255689909),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"upper","upper",1886775433,null),"metabase/mbql/schema.cljc",55,new cljs.core.Keyword(null,"upper","upper",246243906),1,512,512,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"upper","upper",246243906),new cljs.core.Keyword(null,"s","s",1705939918),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"StringExpressionArg","StringExpressionArg",-1131357258,null))], null),cljs.core.List.EMPTY,"Schema for a valid upper clause.",(cljs.core.truth_(metabase.mbql.schema.upper)?metabase.mbql.schema.upper.cljs$lang$test:null)]))):null))),metabase.mbql.schema.upper], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.concat !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.concat;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","concat","metabase.mbql.schema/concat",-580718778,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"expressions","expressions",255689909),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"concat","concat",-467652465,null),"metabase/mbql/schema.cljc",56,new cljs.core.Keyword(null,"concat","concat",-2108183992),1,521,521,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"concat","concat",-2108183992),new cljs.core.Keyword(null,"a","a",-2123407586),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"StringExpressionArg","StringExpressionArg",-1131357258,null)),new cljs.core.Keyword(null,"b","b",1482224470),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"StringExpressionArg","StringExpressionArg",-1131357258,null)),new cljs.core.Keyword(null,"more","more",-2058821800),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,"rest","rest",398835108,null),new cljs.core.Symbol(null,"StringExpressionArg","StringExpressionArg",-1131357258,null)))], null),cljs.core.List.EMPTY,"Schema for a valid concat clause.",(cljs.core.truth_(metabase.mbql.schema.concat)?metabase.mbql.schema.concat.cljs$lang$test:null)]))):null))),metabase.mbql.schema.concat], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.regex_match_first !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.regex_match_first;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","regex-match-first","metabase.mbql.schema/regex-match-first",1918122376,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"expressions","expressions",255689909),"null",new cljs.core.Keyword(null,"regex","regex",939488856),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"regex-match-first","regex-match-first",983231809,null),"metabase/mbql/schema.cljc",74,new cljs.core.Keyword(null,"regex-match-first","regex-match-first",-657299718),1,524,524,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"regex-match-first","regex-match-first",-657299718),new cljs.core.Keyword(null,"s","s",1705939918),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"StringExpressionArg","StringExpressionArg",-1131357258,null)),new cljs.core.Keyword(null,"pattern","pattern",242135423),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol("s","Str","s/Str",907974338,null))], null),cljs.core.List.EMPTY,"Schema for a valid regex-match-first clause.",(cljs.core.truth_(metabase.mbql.schema.regex_match_first)?metabase.mbql.schema.regex_match_first.cljs$lang$test:null)]))):null))),metabase.mbql.schema.regex_match_first], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.coalesce !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.coalesce;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","coalesce","metabase.mbql.schema/coalesce",-1048570669,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"expressions","expressions",255689909),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"coalesce","coalesce",-1999813740,null),"metabase/mbql/schema.cljc",58,new cljs.core.Keyword(null,"coalesce","coalesce",654622029),1,494,494,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"coalesce","coalesce",654622029),new cljs.core.Keyword(null,"a","a",-2123407586),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"ExpressionArg","ExpressionArg",1060743736,null)),new cljs.core.Keyword(null,"b","b",1482224470),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"ExpressionArg","ExpressionArg",1060743736,null)),new cljs.core.Keyword(null,"more","more",-2058821800),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,"rest","rest",398835108,null),new cljs.core.Symbol(null,"ExpressionArg","ExpressionArg",1060743736,null)))], null),cljs.core.List.EMPTY,"Schema for a valid coalesce clause.",(cljs.core.truth_(metabase.mbql.schema.coalesce)?metabase.mbql.schema.coalesce.cljs$lang$test:null)]))):null))),metabase.mbql.schema.coalesce], null)], 0));
/**
 * Schema for the definition of an string expression.
 */
metabase.mbql.schema.StringExpression = schema.core.recursive(new cljs.core.Var(function(){return metabase.mbql.schema.StringExpression_STAR_;},new cljs.core.Symbol("metabase.mbql.schema","StringExpression*","metabase.mbql.schema/StringExpression*",224546636,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"private","private",-558947994),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[true,cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"StringExpression*","StringExpression*",1110382599,null),"metabase/mbql/schema.cljc",33,1,527,527,cljs.core.List.EMPTY,null,(cljs.core.truth_(metabase.mbql.schema.StringExpression_STAR_)?metabase.mbql.schema.StringExpression_STAR_.cljs$lang$test:null)])));
/**
 * Schema for a valid + clause.
 */
metabase.mbql.schema._PLUS_ = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"+","+",1913524883),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["x",metabase.mbql.schema.NumericExpressionArg,"y",metabase.mbql.schema.NumericExpressionArgOrInterval,"more",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"rest","rest",-1241696419),metabase.mbql.schema.NumericExpressionArgOrInterval], null)], 0));
/**
 * Schema for a valid - clause.
 */
metabase.mbql.schema._ = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"-","-",-2112348439),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["x",metabase.mbql.schema.NumericExpressionArg,"y",metabase.mbql.schema.NumericExpressionArgOrInterval,"more",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"rest","rest",-1241696419),metabase.mbql.schema.NumericExpressionArgOrInterval], null)], 0));
/**
 * Schema for a valid / clause.
 */
metabase.mbql.schema._SLASH_ = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"/","/",1282502798),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["x",metabase.mbql.schema.NumericExpressionArg,"y",metabase.mbql.schema.NumericExpressionArg,"more",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"rest","rest",-1241696419),metabase.mbql.schema.NumericExpressionArg], null)], 0));
/**
 * Schema for a valid * clause.
 */
metabase.mbql.schema._STAR_ = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"*","*",-1294732318),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["x",metabase.mbql.schema.NumericExpressionArg,"y",metabase.mbql.schema.NumericExpressionArg,"more",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"rest","rest",-1241696419),metabase.mbql.schema.NumericExpressionArg], null)], 0));
/**
 * Schema for a valid floor clause.
 */
metabase.mbql.schema.floor = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"floor","floor",1882041021),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["x",metabase.mbql.schema.NumericExpressionArg], 0));
/**
 * Schema for a valid ceil clause.
 */
metabase.mbql.schema.ceil = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"ceil","ceil",-1824929952),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["x",metabase.mbql.schema.NumericExpressionArg], 0));
/**
 * Schema for a valid round clause.
 */
metabase.mbql.schema.round = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"round","round",2009433328),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["x",metabase.mbql.schema.NumericExpressionArg], 0));
/**
 * Schema for a valid abs clause.
 */
metabase.mbql.schema.abs = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"abs","abs",-246026477),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["x",metabase.mbql.schema.NumericExpressionArg], 0));
/**
 * Schema for a valid power clause.
 */
metabase.mbql.schema.power = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"power","power",-937852079),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["x",metabase.mbql.schema.NumericExpressionArg,"y",metabase.mbql.schema.NumericExpressionArg], 0));
/**
 * Schema for a valid sqrt clause.
 */
metabase.mbql.schema.sqrt = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"sqrt","sqrt",-1270051929),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["x",metabase.mbql.schema.NumericExpressionArg], 0));
/**
 * Schema for a valid exp clause.
 */
metabase.mbql.schema.exp = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"exp","exp",-261706262),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["x",metabase.mbql.schema.NumericExpressionArg], 0));
/**
 * Schema for a valid log clause.
 */
metabase.mbql.schema.log = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"log","log",-1595516004),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["x",metabase.mbql.schema.NumericExpressionArg], 0));
metabase.mbql.schema.ArithmeticExpression_STAR_ = metabase.mbql.schema.helpers.one_of_STAR_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema._PLUS_ !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema._PLUS_;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","+","metabase.mbql.schema/+",-1802115711,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"expressions","expressions",255689909),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"+","+",-740910886,null),"metabase/mbql/schema.cljc",51,new cljs.core.Keyword(null,"+","+",1913524883),1,534,534,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"+","+",1913524883),new cljs.core.Keyword(null,"x","x",2099068185),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"NumericExpressionArg","NumericExpressionArg",-1537445195,null)),new cljs.core.Keyword(null,"y","y",-1757859776),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"NumericExpressionArgOrInterval","NumericExpressionArgOrInterval",-151709337,null)),new cljs.core.Keyword(null,"more","more",-2058821800),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,"rest","rest",398835108,null),new cljs.core.Symbol(null,"NumericExpressionArgOrInterval","NumericExpressionArgOrInterval",-151709337,null)))], null),cljs.core.List.EMPTY,"Schema for a valid + clause.",(cljs.core.truth_(metabase.mbql.schema._PLUS_)?metabase.mbql.schema._PLUS_.cljs$lang$test:null)]))):null))),metabase.mbql.schema._PLUS_], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema._ !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema._;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","-","metabase.mbql.schema/-",-1440604423,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"expressions","expressions",255689909),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"-","-",-471816912,null),"metabase/mbql/schema.cljc",51,new cljs.core.Keyword(null,"-","-",-2112348439),1,537,537,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"-","-",-2112348439),new cljs.core.Keyword(null,"x","x",2099068185),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"NumericExpressionArg","NumericExpressionArg",-1537445195,null)),new cljs.core.Keyword(null,"y","y",-1757859776),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"NumericExpressionArgOrInterval","NumericExpressionArgOrInterval",-151709337,null)),new cljs.core.Keyword(null,"more","more",-2058821800),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,"rest","rest",398835108,null),new cljs.core.Symbol(null,"NumericExpressionArgOrInterval","NumericExpressionArgOrInterval",-151709337,null)))], null),cljs.core.List.EMPTY,"Schema for a valid - clause.",(cljs.core.truth_(metabase.mbql.schema._)?metabase.mbql.schema._.cljs$lang$test:null)]))):null))),metabase.mbql.schema._], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema._SLASH_;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","/","metabase.mbql.schema//",2004134796,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"expressions","expressions",255689909),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"/","/",-1371932971,null),"metabase/mbql/schema.cljc",new cljs.core.Keyword(null,"/","/",1282502798),1,540,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"/","/",1282502798),new cljs.core.Keyword(null,"x","x",2099068185),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"NumericExpressionArg","NumericExpressionArg",-1537445195,null)),new cljs.core.Keyword(null,"y","y",-1757859776),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"NumericExpressionArg","NumericExpressionArg",-1537445195,null)),new cljs.core.Keyword(null,"more","more",-2058821800),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,"rest","rest",398835108,null),new cljs.core.Symbol(null,"NumericExpressionArg","NumericExpressionArg",-1537445195,null)))], null),cljs.core.List.EMPTY,"Schema for a valid / clause.",(cljs.core.truth_(metabase.mbql.schema._SLASH_)?metabase.mbql.schema._SLASH_.cljs$lang$test:null)]))):null))),metabase.mbql.schema._SLASH_], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema._STAR_ !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema._STAR_;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","*","metabase.mbql.schema/*",1842546528,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"expressions","expressions",255689909),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"*","*",345799209,null),"metabase/mbql/schema.cljc",51,new cljs.core.Keyword(null,"*","*",-1294732318),1,542,542,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"*","*",-1294732318),new cljs.core.Keyword(null,"x","x",2099068185),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"NumericExpressionArg","NumericExpressionArg",-1537445195,null)),new cljs.core.Keyword(null,"y","y",-1757859776),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"NumericExpressionArg","NumericExpressionArg",-1537445195,null)),new cljs.core.Keyword(null,"more","more",-2058821800),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,"rest","rest",398835108,null),new cljs.core.Symbol(null,"NumericExpressionArg","NumericExpressionArg",-1537445195,null)))], null),cljs.core.List.EMPTY,"Schema for a valid * clause.",(cljs.core.truth_(metabase.mbql.schema._STAR_)?metabase.mbql.schema._STAR_.cljs$lang$test:null)]))):null))),metabase.mbql.schema._STAR_], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.coalesce !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.coalesce;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","coalesce","metabase.mbql.schema/coalesce",-1048570669,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"expressions","expressions",255689909),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"coalesce","coalesce",-1999813740,null),"metabase/mbql/schema.cljc",58,new cljs.core.Keyword(null,"coalesce","coalesce",654622029),1,494,494,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"coalesce","coalesce",654622029),new cljs.core.Keyword(null,"a","a",-2123407586),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"ExpressionArg","ExpressionArg",1060743736,null)),new cljs.core.Keyword(null,"b","b",1482224470),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"ExpressionArg","ExpressionArg",1060743736,null)),new cljs.core.Keyword(null,"more","more",-2058821800),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,"rest","rest",398835108,null),new cljs.core.Symbol(null,"ExpressionArg","ExpressionArg",1060743736,null)))], null),cljs.core.List.EMPTY,"Schema for a valid coalesce clause.",(cljs.core.truth_(metabase.mbql.schema.coalesce)?metabase.mbql.schema.coalesce.cljs$lang$test:null)]))):null))),metabase.mbql.schema.coalesce], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.length !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.length;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","length","metabase.mbql.schema/length",-844221500,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"expressions","expressions",255689909),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"length","length",-2065447907,null),"metabase/mbql/schema.cljc",56,new cljs.core.Keyword(null,"length","length",588987862),1,500,500,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"length","length",588987862),new cljs.core.Keyword(null,"s","s",1705939918),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"StringExpressionArg","StringExpressionArg",-1131357258,null))], null),cljs.core.List.EMPTY,"Schema for a valid length clause.",(cljs.core.truth_(metabase.mbql.schema.length)?metabase.mbql.schema.length.cljs$lang$test:null)]))):null))),metabase.mbql.schema.length], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.floor !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.floor;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","floor","metabase.mbql.schema/floor",422926927,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"expressions","expressions",255689909),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"floor","floor",-772394748,null),"metabase/mbql/schema.cljc",55,new cljs.core.Keyword(null,"floor","floor",1882041021),1,544,544,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"floor","floor",1882041021),new cljs.core.Keyword(null,"x","x",2099068185),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"NumericExpressionArg","NumericExpressionArg",-1537445195,null))], null),cljs.core.List.EMPTY,"Schema for a valid floor clause.",(cljs.core.truth_(metabase.mbql.schema.floor)?metabase.mbql.schema.floor.cljs$lang$test:null)]))):null))),metabase.mbql.schema.floor], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.ceil !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.ceil;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","ceil","metabase.mbql.schema/ceil",-1404628626,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"expressions","expressions",255689909),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"ceil","ceil",-184398425,null),"metabase/mbql/schema.cljc",54,new cljs.core.Keyword(null,"ceil","ceil",-1824929952),1,547,547,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ceil","ceil",-1824929952),new cljs.core.Keyword(null,"x","x",2099068185),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"NumericExpressionArg","NumericExpressionArg",-1537445195,null))], null),cljs.core.List.EMPTY,"Schema for a valid ceil clause.",(cljs.core.truth_(metabase.mbql.schema.ceil)?metabase.mbql.schema.ceil.cljs$lang$test:null)]))):null))),metabase.mbql.schema.ceil], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.round !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.round;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","round","metabase.mbql.schema/round",314817788,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"expressions","expressions",255689909),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"round","round",-645002441,null),"metabase/mbql/schema.cljc",55,new cljs.core.Keyword(null,"round","round",2009433328),1,550,550,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"round","round",2009433328),new cljs.core.Keyword(null,"x","x",2099068185),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"NumericExpressionArg","NumericExpressionArg",-1537445195,null))], null),cljs.core.List.EMPTY,"Schema for a valid round clause.",(cljs.core.truth_(metabase.mbql.schema.round)?metabase.mbql.schema.round.cljs$lang$test:null)]))):null))),metabase.mbql.schema.round], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.abs !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.abs;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","abs","metabase.mbql.schema/abs",1792880149,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"expressions","expressions",255689909),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"abs","abs",1394505050,null),"metabase/mbql/schema.cljc",53,new cljs.core.Keyword(null,"abs","abs",-246026477),1,553,553,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"abs","abs",-246026477),new cljs.core.Keyword(null,"x","x",2099068185),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"NumericExpressionArg","NumericExpressionArg",-1537445195,null))], null),cljs.core.List.EMPTY,"Schema for a valid abs clause.",(cljs.core.truth_(metabase.mbql.schema.abs)?metabase.mbql.schema.abs.cljs$lang$test:null)]))):null))),metabase.mbql.schema.abs], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.power !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.power;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","power","metabase.mbql.schema/power",-517905321,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"advanced-math-expressions","advanced-math-expressions",1076581757),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"power","power",702679448,null),"metabase/mbql/schema.cljc",69,new cljs.core.Keyword(null,"power","power",-937852079),1,556,556,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"power","power",-937852079),new cljs.core.Keyword(null,"x","x",2099068185),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"NumericExpressionArg","NumericExpressionArg",-1537445195,null)),new cljs.core.Keyword(null,"y","y",-1757859776),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"NumericExpressionArg","NumericExpressionArg",-1537445195,null))], null),cljs.core.List.EMPTY,"Schema for a valid power clause.",(cljs.core.truth_(metabase.mbql.schema.power)?metabase.mbql.schema.power.cljs$lang$test:null)]))):null))),metabase.mbql.schema.power], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.sqrt !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.sqrt;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","sqrt","metabase.mbql.schema/sqrt",-824662873,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"advanced-math-expressions","advanced-math-expressions",1076581757),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"sqrt","sqrt",370479598,null),"metabase/mbql/schema.cljc",68,new cljs.core.Keyword(null,"sqrt","sqrt",-1270051929),1,559,559,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"sqrt","sqrt",-1270051929),new cljs.core.Keyword(null,"x","x",2099068185),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"NumericExpressionArg","NumericExpressionArg",-1537445195,null))], null),cljs.core.List.EMPTY,"Schema for a valid sqrt clause.",(cljs.core.truth_(metabase.mbql.schema.sqrt)?metabase.mbql.schema.sqrt.cljs$lang$test:null)]))):null))),metabase.mbql.schema.sqrt], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.exp !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.exp;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","exp","metabase.mbql.schema/exp",451780488,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"advanced-math-expressions","advanced-math-expressions",1076581757),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"exp","exp",1378825265,null),"metabase/mbql/schema.cljc",67,new cljs.core.Keyword(null,"exp","exp",-261706262),1,562,562,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"exp","exp",-261706262),new cljs.core.Keyword(null,"x","x",2099068185),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"NumericExpressionArg","NumericExpressionArg",-1537445195,null))], null),cljs.core.List.EMPTY,"Schema for a valid exp clause.",(cljs.core.truth_(metabase.mbql.schema.exp)?metabase.mbql.schema.exp.cljs$lang$test:null)]))):null))),metabase.mbql.schema.exp], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.log !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.log;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","log","metabase.mbql.schema/log",-899459908,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"advanced-math-expressions","advanced-math-expressions",1076581757),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"log","log",45015523,null),"metabase/mbql/schema.cljc",67,new cljs.core.Keyword(null,"log","log",-1595516004),1,565,565,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"log","log",-1595516004),new cljs.core.Keyword(null,"x","x",2099068185),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"NumericExpressionArg","NumericExpressionArg",-1537445195,null))], null),cljs.core.List.EMPTY,"Schema for a valid log clause.",(cljs.core.truth_(metabase.mbql.schema.log)?metabase.mbql.schema.log.cljs$lang$test:null)]))):null))),metabase.mbql.schema.log], null)], 0));
/**
 * Schema for the definition of an arithmetic expression.
 */
metabase.mbql.schema.ArithmeticExpression = schema.core.recursive(new cljs.core.Var(function(){return metabase.mbql.schema.ArithmeticExpression_STAR_;},new cljs.core.Symbol("metabase.mbql.schema","ArithmeticExpression*","metabase.mbql.schema/ArithmeticExpression*",1582495545,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"private","private",-558947994),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[true,cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"ArithmeticExpression*","ArithmeticExpression*",353324128,null),"metabase/mbql/schema.cljc",37,1,568,568,cljs.core.List.EMPTY,null,(cljs.core.truth_(metabase.mbql.schema.ArithmeticExpression_STAR_)?metabase.mbql.schema.ArithmeticExpression_STAR_.cljs$lang$test:null)])));
/**
 * Schema for a valid and clause.
 */
metabase.mbql.schema.and = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"and","and",-971899817),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["first-clause",schema.core.recursive(new cljs.core.Var(function(){return metabase.mbql.schema.Filter;},new cljs.core.Symbol("metabase.mbql.schema","Filter","metabase.mbql.schema/Filter",-1444327113,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"declared","declared",92336021),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"Filter","Filter",-424893332,null),"metabase/mbql/schema.cljc",16,1,578,true,578,cljs.core.List.EMPTY,null,(cljs.core.truth_(metabase.mbql.schema.Filter)?metabase.mbql.schema.Filter.cljs$lang$test:null)]))),"second-clause",schema.core.recursive(new cljs.core.Var(function(){return metabase.mbql.schema.Filter;},new cljs.core.Symbol("metabase.mbql.schema","Filter","metabase.mbql.schema/Filter",-1444327113,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"declared","declared",92336021),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"Filter","Filter",-424893332,null),"metabase/mbql/schema.cljc",16,1,578,true,578,cljs.core.List.EMPTY,null,(cljs.core.truth_(metabase.mbql.schema.Filter)?metabase.mbql.schema.Filter.cljs$lang$test:null)]))),"other-clauses",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"rest","rest",-1241696419),schema.core.recursive(new cljs.core.Var(function(){return metabase.mbql.schema.Filter;},new cljs.core.Symbol("metabase.mbql.schema","Filter","metabase.mbql.schema/Filter",-1444327113,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"declared","declared",92336021),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"Filter","Filter",-424893332,null),"metabase/mbql/schema.cljc",16,1,578,true,578,cljs.core.List.EMPTY,null,(cljs.core.truth_(metabase.mbql.schema.Filter)?metabase.mbql.schema.Filter.cljs$lang$test:null)])))], null)], 0));
/**
 * Schema for a valid or clause.
 */
metabase.mbql.schema.or = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"or","or",235744169),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["first-clause",schema.core.recursive(new cljs.core.Var(function(){return metabase.mbql.schema.Filter;},new cljs.core.Symbol("metabase.mbql.schema","Filter","metabase.mbql.schema/Filter",-1444327113,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"declared","declared",92336021),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"Filter","Filter",-424893332,null),"metabase/mbql/schema.cljc",16,1,578,true,578,cljs.core.List.EMPTY,null,(cljs.core.truth_(metabase.mbql.schema.Filter)?metabase.mbql.schema.Filter.cljs$lang$test:null)]))),"second-clause",schema.core.recursive(new cljs.core.Var(function(){return metabase.mbql.schema.Filter;},new cljs.core.Symbol("metabase.mbql.schema","Filter","metabase.mbql.schema/Filter",-1444327113,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"declared","declared",92336021),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"Filter","Filter",-424893332,null),"metabase/mbql/schema.cljc",16,1,578,true,578,cljs.core.List.EMPTY,null,(cljs.core.truth_(metabase.mbql.schema.Filter)?metabase.mbql.schema.Filter.cljs$lang$test:null)]))),"other-clauses",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"rest","rest",-1241696419),schema.core.recursive(new cljs.core.Var(function(){return metabase.mbql.schema.Filter;},new cljs.core.Symbol("metabase.mbql.schema","Filter","metabase.mbql.schema/Filter",-1444327113,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"declared","declared",92336021),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"Filter","Filter",-424893332,null),"metabase/mbql/schema.cljc",16,1,578,true,578,cljs.core.List.EMPTY,null,(cljs.core.truth_(metabase.mbql.schema.Filter)?metabase.mbql.schema.Filter.cljs$lang$test:null)])))], null)], 0));
/**
 * Schema for a valid not clause.
 */
metabase.mbql.schema.not = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"not","not",-595976884),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["clause",schema.core.recursive(new cljs.core.Var(function(){return metabase.mbql.schema.Filter;},new cljs.core.Symbol("metabase.mbql.schema","Filter","metabase.mbql.schema/Filter",-1444327113,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"declared","declared",92336021),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"Filter","Filter",-424893332,null),"metabase/mbql/schema.cljc",16,1,578,true,578,cljs.core.List.EMPTY,null,(cljs.core.truth_(metabase.mbql.schema.Filter)?metabase.mbql.schema.Filter.cljs$lang$test:null)])))], 0));
metabase.mbql.schema.FieldOrRelativeDatetime = schema.core.if$(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.schema.helpers.is_clause_QMARK_,new cljs.core.Keyword(null,"relative-datetime","relative-datetime",1285169278)),metabase.mbql.schema.relative_datetime,metabase.mbql.schema.Field);
/**
 * Schema for things things that make sense in a `=` or `!=` filter, i.e. things that can be compared for equality.
 */
metabase.mbql.schema.EqualityComparable = schema.core.maybe(schema.core.cond_pre.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([schema.core.Bool,schema.core.Num,schema.core.Str,metabase.mbql.schema.DatetimeLiteral,metabase.mbql.schema.FieldOrRelativeDatetime,metabase.mbql.schema.ExpressionArg,metabase.mbql.schema.value], 0)));
/**
 * Schema for things that make sense in a filter like `>` or `<`, i.e. things that can be sorted.
 */
metabase.mbql.schema.OrderComparable = schema.core.if$(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.schema.helpers.is_clause_QMARK_,new cljs.core.Keyword(null,"value","value",305978217)),metabase.mbql.schema.value,schema.core.cond_pre.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([schema.core.Num,schema.core.Str,metabase.mbql.schema.DatetimeLiteral,metabase.mbql.schema.ExpressionArg,metabase.mbql.schema.FieldOrRelativeDatetime], 0)));
/**
 * Schema for a valid = clause.
 */
metabase.mbql.schema._EQ_ = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"=","=",1152933628),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field",metabase.mbql.schema.EqualityComparable,"value-or-field",metabase.mbql.schema.EqualityComparable,"more-values-or-fields",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"rest","rest",-1241696419),metabase.mbql.schema.EqualityComparable], null)], 0));
/**
 * Schema for a valid != clause.
 */
metabase.mbql.schema._BANG__EQ_ = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"!=","!=",-1841737356),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field",metabase.mbql.schema.EqualityComparable,"value-or-field",metabase.mbql.schema.EqualityComparable,"more-values-or-fields",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"rest","rest",-1241696419),metabase.mbql.schema.EqualityComparable], null)], 0));
/**
 * Schema for a valid < clause.
 */
metabase.mbql.schema._LT_ = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"<","<",-646864291),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field",metabase.mbql.schema.OrderComparable,"value-or-field",metabase.mbql.schema.OrderComparable], 0));
/**
 * Schema for a valid > clause.
 */
metabase.mbql.schema._GT_ = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,">",">",-555517146),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field",metabase.mbql.schema.OrderComparable,"value-or-field",metabase.mbql.schema.OrderComparable], 0));
/**
 * Schema for a valid <= clause.
 */
metabase.mbql.schema._LT__EQ_ = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"<=","<=",-395636158),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field",metabase.mbql.schema.OrderComparable,"value-or-field",metabase.mbql.schema.OrderComparable], 0));
/**
 * Schema for a valid >= clause.
 */
metabase.mbql.schema._GT__EQ_ = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,">=",">=",-623615505),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field",metabase.mbql.schema.OrderComparable,"value-or-field",metabase.mbql.schema.OrderComparable], 0));
/**
 * Schema for a valid between clause.
 */
metabase.mbql.schema.between = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"between","between",1131099276),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field",metabase.mbql.schema.OrderComparable,"min",metabase.mbql.schema.OrderComparable,"max",metabase.mbql.schema.OrderComparable], 0));
/**
 * Schema for a valid inside clause.
 */
metabase.mbql.schema.inside = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"inside","inside",1972503011),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["lat-field",metabase.mbql.schema.OrderComparable,"lon-field",metabase.mbql.schema.OrderComparable,"lat-max",metabase.mbql.schema.OrderComparable,"lon-min",metabase.mbql.schema.OrderComparable,"lat-min",metabase.mbql.schema.OrderComparable,"lon-max",metabase.mbql.schema.OrderComparable], 0));
/**
 * Schema for a valid is-null clause.
 */
metabase.mbql.schema.is_null = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"is-null","is-null",-1997050930),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field",metabase.mbql.schema.Field], 0));
/**
 * Schema for a valid not-null clause.
 */
metabase.mbql.schema.not_null = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"not-null","not-null",-1326718535),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field",metabase.mbql.schema.Field], 0));
/**
 * Schema for a valid is-empty clause.
 */
metabase.mbql.schema.is_empty = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"is-empty","is-empty",-1040302908),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field",metabase.mbql.schema.Field], 0));
/**
 * Schema for a valid not-empty clause.
 */
metabase.mbql.schema.not_empty = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"not-empty","not-empty",388922063),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field",metabase.mbql.schema.Field], 0));
metabase.mbql.schema.StringFilterOptions = cljs.core.PersistentArrayMap.createAsIfByAssoc([schema.core.optional_key(new cljs.core.Keyword(null,"case-sensitive","case-sensitive",-1005239404)),schema.core.Bool]);
/**
 * Schema for a valid starts-with clause.
 */
metabase.mbql.schema.starts_with = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"starts-with","starts-with",366503009),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field",metabase.mbql.schema.StringExpressionArg,"string-or-field",metabase.mbql.schema.StringExpressionArg,"options",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"optional","optional",2053951509),metabase.mbql.schema.StringFilterOptions], null)], 0));
/**
 * Schema for a valid ends-with clause.
 */
metabase.mbql.schema.ends_with = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"ends-with","ends-with",-456791011),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field",metabase.mbql.schema.StringExpressionArg,"string-or-field",metabase.mbql.schema.StringExpressionArg,"options",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"optional","optional",2053951509),metabase.mbql.schema.StringFilterOptions], null)], 0));
/**
 * Schema for a valid contains clause.
 */
metabase.mbql.schema.contains = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"contains","contains",676899812),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field",metabase.mbql.schema.StringExpressionArg,"string-or-field",metabase.mbql.schema.StringExpressionArg,"options",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"optional","optional",2053951509),metabase.mbql.schema.StringFilterOptions], null)], 0));
/**
 * Schema for a valid does-not-contain clause.
 */
metabase.mbql.schema.does_not_contain = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"does-not-contain","does-not-contain",-274946853),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field",metabase.mbql.schema.StringExpressionArg,"string-or-field",metabase.mbql.schema.StringExpressionArg,"options",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"optional","optional",2053951509),metabase.mbql.schema.StringFilterOptions], null)], 0));
metabase.mbql.schema.TimeIntervalOptions = cljs.core.PersistentArrayMap.createAsIfByAssoc([schema.core.optional_key(new cljs.core.Keyword(null,"include-current","include-current",-1602371981)),schema.core.Bool]);
/**
 * Schema for a valid time-interval clause.
 */
metabase.mbql.schema.time_interval = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"time-interval","time-interval",704622015),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field",metabase.mbql.schema.field,"n",schema.core.cond_pre.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([schema.core.Int,schema.core.enum$.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,"current","current",-1088038603),new cljs.core.Keyword(null,"last","last",1105735132),new cljs.core.Keyword(null,"next","next",-117701485)], 0))], 0)),"unit",metabase.mbql.schema.RelativeDatetimeUnit,"options",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"optional","optional",2053951509),metabase.mbql.schema.TimeIntervalOptions], null)], 0));
/**
 * Schema for a valid segment clause.
 */
metabase.mbql.schema.segment = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"segment","segment",-964921196),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["segment-id",schema.core.cond_pre.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([metabase.mbql.schema.helpers.IntGreaterThanZero,metabase.mbql.schema.helpers.NonBlankString], 0))], 0));
metabase.mbql.schema.Filter_STAR_ = schema.core.conditional.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.schema.helpers.is_clause_QMARK_,metabase.mbql.schema.arithmetic_expressions),metabase.mbql.schema.ArithmeticExpression,cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.schema.helpers.is_clause_QMARK_,metabase.mbql.schema.string_expressions),metabase.mbql.schema.StringExpression,new cljs.core.Keyword(null,"else","else",-1508377146),metabase.mbql.schema.helpers.one_of_STAR_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.and !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.and;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","and","metabase.mbql.schema/and",1553856071,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"and","and",668631710,null),"metabase/mbql/schema.cljc",15,new cljs.core.Keyword(null,"and","and",-971899817),1,580,580,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"and","and",-971899817),new cljs.core.Keyword(null,"first-clause","first-clause",-20953491),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol("s","recursive","s/recursive",-1935549792,null),cljs.core.list(new cljs.core.Symbol(null,"var","var",870848730,null),new cljs.core.Symbol(null,"Filter","Filter",-424893332,null)))),new cljs.core.Keyword(null,"second-clause","second-clause",-461435645),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol("s","recursive","s/recursive",-1935549792,null),cljs.core.list(new cljs.core.Symbol(null,"var","var",870848730,null),new cljs.core.Symbol(null,"Filter","Filter",-424893332,null)))),new cljs.core.Keyword(null,"other-clauses","other-clauses",1570511021),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,"rest","rest",398835108,null),cljs.core.list(new cljs.core.Symbol("s","recursive","s/recursive",-1935549792,null),cljs.core.list(new cljs.core.Symbol(null,"var","var",870848730,null),new cljs.core.Symbol(null,"Filter","Filter",-424893332,null)))))], null),cljs.core.List.EMPTY,"Schema for a valid and clause.",(cljs.core.truth_(metabase.mbql.schema.and)?metabase.mbql.schema.and.cljs$lang$test:null)]))):null))),metabase.mbql.schema.and], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.or !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.or;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","or","metabase.mbql.schema/or",-1500355255,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"or","or",1876275696,null),"metabase/mbql/schema.cljc",14,new cljs.core.Keyword(null,"or","or",235744169),1,585,585,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"or","or",235744169),new cljs.core.Keyword(null,"first-clause","first-clause",-20953491),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol("s","recursive","s/recursive",-1935549792,null),cljs.core.list(new cljs.core.Symbol(null,"var","var",870848730,null),new cljs.core.Symbol(null,"Filter","Filter",-424893332,null)))),new cljs.core.Keyword(null,"second-clause","second-clause",-461435645),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol("s","recursive","s/recursive",-1935549792,null),cljs.core.list(new cljs.core.Symbol(null,"var","var",870848730,null),new cljs.core.Symbol(null,"Filter","Filter",-424893332,null)))),new cljs.core.Keyword(null,"other-clauses","other-clauses",1570511021),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,"rest","rest",398835108,null),cljs.core.list(new cljs.core.Symbol("s","recursive","s/recursive",-1935549792,null),cljs.core.list(new cljs.core.Symbol(null,"var","var",870848730,null),new cljs.core.Symbol(null,"Filter","Filter",-424893332,null)))))], null),cljs.core.List.EMPTY,"Schema for a valid or clause.",(cljs.core.truth_(metabase.mbql.schema.or)?metabase.mbql.schema.or.cljs$lang$test:null)]))):null))),metabase.mbql.schema.or], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.not !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.not;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","not","metabase.mbql.schema/not",-113379604,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"not","not",1044554643,null),"metabase/mbql/schema.cljc",15,new cljs.core.Keyword(null,"not","not",-595976884),1,590,590,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"not","not",-595976884),new cljs.core.Keyword(null,"clause","clause",1479668060),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol("s","recursive","s/recursive",-1935549792,null),cljs.core.list(new cljs.core.Symbol(null,"var","var",870848730,null),new cljs.core.Symbol(null,"Filter","Filter",-424893332,null))))], null),cljs.core.List.EMPTY,"Schema for a valid not clause.",(cljs.core.truth_(metabase.mbql.schema.not)?metabase.mbql.schema.not.cljs$lang$test:null)]))):null))),metabase.mbql.schema.not], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema._EQ_ !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema._EQ_;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","=","metabase.mbql.schema/=",1850085384,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"=","=",-1501502141,null),"metabase/mbql/schema.cljc",13,new cljs.core.Keyword(null,"=","=",1152933628),1,633,633,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"=","=",1152933628),new cljs.core.Keyword(null,"field","field",-1302436500),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"EqualityComparable","EqualityComparable",-2076258858,null)),new cljs.core.Keyword(null,"value-or-field","value-or-field",-1387286309),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"EqualityComparable","EqualityComparable",-2076258858,null)),new cljs.core.Keyword(null,"more-values-or-fields","more-values-or-fields",-886177554),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,"rest","rest",398835108,null),new cljs.core.Symbol(null,"EqualityComparable","EqualityComparable",-2076258858,null)))], null),cljs.core.List.EMPTY,"Schema for a valid = clause.",(cljs.core.truth_(metabase.mbql.schema._EQ_)?metabase.mbql.schema._EQ_.cljs$lang$test:null)]))):null))),metabase.mbql.schema._EQ_], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema._BANG__EQ_ !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema._BANG__EQ_;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","!=","metabase.mbql.schema/!=",-807630752,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"!=","!=",-201205829,null),"metabase/mbql/schema.cljc",14,new cljs.core.Keyword(null,"!=","!=",-1841737356),1,634,634,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"!=","!=",-1841737356),new cljs.core.Keyword(null,"field","field",-1302436500),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"EqualityComparable","EqualityComparable",-2076258858,null)),new cljs.core.Keyword(null,"value-or-field","value-or-field",-1387286309),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"EqualityComparable","EqualityComparable",-2076258858,null)),new cljs.core.Keyword(null,"more-values-or-fields","more-values-or-fields",-886177554),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,"rest","rest",398835108,null),new cljs.core.Symbol(null,"EqualityComparable","EqualityComparable",-2076258858,null)))], null),cljs.core.List.EMPTY,"Schema for a valid != clause.",(cljs.core.truth_(metabase.mbql.schema._BANG__EQ_)?metabase.mbql.schema._BANG__EQ_.cljs$lang$test:null)]))):null))),metabase.mbql.schema._BANG__EQ_], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema._LT_ !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema._LT_;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","<","metabase.mbql.schema/<",-1057391587,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"<","<",993667236,null),"metabase/mbql/schema.cljc",13,new cljs.core.Keyword(null,"<","<",-646864291),1,636,636,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"<","<",-646864291),new cljs.core.Keyword(null,"field","field",-1302436500),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"OrderComparable","OrderComparable",772072595,null)),new cljs.core.Keyword(null,"value-or-field","value-or-field",-1387286309),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"OrderComparable","OrderComparable",772072595,null))], null),cljs.core.List.EMPTY,"Schema for a valid < clause.",(cljs.core.truth_(metabase.mbql.schema._LT_)?metabase.mbql.schema._LT_.cljs$lang$test:null)]))):null))),metabase.mbql.schema._LT_], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema._GT_ !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema._GT_;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema",">","metabase.mbql.schema/>",-1619862474,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,">",">",1085014381,null),"metabase/mbql/schema.cljc",13,new cljs.core.Keyword(null,">",">",-555517146),1,637,637,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,">",">",-555517146),new cljs.core.Keyword(null,"field","field",-1302436500),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"OrderComparable","OrderComparable",772072595,null)),new cljs.core.Keyword(null,"value-or-field","value-or-field",-1387286309),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"OrderComparable","OrderComparable",772072595,null))], null),cljs.core.List.EMPTY,"Schema for a valid > clause.",(cljs.core.truth_(metabase.mbql.schema._GT_)?metabase.mbql.schema._GT_.cljs$lang$test:null)]))):null))),metabase.mbql.schema._GT_], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema._LT__EQ_ !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema._LT__EQ_;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","<=","metabase.mbql.schema/<=",-2098137664,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"<=","<=",1244895369,null),"metabase/mbql/schema.cljc",14,new cljs.core.Keyword(null,"<=","<=",-395636158),1,638,638,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"<=","<=",-395636158),new cljs.core.Keyword(null,"field","field",-1302436500),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"OrderComparable","OrderComparable",772072595,null)),new cljs.core.Keyword(null,"value-or-field","value-or-field",-1387286309),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"OrderComparable","OrderComparable",772072595,null))], null),cljs.core.List.EMPTY,"Schema for a valid <= clause.",(cljs.core.truth_(metabase.mbql.schema._LT__EQ_)?metabase.mbql.schema._LT__EQ_.cljs$lang$test:null)]))):null))),metabase.mbql.schema._LT__EQ_], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema._GT__EQ_ !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema._GT__EQ_;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema",">=","metabase.mbql.schema/>=",1977236849,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,">=",">=",1016916022,null),"metabase/mbql/schema.cljc",14,new cljs.core.Keyword(null,">=",">=",-623615505),1,639,639,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,">=",">=",-623615505),new cljs.core.Keyword(null,"field","field",-1302436500),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"OrderComparable","OrderComparable",772072595,null)),new cljs.core.Keyword(null,"value-or-field","value-or-field",-1387286309),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"OrderComparable","OrderComparable",772072595,null))], null),cljs.core.List.EMPTY,"Schema for a valid >= clause.",(cljs.core.truth_(metabase.mbql.schema._GT__EQ_)?metabase.mbql.schema._GT__EQ_.cljs$lang$test:null)]))):null))),metabase.mbql.schema._GT__EQ_], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.between !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.between;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","between","metabase.mbql.schema/between",-302972630,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"between","between",-1523336493,null),"metabase/mbql/schema.cljc",19,new cljs.core.Keyword(null,"between","between",1131099276),1,642,642,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"between","between",1131099276),new cljs.core.Keyword(null,"field","field",-1302436500),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"OrderComparable","OrderComparable",772072595,null)),new cljs.core.Keyword(null,"min","min",444991522),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"OrderComparable","OrderComparable",772072595,null)),new cljs.core.Keyword(null,"max","max",61366548),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"OrderComparable","OrderComparable",772072595,null))], null),cljs.core.List.EMPTY,"Schema for a valid between clause.",(cljs.core.truth_(metabase.mbql.schema.between)?metabase.mbql.schema.between.cljs$lang$test:null)]))):null))),metabase.mbql.schema.between], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.starts_with !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.starts_with;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","starts-with","metabase.mbql.schema/starts-with",1063663591,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"starts-with","starts-with",2007034536,null),"metabase/mbql/schema.cljc",23,new cljs.core.Keyword(null,"starts-with","starts-with",366503009),1,665,665,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"starts-with","starts-with",366503009),new cljs.core.Keyword(null,"field","field",-1302436500),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"StringExpressionArg","StringExpressionArg",-1131357258,null)),new cljs.core.Keyword(null,"string-or-field","string-or-field",-1970678542),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"StringExpressionArg","StringExpressionArg",-1131357258,null)),new cljs.core.Keyword(null,"options","options",99638489),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,"optional","optional",-600484260,null),new cljs.core.Symbol(null,"StringFilterOptions","StringFilterOptions",-847398229,null)))], null),cljs.core.List.EMPTY,"Schema for a valid starts-with clause.",(cljs.core.truth_(metabase.mbql.schema.starts_with)?metabase.mbql.schema.starts_with.cljs$lang$test:null)]))):null))),metabase.mbql.schema.starts_with], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.ends_with !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.ends_with;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","ends-with","metabase.mbql.schema/ends-with",-2117292579,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"ends-with","ends-with",1183740516,null),"metabase/mbql/schema.cljc",21,new cljs.core.Keyword(null,"ends-with","ends-with",-456791011),1,666,666,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ends-with","ends-with",-456791011),new cljs.core.Keyword(null,"field","field",-1302436500),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"StringExpressionArg","StringExpressionArg",-1131357258,null)),new cljs.core.Keyword(null,"string-or-field","string-or-field",-1970678542),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"StringExpressionArg","StringExpressionArg",-1131357258,null)),new cljs.core.Keyword(null,"options","options",99638489),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,"optional","optional",-600484260,null),new cljs.core.Symbol(null,"StringFilterOptions","StringFilterOptions",-847398229,null)))], null),cljs.core.List.EMPTY,"Schema for a valid ends-with clause.",(cljs.core.truth_(metabase.mbql.schema.ends_with)?metabase.mbql.schema.ends_with.cljs$lang$test:null)]))):null))),metabase.mbql.schema.ends_with], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.contains !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.contains;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","contains","metabase.mbql.schema/contains",1399250832,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"contains","contains",-1977535957,null),"metabase/mbql/schema.cljc",20,new cljs.core.Keyword(null,"contains","contains",676899812),1,667,667,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"contains","contains",676899812),new cljs.core.Keyword(null,"field","field",-1302436500),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"StringExpressionArg","StringExpressionArg",-1131357258,null)),new cljs.core.Keyword(null,"string-or-field","string-or-field",-1970678542),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"StringExpressionArg","StringExpressionArg",-1131357258,null)),new cljs.core.Keyword(null,"options","options",99638489),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,"optional","optional",-600484260,null),new cljs.core.Symbol(null,"StringFilterOptions","StringFilterOptions",-847398229,null)))], null),cljs.core.List.EMPTY,"Schema for a valid contains clause.",(cljs.core.truth_(metabase.mbql.schema.contains)?metabase.mbql.schema.contains.cljs$lang$test:null)]))):null))),metabase.mbql.schema.contains], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.does_not_contain !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.does_not_contain;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","does-not-contain","metabase.mbql.schema/does-not-contain",-1742276611,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"sugar","sugar",-73788488),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"does-not-contain","does-not-contain",1365584674,null),"metabase/mbql/schema.cljc",36,new cljs.core.Keyword(null,"does-not-contain","does-not-contain",-274946853),1,670,670,true,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"does-not-contain","does-not-contain",-274946853),new cljs.core.Keyword(null,"field","field",-1302436500),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"StringExpressionArg","StringExpressionArg",-1131357258,null)),new cljs.core.Keyword(null,"string-or-field","string-or-field",-1970678542),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"StringExpressionArg","StringExpressionArg",-1131357258,null)),new cljs.core.Keyword(null,"options","options",99638489),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,"optional","optional",-600484260,null),new cljs.core.Symbol(null,"StringFilterOptions","StringFilterOptions",-847398229,null)))], null),cljs.core.List.EMPTY,"Schema for a valid does-not-contain clause.",(cljs.core.truth_(metabase.mbql.schema.does_not_contain)?metabase.mbql.schema.does_not_contain.cljs$lang$test:null)]))):null))),metabase.mbql.schema.does_not_contain], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.inside !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.inside;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","inside","metabase.mbql.schema/inside",-291996315,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"sugar","sugar",-73788488),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"inside","inside",-681932758,null),"metabase/mbql/schema.cljc",26,new cljs.core.Keyword(null,"inside","inside",1972503011),1,645,645,true,new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"inside","inside",1972503011),new cljs.core.Keyword(null,"lat-field","lat-field",-830652957),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"OrderComparable","OrderComparable",772072595,null)),new cljs.core.Keyword(null,"lon-field","lon-field",517872067),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"OrderComparable","OrderComparable",772072595,null)),new cljs.core.Keyword(null,"lat-max","lat-max",841568226),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"OrderComparable","OrderComparable",772072595,null)),new cljs.core.Keyword(null,"lon-min","lon-min",-787291357),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"OrderComparable","OrderComparable",772072595,null)),new cljs.core.Keyword(null,"lat-min","lat-min",1630784161),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"OrderComparable","OrderComparable",772072595,null)),new cljs.core.Keyword(null,"lon-max","lon-max",1590224717),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"OrderComparable","OrderComparable",772072595,null))], null),cljs.core.List.EMPTY,"Schema for a valid inside clause.",(cljs.core.truth_(metabase.mbql.schema.inside)?metabase.mbql.schema.inside.cljs$lang$test:null)]))):null))),metabase.mbql.schema.inside], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.is_empty !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.is_empty;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","is-empty","metabase.mbql.schema/is-empty",1686480962,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"sugar","sugar",-73788488),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"is-empty","is-empty",600228619,null),"metabase/mbql/schema.cljc",28,new cljs.core.Keyword(null,"is-empty","is-empty",-1040302908),1,659,659,true,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"is-empty","is-empty",-1040302908),new cljs.core.Keyword(null,"field","field",-1302436500),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"Field","Field",430385967,null))], null),cljs.core.List.EMPTY,"Schema for a valid is-empty clause.",(cljs.core.truth_(metabase.mbql.schema.is_empty)?metabase.mbql.schema.is_empty.cljs$lang$test:null)]))):null))),metabase.mbql.schema.is_empty], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.not_empty !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.not_empty;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","not-empty","metabase.mbql.schema/not-empty",-2093700401,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"sugar","sugar",-73788488),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"not-empty","not-empty",2029453590,null),"metabase/mbql/schema.cljc",29,new cljs.core.Keyword(null,"not-empty","not-empty",388922063),1,660,660,true,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"not-empty","not-empty",388922063),new cljs.core.Keyword(null,"field","field",-1302436500),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"Field","Field",430385967,null))], null),cljs.core.List.EMPTY,"Schema for a valid not-empty clause.",(cljs.core.truth_(metabase.mbql.schema.not_empty)?metabase.mbql.schema.not_empty.cljs$lang$test:null)]))):null))),metabase.mbql.schema.not_empty], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.is_null !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.is_null;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","is-null","metabase.mbql.schema/is-null",637054412,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"sugar","sugar",-73788488),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"is-null","is-null",-356519403,null),"metabase/mbql/schema.cljc",27,new cljs.core.Keyword(null,"is-null","is-null",-1997050930),1,654,654,true,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"is-null","is-null",-1997050930),new cljs.core.Keyword(null,"field","field",-1302436500),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"Field","Field",430385967,null))], null),cljs.core.List.EMPTY,"Schema for a valid is-null clause.",(cljs.core.truth_(metabase.mbql.schema.is_null)?metabase.mbql.schema.is_null.cljs$lang$test:null)]))):null))),metabase.mbql.schema.is_null], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.not_null !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.not_null;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","not-null","metabase.mbql.schema/not-null",1248581449,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"sugar","sugar",-73788488),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"not-null","not-null",313812992,null),"metabase/mbql/schema.cljc",28,new cljs.core.Keyword(null,"not-null","not-null",-1326718535),1,655,655,true,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"not-null","not-null",-1326718535),new cljs.core.Keyword(null,"field","field",-1302436500),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"Field","Field",430385967,null))], null),cljs.core.List.EMPTY,"Schema for a valid not-null clause.",(cljs.core.truth_(metabase.mbql.schema.not_null)?metabase.mbql.schema.not_null.cljs$lang$test:null)]))):null))),metabase.mbql.schema.not_null], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.time_interval !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.time_interval;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","time-interval","metabase.mbql.schema/time-interval",1275783375,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"sugar","sugar",-73788488),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"time-interval","time-interval",-1949813754,null),"metabase/mbql/schema.cljc",33,new cljs.core.Keyword(null,"time-interval","time-interval",704622015),1,690,690,true,new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"time-interval","time-interval",704622015),new cljs.core.Keyword(null,"field","field",-1302436500),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"field","field",338095027,null)),new cljs.core.Keyword(null,"n","n",562130025),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol("s","cond-pre","s/cond-pre",-923707600,null),new cljs.core.Symbol("s","Int","s/Int",-2116888657,null),cljs.core.list(new cljs.core.Symbol("s","enum","s/enum",-975416934,null),new cljs.core.Keyword(null,"current","current",-1088038603),new cljs.core.Keyword(null,"last","last",1105735132),new cljs.core.Keyword(null,"next","next",-117701485)))),new cljs.core.Keyword(null,"unit","unit",375175175),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"RelativeDatetimeUnit","RelativeDatetimeUnit",-1157637501,null)),new cljs.core.Keyword(null,"options","options",99638489),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,"optional","optional",-600484260,null),new cljs.core.Symbol(null,"TimeIntervalOptions","TimeIntervalOptions",1566864026,null)))], null),cljs.core.List.EMPTY,"Schema for a valid time-interval clause.",(cljs.core.truth_(metabase.mbql.schema.time_interval)?metabase.mbql.schema.time_interval.cljs$lang$test:null)]))):null))),metabase.mbql.schema.time_interval], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.segment !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.segment;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","segment","metabase.mbql.schema/segment",-512121472,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"sugar","sugar",-73788488),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"segment","segment",675610331,null),"metabase/mbql/schema.cljc",27,new cljs.core.Keyword(null,"segment","segment",-964921196),1,703,703,true,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"segment","segment",-964921196),new cljs.core.Keyword(null,"segment-id","segment-id",1810133590),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol("s","cond-pre","s/cond-pre",-923707600,null),new cljs.core.Symbol("helpers","IntGreaterThanZero","helpers/IntGreaterThanZero",1743901629,null),new cljs.core.Symbol("helpers","NonBlankString","helpers/NonBlankString",-2060904596,null)))], null),cljs.core.List.EMPTY,"Schema for a valid segment clause.",(cljs.core.truth_(metabase.mbql.schema.segment)?metabase.mbql.schema.segment.cljs$lang$test:null)]))):null))),metabase.mbql.schema.segment], null)], 0))], 0));
/**
 * Schema for a valid MBQL `:filter` clause.
 */
metabase.mbql.schema.Filter = schema.core.recursive(new cljs.core.Var(function(){return metabase.mbql.schema.Filter_STAR_;},new cljs.core.Symbol("metabase.mbql.schema","Filter*","metabase.mbql.schema/Filter*",-140275836,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"private","private",-558947994),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[true,cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"Filter*","Filter*",-1193205185,null),"metabase/mbql/schema.cljc",23,1,705,705,cljs.core.List.EMPTY,null,(cljs.core.truth_(metabase.mbql.schema.Filter_STAR_)?metabase.mbql.schema.Filter_STAR_.cljs$lang$test:null)])));
metabase.mbql.schema.CaseClause = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one(metabase.mbql.schema.Filter,"pred"),schema.core.one(metabase.mbql.schema.ExpressionArg,"expr")], null);
metabase.mbql.schema.CaseClauses = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [metabase.mbql.schema.CaseClause], null);
metabase.mbql.schema.CaseOptions = cljs.core.PersistentArrayMap.createAsIfByAssoc([schema.core.optional_key(new cljs.core.Keyword(null,"default","default",-1987822328)),metabase.mbql.schema.ExpressionArg]);
/**
 * Schema for a valid case clause.
 */
metabase.mbql.schema.case$ = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"case","case",1143702196),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["clauses",metabase.mbql.schema.CaseClauses,"options",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"optional","optional",2053951509),metabase.mbql.schema.CaseOptions], null)], 0));
/**
 * Schema for anything that is accepted as a top-level expression definition, either an arithmetic expression such as a
 *   `:+` clause or a `:field` clause.
 */
metabase.mbql.schema.FieldOrExpressionDef = schema.core.conditional.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.schema.helpers.is_clause_QMARK_,metabase.mbql.schema.arithmetic_expressions),metabase.mbql.schema.ArithmeticExpression,cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.schema.helpers.is_clause_QMARK_,metabase.mbql.schema.string_expressions),metabase.mbql.schema.StringExpression,cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.schema.helpers.is_clause_QMARK_,new cljs.core.Keyword(null,"case","case",1143702196)),metabase.mbql.schema.case$,new cljs.core.Keyword(null,"else","else",-1508377146),metabase.mbql.schema.Field], 0));
/**
 * Schema for a valid count clause.
 */
metabase.mbql.schema.count = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"count","count",2139924085),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"optional","optional",2053951509),metabase.mbql.schema.Field], null)], 0));
/**
 * Schema for a valid cum-count clause.
 */
metabase.mbql.schema.cum_count = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"cum-count","cum-count",-1964431543),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"optional","optional",2053951509),metabase.mbql.schema.Field], null)], 0));
/**
 * Schema for a valid avg clause.
 */
metabase.mbql.schema.avg = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"avg","avg",197406200),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field-or-expression",metabase.mbql.schema.FieldOrExpressionDef], 0));
/**
 * Schema for a valid cum-sum clause.
 */
metabase.mbql.schema.cum_sum = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"cum-sum","cum-sum",2064902349),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field-or-expression",metabase.mbql.schema.FieldOrExpressionDef], 0));
/**
 * Schema for a valid distinct clause.
 */
metabase.mbql.schema.distinct = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"distinct","distinct",-1788879121),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field-or-expression",metabase.mbql.schema.FieldOrExpressionDef], 0));
/**
 * Schema for a valid sum clause.
 */
metabase.mbql.schema.sum = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"sum","sum",136986814),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field-or-expression",metabase.mbql.schema.FieldOrExpressionDef], 0));
/**
 * Schema for a valid min clause.
 */
metabase.mbql.schema.min = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"min","min",444991522),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field-or-expression",metabase.mbql.schema.FieldOrExpressionDef], 0));
/**
 * Schema for a valid max clause.
 */
metabase.mbql.schema.max = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"max","max",61366548),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field-or-expression",metabase.mbql.schema.FieldOrExpressionDef], 0));
/**
 * Schema for a valid sum-where clause.
 */
metabase.mbql.schema.sum_where = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"sum-where","sum-where",2135348428),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field-or-expression",metabase.mbql.schema.FieldOrExpressionDef,"pred",metabase.mbql.schema.Filter], 0));
/**
 * Schema for a valid count-where clause.
 */
metabase.mbql.schema.count_where = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"count-where","count-where",385407720),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["pred",metabase.mbql.schema.Filter], 0));
/**
 * Schema for a valid share clause.
 */
metabase.mbql.schema.share = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"share","share",-589433933),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["pred",metabase.mbql.schema.Filter], 0));
/**
 * Schema for a valid stddev clause.
 */
metabase.mbql.schema.stddev = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"stddev","stddev",-865474939),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field-or-expression",metabase.mbql.schema.FieldOrExpressionDef], 0));
/**
 * Schema for a valid var clause.
 */
metabase.mbql.schema.ag_COLON_var = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"var","var",-769682797),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field-or-expression",metabase.mbql.schema.FieldOrExpressionDef], 0));
/**
 * Schema for a valid median clause.
 */
metabase.mbql.schema.median = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"median","median",569566131),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field-or-expression",metabase.mbql.schema.FieldOrExpressionDef], 0));
/**
 * Schema for a valid percentile clause.
 */
metabase.mbql.schema.percentile = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"percentile","percentile",-601188752),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field-or-expression",metabase.mbql.schema.FieldOrExpressionDef,"percentile",metabase.mbql.schema.NumericExpressionArg], 0));
/**
 * Schema for a valid metric clause.
 */
metabase.mbql.schema.metric = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"metric","metric",408798077),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["metric-id",schema.core.cond_pre.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([metabase.mbql.schema.helpers.IntGreaterThanZero,metabase.mbql.schema.helpers.NonBlankString], 0))], 0));
metabase.mbql.schema.UnnamedAggregation_STAR_ = schema.core.if$(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.schema.helpers.is_clause_QMARK_,metabase.mbql.schema.arithmetic_expressions),metabase.mbql.schema.ArithmeticExpression,metabase.mbql.schema.helpers.one_of_STAR_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.count !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.count;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","count","metabase.mbql.schema/count",678066683,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"sugar","sugar",-73788488),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"basic-aggregations","basic-aggregations",-1628959228),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"count","count",-514511684,null),"metabase/mbql/schema.cljc",70,new cljs.core.Keyword(null,"count","count",2139924085),1,746,746,true,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"count","count",2139924085),new cljs.core.Keyword(null,"field","field",-1302436500),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,"optional","optional",-600484260,null),new cljs.core.Symbol(null,"Field","Field",430385967,null)))], null),cljs.core.List.EMPTY,"Schema for a valid count clause.",(cljs.core.truth_(metabase.mbql.schema.count)?metabase.mbql.schema.count.cljs$lang$test:null)]))):null))),metabase.mbql.schema.count], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.avg !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.avg;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","avg","metabase.mbql.schema/avg",-1530848906,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"basic-aggregations","basic-aggregations",-1628959228),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"avg","avg",1837937727,null),"metabase/mbql/schema.cljc",60,new cljs.core.Keyword(null,"avg","avg",197406200),1,757,757,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"avg","avg",197406200),new cljs.core.Keyword(null,"field-or-expression","field-or-expression",-1409494368),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"FieldOrExpressionDef","FieldOrExpressionDef",-788269541,null))], null),cljs.core.List.EMPTY,"Schema for a valid avg clause.",(cljs.core.truth_(metabase.mbql.schema.avg)?metabase.mbql.schema.avg.cljs$lang$test:null)]))):null))),metabase.mbql.schema.avg], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.cum_count !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.cum_count;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","cum-count","metabase.mbql.schema/cum-count",596526831,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"sugar","sugar",-73788488),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"basic-aggregations","basic-aggregations",-1628959228),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"cum-count","cum-count",-323900016,null),"metabase/mbql/schema.cljc",74,new cljs.core.Keyword(null,"cum-count","cum-count",-1964431543),1,747,747,true,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"cum-count","cum-count",-1964431543),new cljs.core.Keyword(null,"field","field",-1302436500),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,"optional","optional",-600484260,null),new cljs.core.Symbol(null,"Field","Field",430385967,null)))], null),cljs.core.List.EMPTY,"Schema for a valid cum-count clause.",(cljs.core.truth_(metabase.mbql.schema.cum_count)?metabase.mbql.schema.cum_count.cljs$lang$test:null)]))):null))),metabase.mbql.schema.cum_count], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.cum_sum !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.cum_sum;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","cum-sum","metabase.mbql.schema/cum-sum",-2078342061,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"basic-aggregations","basic-aggregations",-1628959228),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"cum-sum","cum-sum",-589533420,null),"metabase/mbql/schema.cljc",64,new cljs.core.Keyword(null,"cum-sum","cum-sum",2064902349),1,758,758,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"cum-sum","cum-sum",2064902349),new cljs.core.Keyword(null,"field-or-expression","field-or-expression",-1409494368),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"FieldOrExpressionDef","FieldOrExpressionDef",-788269541,null))], null),cljs.core.List.EMPTY,"Schema for a valid cum-sum clause.",(cljs.core.truth_(metabase.mbql.schema.cum_sum)?metabase.mbql.schema.cum_sum.cljs$lang$test:null)]))):null))),metabase.mbql.schema.cum_sum], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.distinct !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.distinct;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","distinct","metabase.mbql.schema/distinct",-823840515,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"basic-aggregations","basic-aggregations",-1628959228),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"distinct","distinct",-148347594,null),"metabase/mbql/schema.cljc",65,new cljs.core.Keyword(null,"distinct","distinct",-1788879121),1,759,759,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"distinct","distinct",-1788879121),new cljs.core.Keyword(null,"field-or-expression","field-or-expression",-1409494368),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"FieldOrExpressionDef","FieldOrExpressionDef",-788269541,null))], null),cljs.core.List.EMPTY,"Schema for a valid distinct clause.",(cljs.core.truth_(metabase.mbql.schema.distinct)?metabase.mbql.schema.distinct.cljs$lang$test:null)]))):null))),metabase.mbql.schema.distinct], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.stddev !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.stddev;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","stddev","metabase.mbql.schema/stddev",1735459125,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"standard-deviation-aggregations","standard-deviation-aggregations",-1683333464),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"stddev","stddev",775056588,null),"metabase/mbql/schema.cljc",76,new cljs.core.Keyword(null,"stddev","stddev",-865474939),1,773,773,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"stddev","stddev",-865474939),new cljs.core.Keyword(null,"field-or-expression","field-or-expression",-1409494368),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"FieldOrExpressionDef","FieldOrExpressionDef",-788269541,null))], null),cljs.core.List.EMPTY,"Schema for a valid stddev clause.",(cljs.core.truth_(metabase.mbql.schema.stddev)?metabase.mbql.schema.stddev.cljs$lang$test:null)]))):null))),metabase.mbql.schema.stddev], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.sum !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.sum;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","sum","metabase.mbql.schema/sum",-1589890100,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"basic-aggregations","basic-aggregations",-1628959228),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"sum","sum",1777518341,null),"metabase/mbql/schema.cljc",60,new cljs.core.Keyword(null,"sum","sum",136986814),1,760,760,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"sum","sum",136986814),new cljs.core.Keyword(null,"field-or-expression","field-or-expression",-1409494368),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"FieldOrExpressionDef","FieldOrExpressionDef",-788269541,null))], null),cljs.core.List.EMPTY,"Schema for a valid sum clause.",(cljs.core.truth_(metabase.mbql.schema.sum)?metabase.mbql.schema.sum.cljs$lang$test:null)]))):null))),metabase.mbql.schema.sum], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.min !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.min;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","min","metabase.mbql.schema/min",-1534510688,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"basic-aggregations","basic-aggregations",-1628959228),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"min","min",2085523049,null),"metabase/mbql/schema.cljc",60,new cljs.core.Keyword(null,"min","min",444991522),1,761,761,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"min","min",444991522),new cljs.core.Keyword(null,"field-or-expression","field-or-expression",-1409494368),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"FieldOrExpressionDef","FieldOrExpressionDef",-788269541,null))], null),cljs.core.List.EMPTY,"Schema for a valid min clause.",(cljs.core.truth_(metabase.mbql.schema.min)?metabase.mbql.schema.min.cljs$lang$test:null)]))):null))),metabase.mbql.schema.min], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.max !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.max;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","max","metabase.mbql.schema/max",-1397867614,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"basic-aggregations","basic-aggregations",-1628959228),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"max","max",1701898075,null),"metabase/mbql/schema.cljc",60,new cljs.core.Keyword(null,"max","max",61366548),1,762,762,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"max","max",61366548),new cljs.core.Keyword(null,"field-or-expression","field-or-expression",-1409494368),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"FieldOrExpressionDef","FieldOrExpressionDef",-788269541,null))], null),cljs.core.List.EMPTY,"Schema for a valid max clause.",(cljs.core.truth_(metabase.mbql.schema.max)?metabase.mbql.schema.max.cljs$lang$test:null)]))):null))),metabase.mbql.schema.max], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.metric !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.metric;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","metric","metabase.mbql.schema/metric",1030004285,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"sugar","sugar",-73788488),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"metric","metric",2049329604,null),"metabase/mbql/schema.cljc",26,new cljs.core.Keyword(null,"metric","metric",408798077),1,791,791,true,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"metric","metric",408798077),new cljs.core.Keyword(null,"metric-id","metric-id",-686486942),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol("s","cond-pre","s/cond-pre",-923707600,null),new cljs.core.Symbol("helpers","IntGreaterThanZero","helpers/IntGreaterThanZero",1743901629,null),new cljs.core.Symbol("helpers","NonBlankString","helpers/NonBlankString",-2060904596,null)))], null),cljs.core.List.EMPTY,"Schema for a valid metric clause.",(cljs.core.truth_(metabase.mbql.schema.metric)?metabase.mbql.schema.metric.cljs$lang$test:null)]))):null))),metabase.mbql.schema.metric], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.share !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.share;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","share","metabase.mbql.schema/share",1977664161,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"basic-aggregations","basic-aggregations",-1628959228),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"share","share",1051097594,null),"metabase/mbql/schema.cljc",62,new cljs.core.Keyword(null,"share","share",-589433933),1,770,770,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"share","share",-589433933),new cljs.core.Keyword(null,"pred","pred",1927423397),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"Filter","Filter",-424893332,null))], null),cljs.core.List.EMPTY,"Schema for a valid share clause.",(cljs.core.truth_(metabase.mbql.schema.share)?metabase.mbql.schema.share.cljs$lang$test:null)]))):null))),metabase.mbql.schema.share], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.count_where !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.count_where;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","count-where","metabase.mbql.schema/count-where",-1224231786,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"basic-aggregations","basic-aggregations",-1628959228),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"count-where","count-where",2025939247,null),"metabase/mbql/schema.cljc",68,new cljs.core.Keyword(null,"count-where","count-where",385407720),1,767,767,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"count-where","count-where",385407720),new cljs.core.Keyword(null,"pred","pred",1927423397),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"Filter","Filter",-424893332,null))], null),cljs.core.List.EMPTY,"Schema for a valid count-where clause.",(cljs.core.truth_(metabase.mbql.schema.count_where)?metabase.mbql.schema.count_where.cljs$lang$test:null)]))):null))),metabase.mbql.schema.count_where], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.sum_where !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.sum_where;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","sum-where","metabase.mbql.schema/sum-where",969078380,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"basic-aggregations","basic-aggregations",-1628959228),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"sum-where","sum-where",-519087341,null),"metabase/mbql/schema.cljc",66,new cljs.core.Keyword(null,"sum-where","sum-where",2135348428),1,764,764,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"sum-where","sum-where",2135348428),new cljs.core.Keyword(null,"field-or-expression","field-or-expression",-1409494368),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"FieldOrExpressionDef","FieldOrExpressionDef",-788269541,null)),new cljs.core.Keyword(null,"pred","pred",1927423397),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"Filter","Filter",-424893332,null))], null),cljs.core.List.EMPTY,"Schema for a valid sum-where clause.",(cljs.core.truth_(metabase.mbql.schema.sum_where)?metabase.mbql.schema.sum_where.cljs$lang$test:null)]))):null))),metabase.mbql.schema.sum_where], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.case$ !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.case$;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","case","metabase.mbql.schema/case",2100482976,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"basic-aggregations","basic-aggregations",-1628959228),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"case","case",-1510733573,null),"metabase/mbql/schema.cljc",61,new cljs.core.Keyword(null,"case","case",1143702196),1,727,727,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"case","case",1143702196),new cljs.core.Keyword(null,"clauses","clauses",1454841241),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"CaseClauses","CaseClauses",-1749071354,null)),new cljs.core.Keyword(null,"options","options",99638489),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,"optional","optional",-600484260,null),new cljs.core.Symbol(null,"CaseOptions","CaseOptions",1989286806,null)))], null),cljs.core.List.EMPTY,"Schema for a valid case clause.",(cljs.core.truth_(metabase.mbql.schema.case$)?metabase.mbql.schema.case$.cljs$lang$test:null)]))):null))),metabase.mbql.schema.case$], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.median !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.median;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","median","metabase.mbql.schema/median",2055093571,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"percentile-aggregations","percentile-aggregations",1241763983),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"median","median",-2084869638,null),"metabase/mbql/schema.cljc",68,new cljs.core.Keyword(null,"median","median",569566131),1,779,779,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"median","median",569566131),new cljs.core.Keyword(null,"field-or-expression","field-or-expression",-1409494368),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"FieldOrExpressionDef","FieldOrExpressionDef",-788269541,null))], null),cljs.core.List.EMPTY,"Schema for a valid median clause.",(cljs.core.truth_(metabase.mbql.schema.median)?metabase.mbql.schema.median.cljs$lang$test:null)]))):null))),metabase.mbql.schema.median], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.percentile !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.percentile;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","percentile","metabase.mbql.schema/percentile",-91330436,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"percentile-aggregations","percentile-aggregations",1241763983),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"percentile","percentile",1039342775,null),"metabase/mbql/schema.cljc",72,new cljs.core.Keyword(null,"percentile","percentile",-601188752),1,782,782,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"percentile","percentile",-601188752),new cljs.core.Keyword(null,"field-or-expression","field-or-expression",-1409494368),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"FieldOrExpressionDef","FieldOrExpressionDef",-788269541,null)),new cljs.core.Keyword(null,"percentile","percentile",-601188752),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"NumericExpressionArg","NumericExpressionArg",-1537445195,null))], null),cljs.core.List.EMPTY,"Schema for a valid percentile clause.",(cljs.core.truth_(metabase.mbql.schema.percentile)?metabase.mbql.schema.percentile.cljs$lang$test:null)]))):null))),metabase.mbql.schema.percentile], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.ag_COLON_var !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.ag_COLON_var;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","ag:var","metabase.mbql.schema/ag:var",1295047163,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"ag:var","ag:var",-1804440286,null),"metabase/mbql/schema.cljc",77,new cljs.core.Keyword(null,"var","var",-769682797),1,776,776,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"var","var",-769682797),new cljs.core.Keyword(null,"field-or-expression","field-or-expression",-1409494368),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"FieldOrExpressionDef","FieldOrExpressionDef",-788269541,null))], null),cljs.core.List.EMPTY,"Schema for a valid var clause.",(cljs.core.truth_(metabase.mbql.schema.ag_COLON_var)?metabase.mbql.schema.ag_COLON_var.cljs$lang$test:null)]))):null))),metabase.mbql.schema.ag_COLON_var], null)], 0)));
metabase.mbql.schema.UnnamedAggregation = schema.core.recursive(new cljs.core.Var(function(){return metabase.mbql.schema.UnnamedAggregation_STAR_;},new cljs.core.Symbol("metabase.mbql.schema","UnnamedAggregation*","metabase.mbql.schema/UnnamedAggregation*",652628682,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"private","private",-558947994),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[true,cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"UnnamedAggregation*","UnnamedAggregation*",1873018243,null),"metabase/mbql/schema.cljc",35,1,797,797,cljs.core.List.EMPTY,null,(cljs.core.truth_(metabase.mbql.schema.UnnamedAggregation_STAR_)?metabase.mbql.schema.UnnamedAggregation_STAR_.cljs$lang$test:null)])));
/**
 * Additional options for any aggregation clause when wrapping it in `:aggregation-options`.
 */
metabase.mbql.schema.AggregationOptions = cljs.core.PersistentArrayMap.createAsIfByAssoc([schema.core.optional_key(new cljs.core.Keyword(null,"name","name",1843675177)),metabase.mbql.schema.helpers.NonBlankString,schema.core.optional_key(new cljs.core.Keyword(null,"display-name","display-name",694513143)),metabase.mbql.schema.helpers.NonBlankString]);
/**
 * Schema for a valid aggregation-options clause.
 */
metabase.mbql.schema.aggregation_options = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"aggregation-options","aggregation-options",-1904917550),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["aggregation",metabase.mbql.schema.UnnamedAggregation,"options",metabase.mbql.schema.AggregationOptions], 0));
/**
 * Schema for anything that is a valid `:aggregation` clause.
 */
metabase.mbql.schema.Aggregation = schema.core.if$(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.schema.helpers.is_clause_QMARK_,new cljs.core.Keyword(null,"aggregation-options","aggregation-options",-1904917550)),metabase.mbql.schema.aggregation_options,metabase.mbql.schema.UnnamedAggregation);
/**
 * Schema for a valid asc clause.
 */
metabase.mbql.schema.asc = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"asc","asc",356854569),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field",metabase.mbql.schema.FieldOrAggregationReference], 0));
/**
 * Schema for a valid desc clause.
 */
metabase.mbql.schema.desc = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"desc","desc",2093485764),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field",metabase.mbql.schema.FieldOrAggregationReference], 0));
/**
 * Schema for an `order-by` clause subclause.
 */
metabase.mbql.schema.OrderBy = metabase.mbql.schema.helpers.one_of_STAR_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.asc !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.asc;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","asc","metabase.mbql.schema/asc",1338042063,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"asc","asc",1997386096,null),"metabase/mbql/schema.cljc",15,new cljs.core.Keyword(null,"asc","asc",356854569),1,832,832,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"asc","asc",356854569),new cljs.core.Keyword(null,"field","field",-1302436500),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"FieldOrAggregationReference","FieldOrAggregationReference",85477856,null))], null),cljs.core.List.EMPTY,"Schema for a valid asc clause.",(cljs.core.truth_(metabase.mbql.schema.asc)?metabase.mbql.schema.asc.cljs$lang$test:null)]))):null))),metabase.mbql.schema.asc], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.desc !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.mbql.schema.desc;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.mbql.schema","desc","metabase.mbql.schema/desc",-2050113424,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"desc","desc",-560950005,null),"metabase/mbql/schema.cljc",16,new cljs.core.Keyword(null,"desc","desc",2093485764),1,833,833,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"desc","desc",2093485764),new cljs.core.Keyword(null,"field","field",-1302436500),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"FieldOrAggregationReference","FieldOrAggregationReference",85477856,null))], null),cljs.core.List.EMPTY,"Schema for a valid desc clause.",(cljs.core.truth_(metabase.mbql.schema.desc)?metabase.mbql.schema.desc.cljs$lang$test:null)]))):null))),metabase.mbql.schema.desc], null)], 0));
metabase.mbql.schema.TemplateTag = schema.core.Any;
/**
 * Schema for a valid, normalized native [inner] query.
 */
metabase.mbql.schema.NativeQuery = cljs.core.PersistentArrayMap.createAsIfByAssoc([new cljs.core.Keyword(null,"query","query",-1288509510),schema.core.Any,schema.core.optional_key(new cljs.core.Keyword(null,"template-tags","template-tags",1853115685)),cljs.core.PersistentArrayMap.createAsIfByAssoc([metabase.mbql.schema.helpers.NonBlankString,metabase.mbql.schema.TemplateTag]),schema.core.optional_key(new cljs.core.Keyword(null,"collection","collection",-683361892)),schema.core.maybe(metabase.mbql.schema.helpers.NonBlankString),schema.core.Keyword,schema.core.Any]);

/**
 * Schema for a valid value for a `:source-query` clause.
 */
metabase.mbql.schema.SourceQuery = schema.core.if$(cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2(cljs.core.map_QMARK_,new cljs.core.Keyword(null,"native","native",-613060878)),clojure.set.rename_keys(metabase.mbql.schema.NativeQuery,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"query","query",-1288509510),new cljs.core.Keyword(null,"native","native",-613060878)], null)),schema.core.recursive(new cljs.core.Var(function(){return metabase.mbql.schema.MBQLQuery;},new cljs.core.Symbol("metabase.mbql.schema","MBQLQuery","metabase.mbql.schema/MBQLQuery",1964355302,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"declared","declared",92336021),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.mbql.schema","metabase.mbql.schema",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"MBQLQuery","MBQLQuery",-1395590243,null),"metabase/mbql/schema.cljc",25,1,865,true,865,cljs.core.List.EMPTY,null,(cljs.core.truth_(metabase.mbql.schema.MBQLQuery)?metabase.mbql.schema.MBQLQuery.cljs$lang$test:null)]))));
/**
 * Schema for the expected keys for a single column in `:source-metadata` (`:source-metadata` is a sequence of these
 *   entries), if it is passed in to the query.
 * 
 *   This metadata automatically gets added for all source queries that are referenced via the `card__id` `:source-table`
 *   form; for explicit `:source-query`s you should usually include this information yourself when specifying explicit
 *   `:source-query`s.
 */
metabase.mbql.schema.SourceQueryMetadata = cljs.core.PersistentArrayMap.createAsIfByAssoc([new cljs.core.Keyword(null,"name","name",1843675177),metabase.mbql.schema.helpers.NonBlankString,new cljs.core.Keyword(null,"base_type","base_type",1908272670),metabase.mbql.schema.helpers.FieldType,new cljs.core.Keyword(null,"display_name","display_name",-1494335013),metabase.mbql.schema.helpers.NonBlankString,schema.core.optional_key(new cljs.core.Keyword(null,"semantic_type","semantic_type",272485089)),schema.core.maybe(metabase.mbql.schema.helpers.FieldSemanticOrRelationType),schema.core.optional_key(new cljs.core.Keyword(null,"fingerprint","fingerprint",598613022)),schema.core.maybe(metabase.mbql.schema.helpers.Map),schema.core.Any,schema.core.Any]);
/**
 * Pattern that matches `card__id` strings that can be used as the `:source-table` of MBQL queries.
 */
metabase.mbql.schema.source_table_card_id_regex = /^card__[1-9]\d*$/;
/**
 * Schema for a valid value for the `:source-table` clause of an MBQL query.
 */
metabase.mbql.schema.SourceTable = schema.core.cond_pre.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([metabase.mbql.schema.helpers.IntGreaterThanZero,metabase.mbql.schema.source_table_card_id_regex], 0));
/**
 * Strategy that should be used to perform the equivalent of a SQL `JOIN` against another table or a nested query.
 *   These correspond 1:1 to features of the same name in driver features lists; e.g. you should check that the current
 *   driver supports `:full-join` before generating a Join clause using that strategy.
 */
metabase.mbql.schema.JoinStrategy = schema.core.enum$.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,"left-join","left-join",-672831855),new cljs.core.Keyword(null,"right-join","right-join",-56349359),new cljs.core.Keyword(null,"inner-join","inner-join",659431740),new cljs.core.Keyword(null,"full-join","full-join",1305476385)], 0));
/**
 * Perform the equivalent of a SQL `JOIN` with another Table or nested `:source-query`. JOINs are either explicitly
 *   specified in the incoming query, or implicitly generated when one uses a `:field` clause with `:source-field`.
 * 
 *   In the top-level query, you can reference Fields from the joined table or nested query by including `:source-field`
 *   in the `:field` options (known as implicit joins); for explicit joins, you *must* specify `:join-alias` yourself; in
 *   the `:field` options, e.g.
 * 
 *  ;; for joins against other Tables/MBQL source queries
 *  [:field 1 {:join-alias "my_join_alias"}]
 * 
 *  ;; for joins against native queries
 *  [:field "my_field" {:base-type :field/Integer, :join-alias "my_join_alias"}]
 */
metabase.mbql.schema.Join = schema.core.constrained.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentHashMap.fromArrays([schema.core.Keyword,schema.core.optional_key(new cljs.core.Keyword(null,"source-metadata","source-metadata",-477816085)),schema.core.optional_key(new cljs.core.Keyword(null,"source-table","source-table",-225307692)),schema.core.optional_key(new cljs.core.Keyword(null,"alias","alias",-2039751630)),schema.core.optional_key(new cljs.core.Keyword(null,"fields","fields",-1932066230)),new cljs.core.Keyword(null,"condition","condition",1668437652),schema.core.optional_key(new cljs.core.Keyword(null,"source-query","source-query",198004422)),schema.core.optional_key(new cljs.core.Keyword(null,"fk-field-id","fk-field-id",1124127357)),schema.core.optional_key(new cljs.core.Keyword(null,"strategy","strategy",-1471631918))],[schema.core.Any,schema.core.maybe(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [metabase.mbql.schema.SourceQueryMetadata], null)),metabase.mbql.schema.SourceTable,metabase.mbql.schema.helpers.NonBlankString,schema.core.named(schema.core.cond_pre.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([schema.core.enum$.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,"all","all",892129742),new cljs.core.Keyword(null,"none","none",1333468478)], 0)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [metabase.mbql.schema.field], null)], 0)),"Valid Join `:fields`: `:all`, `:none`, or a sequence of `:field` clauses that have `:join-alias`."),metabase.mbql.schema.Filter,metabase.mbql.schema.SourceQuery,schema.core.maybe(metabase.mbql.schema.helpers.IntGreaterThanZero),metabase.mbql.schema.JoinStrategy]),cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2(cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,"source-table","source-table",-225307692),new cljs.core.Keyword(null,"source-query","source-query",198004422)),cljs.core.complement(cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,"source-table","source-table",-225307692),new cljs.core.Keyword(null,"source-query","source-query",198004422)))),"Joins must have either a `source-table` or `source-query`, but not both.");
/**
 * Schema for a valid sequence of `Join`s. Must be a non-empty sequence, and `:alias`, if specified, must be unique.
 */
metabase.mbql.schema.Joins = schema.core.constrained.cljs$core$IFn$_invoke$arity$3(metabase.mbql.schema.helpers.non_empty(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [metabase.mbql.schema.Join], null)),(function (p1__42503_SHARP_){
return metabase.mbql.schema.helpers.empty_or_distinct_QMARK_(cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.some_QMARK_,cljs.core.map.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,"alias","alias",-2039751630),p1__42503_SHARP_)));
}),"All join aliases must be unique.");
/**
 * Schema for valid values of the MBQL `:fields` clause.
 */
metabase.mbql.schema.Fields = schema.core.named(metabase.mbql.schema.helpers.distinct(metabase.mbql.schema.helpers.non_empty(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [metabase.mbql.schema.Field], null))),"Distinct, non-empty sequence of Field clauses");
/**
 * Schema for a valid, normalized MBQL [inner] query.
 */
metabase.mbql.schema.MBQLQuery = schema.core.constrained.cljs$core$IFn$_invoke$arity$3(schema.core.constrained.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentHashMap.fromArrays([schema.core.Keyword,schema.core.optional_key(new cljs.core.Keyword(null,"order-by","order-by",1527318070)),schema.core.optional_key(new cljs.core.Keyword(null,"source-metadata","source-metadata",-477816085)),schema.core.optional_key(new cljs.core.Keyword(null,"joins","joins",1033962699)),schema.core.optional_key(new cljs.core.Keyword(null,"source-table","source-table",-225307692)),schema.core.optional_key(new cljs.core.Keyword(null,"filter","filter",-948537934)),schema.core.optional_key(new cljs.core.Keyword(null,"fields","fields",-1932066230)),schema.core.optional_key(new cljs.core.Keyword(null,"aggregation","aggregation",1597476696)),schema.core.optional_key(new cljs.core.Keyword(null,"breakout","breakout",-732419050)),schema.core.optional_key(new cljs.core.Keyword(null,"source-query","source-query",198004422)),schema.core.optional_key(new cljs.core.Keyword(null,"limit","limit",-1355822363)),schema.core.optional_key(new cljs.core.Keyword(null,"page","page",849072397)),schema.core.optional_key(new cljs.core.Keyword(null,"expressions","expressions",255689909))],[schema.core.Any,metabase.mbql.schema.helpers.distinct(metabase.mbql.schema.helpers.non_empty(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [metabase.mbql.schema.OrderBy], null))),schema.core.maybe(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [metabase.mbql.schema.SourceQueryMetadata], null)),metabase.mbql.schema.Joins,metabase.mbql.schema.SourceTable,metabase.mbql.schema.Filter,metabase.mbql.schema.Fields,metabase.mbql.schema.helpers.non_empty(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [metabase.mbql.schema.Aggregation], null)),metabase.mbql.schema.helpers.non_empty(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [metabase.mbql.schema.Field], null)),metabase.mbql.schema.SourceQuery,metabase.mbql.schema.helpers.IntGreaterThanOrEqualToZero,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"page","page",849072397),metabase.mbql.schema.helpers.IntGreaterThanZero,new cljs.core.Keyword(null,"items","items",1031954938),metabase.mbql.schema.helpers.IntGreaterThanZero], null),cljs.core.PersistentArrayMap.createAsIfByAssoc([schema.core.Keyword,metabase.mbql.schema.FieldOrExpressionDef])]),(function (query){
return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((1),cljs.core.count(cljs.core.select_keys(query,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"source-query","source-query",198004422),new cljs.core.Keyword(null,"source-table","source-table",-225307692)], null))));
}),"Query must specify either `:source-table` or `:source-query`, but not both."),(function (p__42504){
var map__42505 = p__42504;
var map__42505__$1 = (((((!((map__42505 == null))))?(((((map__42505.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__42505.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__42505):map__42505);
var breakout = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__42505__$1,new cljs.core.Keyword(null,"breakout","breakout",-732419050));
var fields = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__42505__$1,new cljs.core.Keyword(null,"fields","fields",-1932066230));
return cljs.core.empty_QMARK_(clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(cljs.core.set(breakout),cljs.core.set(fields)));
}),"Fields specified in `:breakout` should not be specified in `:fields`; this is implied.");
/**
 * Schema for a valid, normalized query parameter.
 */
metabase.mbql.schema.Parameter = schema.core.Any;
/**
 * Options that tweak the behavior of the query processor.
 */
metabase.mbql.schema.Settings = cljs.core.PersistentArrayMap.createAsIfByAssoc([schema.core.optional_key(new cljs.core.Keyword(null,"report-timezone","report-timezone",-2053796389)),metabase.mbql.schema.helpers.NonBlankString,schema.core.Keyword,schema.core.Any]);
/**
 * Additional constraints added to a query limiting the maximum number of rows that can be returned. Mostly useful
 *   because native queries don't support the MBQL `:limit` clause. For MBQL queries, if `:limit` is set, it will
 *   override these values.
 */
metabase.mbql.schema.Constraints = schema.core.constrained.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.createAsIfByAssoc([schema.core.optional_key(new cljs.core.Keyword(null,"max-results","max-results",-32858165)),metabase.mbql.schema.helpers.IntGreaterThanOrEqualToZero,schema.core.optional_key(new cljs.core.Keyword(null,"max-results-bare-rows","max-results-bare-rows",2096475889)),metabase.mbql.schema.helpers.IntGreaterThanOrEqualToZero,schema.core.Keyword,schema.core.Any]),(function (p__42507){
var map__42508 = p__42507;
var map__42508__$1 = (((((!((map__42508 == null))))?(((((map__42508.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__42508.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__42508):map__42508);
var max_results = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__42508__$1,new cljs.core.Keyword(null,"max-results","max-results",-32858165));
var max_results_bare_rows = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__42508__$1,new cljs.core.Keyword(null,"max-results-bare-rows","max-results-bare-rows",2096475889));
if(cljs.core.not((function (){var and__4115__auto__ = max_results;
if(cljs.core.truth_(and__4115__auto__)){
return max_results_bare_rows;
} else {
return and__4115__auto__;
}
})())){
return true;
} else {
return (max_results >= max_results_bare_rows);
}
}),"max-results-bare-rows must be less or equal to than max-results");
/**
 * Additional options that can be used to toggle middleware on or off.
 */
metabase.mbql.schema.MiddlewareOptions = cljs.core.PersistentArrayMap.createAsIfByAssoc([schema.core.optional_key(new cljs.core.Keyword(null,"skip-results-metadata?","skip-results-metadata?",251010463)),schema.core.Bool,schema.core.optional_key(new cljs.core.Keyword(null,"format-rows?","format-rows?",992129486)),schema.core.Bool,schema.core.optional_key(new cljs.core.Keyword(null,"disable-mbql->native?","disable-mbql->native?",1103196677)),schema.core.Bool,schema.core.optional_key(new cljs.core.Keyword(null,"userland-query?","userland-query?",-123699383)),schema.core.maybe(schema.core.Bool),schema.core.optional_key(new cljs.core.Keyword(null,"add-default-userland-constraints?","add-default-userland-constraints?",2039156190)),schema.core.maybe(schema.core.Bool),schema.core.Keyword,schema.core.Any]);
/**
 * Schema for `info.context`; used for informational purposes to record how a query was executed.
 */
metabase.mbql.schema.Context = schema.core.enum$.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,"ad-hoc","ad-hoc",-2033634036),new cljs.core.Keyword(null,"csv-download","csv-download",2141432084),new cljs.core.Keyword(null,"dashboard","dashboard",-631747508),new cljs.core.Keyword(null,"embedded-dashboard","embedded-dashboard",-485078014),new cljs.core.Keyword(null,"embedded-question","embedded-question",-2146473954),new cljs.core.Keyword(null,"json-download","json-download",-971130133),new cljs.core.Keyword(null,"map-tiles","map-tiles",1961865797),new cljs.core.Keyword(null,"metabot","metabot",-2067298258),new cljs.core.Keyword(null,"public-dashboard","public-dashboard",645968405),new cljs.core.Keyword(null,"public-question","public-question",629369976),new cljs.core.Keyword(null,"pulse","pulse",-244494476),new cljs.core.Keyword(null,"question","question",-1411720117),new cljs.core.Keyword(null,"xlsx-download","xlsx-download",-1622892009)], 0));
/**
 * Schema for query `:info` dictionary, which is used for informational purposes to record information about how a query
 *   was executed in QueryExecution and other places. It is considered bad form for middleware to change its behavior
 *   based on this information, don't do it!
 */
metabase.mbql.schema.Info = cljs.core.PersistentArrayMap.createAsIfByAssoc([schema.core.optional_key(new cljs.core.Keyword(null,"context","context",-830191113)),schema.core.maybe(metabase.mbql.schema.Context),schema.core.optional_key(new cljs.core.Keyword(null,"executed-by","executed-by",-739811161)),schema.core.maybe(metabase.mbql.schema.helpers.IntGreaterThanZero),schema.core.optional_key(new cljs.core.Keyword(null,"card-id","card-id",-1770060179)),schema.core.maybe(metabase.mbql.schema.helpers.IntGreaterThanZero),schema.core.optional_key(new cljs.core.Keyword(null,"dashboard-id","dashboard-id",1965414288)),schema.core.maybe(metabase.mbql.schema.helpers.IntGreaterThanZero),schema.core.optional_key(new cljs.core.Keyword(null,"pulse-id","pulse-id",1331432237)),schema.core.maybe(metabase.mbql.schema.helpers.IntGreaterThanZero),schema.core.optional_key(new cljs.core.Keyword(null,"nested?","nested?",1182745618)),schema.core.maybe(schema.core.Bool),schema.core.optional_key(new cljs.core.Keyword(null,"query-hash","query-hash",-1524484965)),schema.core.maybe(schema.core.Any)]);
/**
 * The ID used to signify that a database is 'virtual' rather than physical.
 * 
 * A fake integer ID is used so as to minimize the number of changes that need to be made on the frontend -- by using
 * something that would otherwise be a legal ID, *nothing* need change there, and the frontend can query against this
 * 'database' none the wiser. (This integer ID is negative which means it will never conflict with a *real* database
 * ID.)
 * 
 * This ID acts as a sort of flag. The relevant places in the middleware can check whether the DB we're querying is
 * this 'virtual' database and take the appropriate actions.
 */
metabase.mbql.schema.saved_questions_virtual_database_id = (-1337);
/**
 * Schema for a valid `:database` ID, in the top-level 'outer' query. Either a positive integer (referring to an
 *   actual Database), or the saved questions virtual ID, which is a placeholder used for queries using the
 *   `:source-table "card__id"` shorthand for a source query resolved by middleware (since clients might not know the
 *   actual DB for that source query.)
 */
metabase.mbql.schema.DatabaseID = schema.core.cond_pre.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([schema.core.eq(metabase.mbql.schema.saved_questions_virtual_database_id),metabase.mbql.schema.helpers.IntGreaterThanZero], 0));
/**
 * Schema for an [outer] query, e.g. the sort of thing you'd pass to the query processor or save in
 *   `Card.dataset_query`.
 */
metabase.mbql.schema.Query = schema.core.constrained.cljs$core$IFn$_invoke$arity$3(schema.core.constrained.cljs$core$IFn$_invoke$arity$3(schema.core.constrained.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentHashMap.fromArrays([schema.core.Keyword,schema.core.optional_key(new cljs.core.Keyword(null,"native","native",-613060878)),schema.core.optional_key(new cljs.core.Keyword(null,"settings","settings",1556144875)),schema.core.optional_key(new cljs.core.Keyword(null,"info","info",-317069002)),schema.core.optional_key(new cljs.core.Keyword(null,"constraints","constraints",422775616)),schema.core.optional_key(new cljs.core.Keyword(null,"middleware","middleware",1462115504)),new cljs.core.Keyword(null,"type","type",1174270348),schema.core.optional_key(new cljs.core.Keyword(null,"query","query",-1288509510)),new cljs.core.Keyword(null,"database","database",1849087575),schema.core.optional_key(new cljs.core.Keyword(null,"parameters","parameters",-1229919748))],[schema.core.Any,metabase.mbql.schema.NativeQuery,schema.core.maybe(metabase.mbql.schema.Settings),schema.core.maybe(metabase.mbql.schema.Info),schema.core.maybe(metabase.mbql.schema.Constraints),schema.core.maybe(metabase.mbql.schema.MiddlewareOptions),schema.core.enum$.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,"query","query",-1288509510),new cljs.core.Keyword(null,"native","native",-613060878)], 0)),metabase.mbql.schema.MBQLQuery,metabase.mbql.schema.DatabaseID,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [metabase.mbql.schema.Parameter], null)]),cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2(cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,"native","native",-613060878),new cljs.core.Keyword(null,"query","query",-1288509510)),cljs.core.complement(cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,"native","native",-613060878),new cljs.core.Keyword(null,"query","query",-1288509510)))),"Query must specify either `:native` or `:query`, but not both."),(function (p__42514){
var map__42515 = p__42514;
var map__42515__$1 = (((((!((map__42515 == null))))?(((((map__42515.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__42515.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__42515):map__42515);
var native$ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__42515__$1,new cljs.core.Keyword(null,"native","native",-613060878));
var mbql = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__42515__$1,new cljs.core.Keyword(null,"query","query",-1288509510));
var query_type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__42515__$1,new cljs.core.Keyword(null,"type","type",1174270348));
var G__42517 = query_type;
var G__42517__$1 = (((G__42517 instanceof cljs.core.Keyword))?G__42517.fqn:null);
switch (G__42517__$1) {
case "native":
return native$;

break;
case "query":
return mbql;

break;
default:
throw (new Error(["No matching clause: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__42517__$1)].join('')));

}
}),"Native queries must specify `:native`; MBQL queries must specify `:query`."),cljs.core.complement(new cljs.core.Keyword(null,"source-metadata","source-metadata",-477816085)),"`:source-metadata` should be added in the same level as `:source-query` (i.e., the 'inner' MBQL query.)");
/**
 * Compiled schema validator for an [outer] Metabase query. (Pre-compling a validator is more efficient; use this
 *   instead of calling `(s/validate Query query)` or similar.
 */
metabase.mbql.schema.validate_query = schema.core.validator(metabase.mbql.schema.Query);
Object.defineProperty(module.exports, "not_null", { enumerable: false, get: function() { return metabase.mbql.schema.not_null; } });
Object.defineProperty(module.exports, "ArithmeticExpression_STAR_", { enumerable: false, get: function() { return metabase.mbql.schema.ArithmeticExpression_STAR_; } });
Object.defineProperty(module.exports, "interval", { enumerable: false, get: function() { return metabase.mbql.schema.interval; } });
Object.defineProperty(module.exports, "FieldOrAggregationReference", { enumerable: false, get: function() { return metabase.mbql.schema.FieldOrAggregationReference; } });
Object.defineProperty(module.exports, "TemporalLiteralString", { enumerable: false, get: function() { return metabase.mbql.schema.TemporalLiteralString; } });
Object.defineProperty(module.exports, "regex_match_first", { enumerable: false, get: function() { return metabase.mbql.schema.regex_match_first; } });
Object.defineProperty(module.exports, "ag_COLON_var", { enumerable: false, get: function() { return metabase.mbql.schema.ag_COLON_var; } });
Object.defineProperty(module.exports, "does_not_contain", { enumerable: false, get: function() { return metabase.mbql.schema.does_not_contain; } });
Object.defineProperty(module.exports, "_EQ_", { enumerable: false, get: function() { return metabase.mbql.schema._EQ_; } });
Object.defineProperty(module.exports, "UnnamedAggregation_STAR_", { enumerable: false, get: function() { return metabase.mbql.schema.UnnamedAggregation_STAR_; } });
Object.defineProperty(module.exports, "log", { enumerable: false, get: function() { return metabase.mbql.schema.log; } });
Object.defineProperty(module.exports, "RelativeDatetimeUnit", { enumerable: false, get: function() { return metabase.mbql.schema.RelativeDatetimeUnit; } });
Object.defineProperty(module.exports, "Joins", { enumerable: false, get: function() { return metabase.mbql.schema.Joins; } });
Object.defineProperty(module.exports, "_LT_", { enumerable: false, get: function() { return metabase.mbql.schema._LT_; } });
Object.defineProperty(module.exports, "floor", { enumerable: false, get: function() { return metabase.mbql.schema.floor; } });
Object.defineProperty(module.exports, "metric", { enumerable: false, get: function() { return metabase.mbql.schema.metric; } });
Object.defineProperty(module.exports, "Fields", { enumerable: false, get: function() { return metabase.mbql.schema.Fields; } });
Object.defineProperty(module.exports, "ends_with", { enumerable: false, get: function() { return metabase.mbql.schema.ends_with; } });
Object.defineProperty(module.exports, "saved_questions_virtual_database_id", { enumerable: false, get: function() { return metabase.mbql.schema.saved_questions_virtual_database_id; } });
Object.defineProperty(module.exports, "FieldOptions", { enumerable: false, get: function() { return metabase.mbql.schema.FieldOptions; } });
Object.defineProperty(module.exports, "relative_datetime", { enumerable: false, get: function() { return metabase.mbql.schema.relative_datetime; } });
Object.defineProperty(module.exports, "sum", { enumerable: false, get: function() { return metabase.mbql.schema.sum; } });
Object.defineProperty(module.exports, "aggregations", { enumerable: false, get: function() { return metabase.mbql.schema.aggregations; } });
Object.defineProperty(module.exports, "time_interval", { enumerable: false, get: function() { return metabase.mbql.schema.time_interval; } });
Object.defineProperty(module.exports, "rtrim", { enumerable: false, get: function() { return metabase.mbql.schema.rtrim; } });
Object.defineProperty(module.exports, "CaseClauses", { enumerable: false, get: function() { return metabase.mbql.schema.CaseClauses; } });
Object.defineProperty(module.exports, "Field_STAR_", { enumerable: false, get: function() { return metabase.mbql.schema.Field_STAR_; } });
Object.defineProperty(module.exports, "LiteralDateString", { enumerable: false, get: function() { return metabase.mbql.schema.LiteralDateString; } });
Object.defineProperty(module.exports, "StringExpression_STAR_", { enumerable: false, get: function() { return metabase.mbql.schema.StringExpression_STAR_; } });
Object.defineProperty(module.exports, "DatabaseID", { enumerable: false, get: function() { return metabase.mbql.schema.DatabaseID; } });
Object.defineProperty(module.exports, "NumericExpressionArgOrInterval", { enumerable: false, get: function() { return metabase.mbql.schema.NumericExpressionArgOrInterval; } });
Object.defineProperty(module.exports, "ceil", { enumerable: false, get: function() { return metabase.mbql.schema.ceil; } });
Object.defineProperty(module.exports, "SourceQueryMetadata", { enumerable: false, get: function() { return metabase.mbql.schema.SourceQueryMetadata; } });
Object.defineProperty(module.exports, "starts_with", { enumerable: false, get: function() { return metabase.mbql.schema.starts_with; } });
Object.defineProperty(module.exports, "DateUnit", { enumerable: false, get: function() { return metabase.mbql.schema.DateUnit; } });
Object.defineProperty(module.exports, "TemplateTag", { enumerable: false, get: function() { return metabase.mbql.schema.TemplateTag; } });
Object.defineProperty(module.exports, "_LT__EQ_", { enumerable: false, get: function() { return metabase.mbql.schema._LT__EQ_; } });
Object.defineProperty(module.exports, "upper", { enumerable: false, get: function() { return metabase.mbql.schema.upper; } });
Object.defineProperty(module.exports, "can_parse_date_QMARK_", { enumerable: false, get: function() { return metabase.mbql.schema.can_parse_date_QMARK_; } });
Object.defineProperty(module.exports, "_STAR_", { enumerable: false, get: function() { return metabase.mbql.schema._STAR_; } });
Object.defineProperty(module.exports, "min", { enumerable: false, get: function() { return metabase.mbql.schema.min; } });
Object.defineProperty(module.exports, "inside", { enumerable: false, get: function() { return metabase.mbql.schema.inside; } });
Object.defineProperty(module.exports, "ValueTypeInfo", { enumerable: false, get: function() { return metabase.mbql.schema.ValueTypeInfo; } });
Object.defineProperty(module.exports, "LiteralTimeString", { enumerable: false, get: function() { return metabase.mbql.schema.LiteralTimeString; } });
Object.defineProperty(module.exports, "ltrim", { enumerable: false, get: function() { return metabase.mbql.schema.ltrim; } });
Object.defineProperty(module.exports, "desc", { enumerable: false, get: function() { return metabase.mbql.schema.desc; } });
Object.defineProperty(module.exports, "contains", { enumerable: false, get: function() { return metabase.mbql.schema.contains; } });
Object.defineProperty(module.exports, "validate_bin_width", { enumerable: false, get: function() { return metabase.mbql.schema.validate_bin_width; } });
Object.defineProperty(module.exports, "StringFilterOptions", { enumerable: false, get: function() { return metabase.mbql.schema.StringFilterOptions; } });
Object.defineProperty(module.exports, "expression", { enumerable: false, get: function() { return metabase.mbql.schema.expression; } });
Object.defineProperty(module.exports, "is_empty", { enumerable: false, get: function() { return metabase.mbql.schema.is_empty; } });
Object.defineProperty(module.exports, "substring", { enumerable: false, get: function() { return metabase.mbql.schema.substring; } });
Object.defineProperty(module.exports, "Filter", { enumerable: false, get: function() { return metabase.mbql.schema.Filter; } });
Object.defineProperty(module.exports, "stddev", { enumerable: false, get: function() { return metabase.mbql.schema.stddev; } });
Object.defineProperty(module.exports, "can_parse_time_QMARK_", { enumerable: false, get: function() { return metabase.mbql.schema.can_parse_time_QMARK_; } });
Object.defineProperty(module.exports, "AggregationOptions", { enumerable: false, get: function() { return metabase.mbql.schema.AggregationOptions; } });
Object.defineProperty(module.exports, "_GT_", { enumerable: false, get: function() { return metabase.mbql.schema._GT_; } });
Object.defineProperty(module.exports, "replace", { enumerable: false, get: function() { return metabase.mbql.schema.replace; } });
Object.defineProperty(module.exports, "SourceQuery", { enumerable: false, get: function() { return metabase.mbql.schema.SourceQuery; } });
Object.defineProperty(module.exports, "sqrt", { enumerable: false, get: function() { return metabase.mbql.schema.sqrt; } });
Object.defineProperty(module.exports, "no_binning_options_at_top_level", { enumerable: false, get: function() { return metabase.mbql.schema.no_binning_options_at_top_level; } });
Object.defineProperty(module.exports, "concat", { enumerable: false, get: function() { return metabase.mbql.schema.concat; } });
Object.defineProperty(module.exports, "count_where", { enumerable: false, get: function() { return metabase.mbql.schema.count_where; } });
Object.defineProperty(module.exports, "StringExpression", { enumerable: false, get: function() { return metabase.mbql.schema.StringExpression; } });
Object.defineProperty(module.exports, "datetime_bucketing_units", { enumerable: false, get: function() { return metabase.mbql.schema.datetime_bucketing_units; } });
Object.defineProperty(module.exports, "Field", { enumerable: false, get: function() { return metabase.mbql.schema.Field; } });
Object.defineProperty(module.exports, "DateTimeValue", { enumerable: false, get: function() { return metabase.mbql.schema.DateTimeValue; } });
Object.defineProperty(module.exports, "validate_temporal_unit", { enumerable: false, get: function() { return metabase.mbql.schema.validate_temporal_unit; } });
Object.defineProperty(module.exports, "_", { enumerable: false, get: function() { return metabase.mbql.schema._; } });
Object.defineProperty(module.exports, "asc", { enumerable: false, get: function() { return metabase.mbql.schema.asc; } });
Object.defineProperty(module.exports, "cum_count", { enumerable: false, get: function() { return metabase.mbql.schema.cum_count; } });
Object.defineProperty(module.exports, "value", { enumerable: false, get: function() { return metabase.mbql.schema.value; } });
Object.defineProperty(module.exports, "or", { enumerable: false, get: function() { return metabase.mbql.schema.or; } });
Object.defineProperty(module.exports, "date_bucketing_units", { enumerable: false, get: function() { return metabase.mbql.schema.date_bucketing_units; } });
Object.defineProperty(module.exports, "OrderBy", { enumerable: false, get: function() { return metabase.mbql.schema.OrderBy; } });
Object.defineProperty(module.exports, "exp", { enumerable: false, get: function() { return metabase.mbql.schema.exp; } });
Object.defineProperty(module.exports, "field_COLON_name", { enumerable: false, get: function() { return metabase.mbql.schema.field_COLON_name; } });
Object.defineProperty(module.exports, "DatetimeFieldUnit", { enumerable: false, get: function() { return metabase.mbql.schema.DatetimeFieldUnit; } });
Object.defineProperty(module.exports, "UnnamedAggregation", { enumerable: false, get: function() { return metabase.mbql.schema.UnnamedAggregation; } });
Object.defineProperty(module.exports, "time", { enumerable: false, get: function() { return metabase.mbql.schema.time; } });
Object.defineProperty(module.exports, "can_parse_iso_8601_QMARK_", { enumerable: false, get: function() { return metabase.mbql.schema.can_parse_iso_8601_QMARK_; } });
Object.defineProperty(module.exports, "JoinStrategy", { enumerable: false, get: function() { return metabase.mbql.schema.JoinStrategy; } });
Object.defineProperty(module.exports, "FieldOrRelativeDatetime", { enumerable: false, get: function() { return metabase.mbql.schema.FieldOrRelativeDatetime; } });
Object.defineProperty(module.exports, "string_expressions", { enumerable: false, get: function() { return metabase.mbql.schema.string_expressions; } });
Object.defineProperty(module.exports, "time_bucketing_units", { enumerable: false, get: function() { return metabase.mbql.schema.time_bucketing_units; } });
Object.defineProperty(module.exports, "OrderComparable", { enumerable: false, get: function() { return metabase.mbql.schema.OrderComparable; } });
Object.defineProperty(module.exports, "between", { enumerable: false, get: function() { return metabase.mbql.schema.between; } });
Object.defineProperty(module.exports, "sum_where", { enumerable: false, get: function() { return metabase.mbql.schema.sum_where; } });
Object.defineProperty(module.exports, "not", { enumerable: false, get: function() { return metabase.mbql.schema.not; } });
Object.defineProperty(module.exports, "field", { enumerable: false, get: function() { return metabase.mbql.schema.field; } });
Object.defineProperty(module.exports, "validate_num_bins", { enumerable: false, get: function() { return metabase.mbql.schema.validate_num_bins; } });
Object.defineProperty(module.exports, "arithmetic_expressions", { enumerable: false, get: function() { return metabase.mbql.schema.arithmetic_expressions; } });
Object.defineProperty(module.exports, "cum_sum", { enumerable: false, get: function() { return metabase.mbql.schema.cum_sum; } });
Object.defineProperty(module.exports, "validate_query", { enumerable: false, get: function() { return metabase.mbql.schema.validate_query; } });
Object.defineProperty(module.exports, "coalesce", { enumerable: false, get: function() { return metabase.mbql.schema.coalesce; } });
Object.defineProperty(module.exports, "is_null", { enumerable: false, get: function() { return metabase.mbql.schema.is_null; } });
Object.defineProperty(module.exports, "NumericExpressionArg", { enumerable: false, get: function() { return metabase.mbql.schema.NumericExpressionArg; } });
Object.defineProperty(module.exports, "_SLASH_", { enumerable: false, get: function() { return metabase.mbql.schema._SLASH_; } });
Object.defineProperty(module.exports, "_GT__EQ_", { enumerable: false, get: function() { return metabase.mbql.schema._GT__EQ_; } });
Object.defineProperty(module.exports, "ArithmeticExpression", { enumerable: false, get: function() { return metabase.mbql.schema.ArithmeticExpression; } });
Object.defineProperty(module.exports, "absolute_datetime", { enumerable: false, get: function() { return metabase.mbql.schema.absolute_datetime; } });
Object.defineProperty(module.exports, "not_empty", { enumerable: false, get: function() { return metabase.mbql.schema.not_empty; } });
Object.defineProperty(module.exports, "distinct", { enumerable: false, get: function() { return metabase.mbql.schema.distinct; } });
Object.defineProperty(module.exports, "EqualityComparable", { enumerable: false, get: function() { return metabase.mbql.schema.EqualityComparable; } });
Object.defineProperty(module.exports, "Context", { enumerable: false, get: function() { return metabase.mbql.schema.Context; } });
Object.defineProperty(module.exports, "CaseOptions", { enumerable: false, get: function() { return metabase.mbql.schema.CaseOptions; } });
Object.defineProperty(module.exports, "StringExpressionArg", { enumerable: false, get: function() { return metabase.mbql.schema.StringExpressionArg; } });
Object.defineProperty(module.exports, "percentile", { enumerable: false, get: function() { return metabase.mbql.schema.percentile; } });
Object.defineProperty(module.exports, "round", { enumerable: false, get: function() { return metabase.mbql.schema.round; } });
Object.defineProperty(module.exports, "power", { enumerable: false, get: function() { return metabase.mbql.schema.power; } });
Object.defineProperty(module.exports, "ExpressionArg", { enumerable: false, get: function() { return metabase.mbql.schema.ExpressionArg; } });
Object.defineProperty(module.exports, "DatetimeLiteral", { enumerable: false, get: function() { return metabase.mbql.schema.DatetimeLiteral; } });
Object.defineProperty(module.exports, "Constraints", { enumerable: false, get: function() { return metabase.mbql.schema.Constraints; } });
Object.defineProperty(module.exports, "BinningStrategyName", { enumerable: false, get: function() { return metabase.mbql.schema.BinningStrategyName; } });
Object.defineProperty(module.exports, "field_COLON_id", { enumerable: false, get: function() { return metabase.mbql.schema.field_COLON_id; } });
Object.defineProperty(module.exports, "aggregation_options", { enumerable: false, get: function() { return metabase.mbql.schema.aggregation_options; } });
Object.defineProperty(module.exports, "SourceTable", { enumerable: false, get: function() { return metabase.mbql.schema.SourceTable; } });
Object.defineProperty(module.exports, "can_parse_datetime_QMARK_", { enumerable: false, get: function() { return metabase.mbql.schema.can_parse_datetime_QMARK_; } });
Object.defineProperty(module.exports, "_PLUS_", { enumerable: false, get: function() { return metabase.mbql.schema._PLUS_; } });
Object.defineProperty(module.exports, "abs", { enumerable: false, get: function() { return metabase.mbql.schema.abs; } });
Object.defineProperty(module.exports, "median", { enumerable: false, get: function() { return metabase.mbql.schema.median; } });
Object.defineProperty(module.exports, "share", { enumerable: false, get: function() { return metabase.mbql.schema.share; } });
Object.defineProperty(module.exports, "TimeIntervalOptions", { enumerable: false, get: function() { return metabase.mbql.schema.TimeIntervalOptions; } });
Object.defineProperty(module.exports, "CaseClause", { enumerable: false, get: function() { return metabase.mbql.schema.CaseClause; } });
Object.defineProperty(module.exports, "Info", { enumerable: false, get: function() { return metabase.mbql.schema.Info; } });
Object.defineProperty(module.exports, "case$", { enumerable: false, get: function() { return metabase.mbql.schema.case$; } });
Object.defineProperty(module.exports, "Join", { enumerable: false, get: function() { return metabase.mbql.schema.Join; } });
Object.defineProperty(module.exports, "Settings", { enumerable: false, get: function() { return metabase.mbql.schema.Settings; } });
Object.defineProperty(module.exports, "FieldOrExpressionDef", { enumerable: false, get: function() { return metabase.mbql.schema.FieldOrExpressionDef; } });
Object.defineProperty(module.exports, "segment", { enumerable: false, get: function() { return metabase.mbql.schema.segment; } });
Object.defineProperty(module.exports, "max", { enumerable: false, get: function() { return metabase.mbql.schema.max; } });
Object.defineProperty(module.exports, "_BANG__EQ_", { enumerable: false, get: function() { return metabase.mbql.schema._BANG__EQ_; } });
Object.defineProperty(module.exports, "DateTimeUnit", { enumerable: false, get: function() { return metabase.mbql.schema.DateTimeUnit; } });
Object.defineProperty(module.exports, "count", { enumerable: false, get: function() { return metabase.mbql.schema.count; } });
Object.defineProperty(module.exports, "lower", { enumerable: false, get: function() { return metabase.mbql.schema.lower; } });
Object.defineProperty(module.exports, "length", { enumerable: false, get: function() { return metabase.mbql.schema.length; } });
Object.defineProperty(module.exports, "require_base_type_for_field_name", { enumerable: false, get: function() { return metabase.mbql.schema.require_base_type_for_field_name; } });
Object.defineProperty(module.exports, "TimeUnit", { enumerable: false, get: function() { return metabase.mbql.schema.TimeUnit; } });
Object.defineProperty(module.exports, "MBQLQuery", { enumerable: false, get: function() { return metabase.mbql.schema.MBQLQuery; } });
Object.defineProperty(module.exports, "NativeQuery", { enumerable: false, get: function() { return metabase.mbql.schema.NativeQuery; } });
Object.defineProperty(module.exports, "Parameter", { enumerable: false, get: function() { return metabase.mbql.schema.Parameter; } });
Object.defineProperty(module.exports, "Aggregation", { enumerable: false, get: function() { return metabase.mbql.schema.Aggregation; } });
Object.defineProperty(module.exports, "trim", { enumerable: false, get: function() { return metabase.mbql.schema.trim; } });
Object.defineProperty(module.exports, "Query", { enumerable: false, get: function() { return metabase.mbql.schema.Query; } });
Object.defineProperty(module.exports, "source_table_card_id_regex", { enumerable: false, get: function() { return metabase.mbql.schema.source_table_card_id_regex; } });
Object.defineProperty(module.exports, "and", { enumerable: false, get: function() { return metabase.mbql.schema.and; } });
Object.defineProperty(module.exports, "LiteralDatetimeString", { enumerable: false, get: function() { return metabase.mbql.schema.LiteralDatetimeString; } });
Object.defineProperty(module.exports, "FieldBinningOptions", { enumerable: false, get: function() { return metabase.mbql.schema.FieldBinningOptions; } });
Object.defineProperty(module.exports, "avg", { enumerable: false, get: function() { return metabase.mbql.schema.avg; } });
Object.defineProperty(module.exports, "aggregation", { enumerable: false, get: function() { return metabase.mbql.schema.aggregation; } });
Object.defineProperty(module.exports, "MiddlewareOptions", { enumerable: false, get: function() { return metabase.mbql.schema.MiddlewareOptions; } });
Object.defineProperty(module.exports, "Filter_STAR_", { enumerable: false, get: function() { return metabase.mbql.schema.Filter_STAR_; } });
//# sourceMappingURL=metabase.mbql.schema.js.map
