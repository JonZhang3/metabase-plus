{"version":3,"sources":["metabase/mbql/schema.cljc"],"mappings":"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","names":["metabase.mbql.schema/date-bucketing-units","metabase.mbql.schema/time-bucketing-units","metabase.mbql.schema/datetime-bucketing-units","clojure.set.union","metabase.mbql.schema/DateUnit","schema.core/named","cljs.core.apply","schema.core/enum","metabase.mbql.schema/TimeUnit","metabase.mbql.schema/DateTimeUnit","metabase.mbql.schema/DatetimeFieldUnit","metabase.mbql.schema/RelativeDatetimeUnit","metabase.mbql.schema/can-parse-iso-8601?","s","cljs.core.not_EQ_","js/Date","metabase.mbql.schema/can-parse-date?","metabase.mbql.schema/can-parse-datetime?","metabase.mbql.schema/can-parse-time?","metabase.mbql.schema/LiteralDateString","schema.core.constrained","metabase.mbql.schema.helpers/NonBlankString","metabase.mbql.schema/LiteralDatetimeString","metabase.mbql.schema/LiteralTimeString","metabase.mbql.schema/TemporalLiteralString","schema.core.conditional","metabase.mbql.schema.helpers.clause","metabase.mbql.schema/relative-datetime","schema.core.cond_pre","schema.core/eq","schema.core/Int","metabase.mbql.schema/interval","metabase.mbql.schema/absolute-datetime","p1__42442#","p1__42443#","cljs.core/not","metabase.mbql.schema.helpers/is-clause?","cljs.core/second","metabase.mbql.schema/time","metabase.mbql.schema/DatetimeLiteral","cljs.core.partial","metabase.mbql.schema/DateTimeValue","metabase.mbql.schema.helpers.one_of_STAR_","cljs.core/meta","js/metabase","js/metabase.mbql","js/metabase.mbql.schema","js/metabase.mbql.schema.absolute-datetime","cljs.core/Var","js/metabase.mbql.schema.relative-datetime","js/metabase.mbql.schema.time","metabase.mbql.schema/ValueTypeInfo","schema.core/optional-key","schema.core/maybe","metabase.mbql.schema.helpers/FieldType","metabase.mbql.schema.helpers/FieldSemanticOrRelationType","schema.core/Keyword","schema.core/Any","metabase.mbql.schema/value","metabase.mbql.schema/expression","metabase.mbql.schema/BinningStrategyName","schema.core.enum$","metabase.mbql.schema/validate-bin-width","schema","p__42446","map__42447","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get","strategy","bin-width","cljs.core._EQ_","metabase.mbql.schema/validate-num-bins","p__42449","map__42450","num-bins","metabase.mbql.schema/FieldBinningOptions","metabase.mbql.schema.helpers/IntGreaterThanZero","schema.core/Num","cljs.core/complement","cljs.core/neg?","metabase.mbql.schema/validate-temporal-unit","p__42457","map__42458","base-type","temporal-unit","temp__5733__auto__","units","pred__42461","p1__42456#","p2__42455#","expr__42462","cljs.core.isa_QMARK_","cljs.core/contains?","metabase.mbql.schema/no-binning-options-at-top-level","metabase.mbql.schema/FieldOptions","metabase.mbql.schema/require-base-type-for-field-name","p__42464","vec__42465","cljs.core.nth","map__42468","_","id-or-name","metabase.mbql.schema/field","schema.core/recursive","metabase.mbql.schema/field:id","p__42470","vec__42471","cljs.core/integer?","metabase.mbql.schema/field:name","p__42474","vec__42475","metabase.mbql.schema/Field*","js/metabase.mbql.schema.expression","js/metabase.mbql.schema.field","metabase.mbql.schema/Field","metabase.mbql.schema/aggregation","metabase.mbql.schema/FieldOrAggregationReference","schema.core/if","metabase.mbql.schema/string-expressions","metabase.mbql.schema/StringExpressionArg","cljs.core/string?","schema.core/Str","metabase.mbql.schema/StringExpression","metabase.mbql.schema/arithmetic-expressions","metabase.mbql.schema/aggregations","metabase.mbql.schema/NumericExpressionArg","cljs.core/number?","metabase.mbql.schema/ArithmeticExpression","metabase.mbql.schema/Aggregation","metabase.mbql.schema/ExpressionArg","metabase.mbql.schema/NumericExpressionArgOrInterval","metabase.mbql.schema/coalesce","metabase.mbql.schema/substring","metabase.mbql.schema/length","metabase.mbql.schema/trim","metabase.mbql.schema/rtrim","metabase.mbql.schema/ltrim","metabase.mbql.schema/upper","metabase.mbql.schema/lower","metabase.mbql.schema/replace","metabase.mbql.schema/concat","metabase.mbql.schema/regex-match-first","metabase.mbql.schema/StringExpression*","js/metabase.mbql.schema.substring","js/metabase.mbql.schema.trim","js/metabase.mbql.schema.ltrim","js/metabase.mbql.schema.rtrim","js/metabase.mbql.schema.replace","js/metabase.mbql.schema.lower","js/metabase.mbql.schema.upper","js/metabase.mbql.schema.concat","js/metabase.mbql.schema.regex-match-first","js/metabase.mbql.schema.coalesce","metabase.mbql.schema/+","metabase.mbql.schema/-","metabase.mbql.schema//","metabase.mbql.schema/*","metabase.mbql.schema/floor","metabase.mbql.schema/ceil","metabase.mbql.schema/round","metabase.mbql.schema/abs","metabase.mbql.schema/power","metabase.mbql.schema/sqrt","metabase.mbql.schema/exp","metabase.mbql.schema/log","metabase.mbql.schema/ArithmeticExpression*","js/metabase.mbql.schema.+","js/metabase.mbql.schema.-","js/metabase.mbql.schema.*","js/metabase.mbql.schema.length","js/metabase.mbql.schema.floor","js/metabase.mbql.schema.ceil","js/metabase.mbql.schema.round","js/metabase.mbql.schema.abs","js/metabase.mbql.schema.power","js/metabase.mbql.schema.sqrt","js/metabase.mbql.schema.exp","js/metabase.mbql.schema.log","metabase.mbql.schema/and","metabase.mbql.schema/Filter","metabase.mbql.schema/or","metabase.mbql.schema/not","metabase.mbql.schema/FieldOrRelativeDatetime","metabase.mbql.schema/EqualityComparable","schema.core/Bool","metabase.mbql.schema/OrderComparable","metabase.mbql.schema/=","metabase.mbql.schema/!=","metabase.mbql.schema/<","metabase.mbql.schema/>","metabase.mbql.schema/<=","metabase.mbql.schema/>=","metabase.mbql.schema/between","metabase.mbql.schema/inside","metabase.mbql.schema/is-null","metabase.mbql.schema/not-null","metabase.mbql.schema/is-empty","metabase.mbql.schema/not-empty","metabase.mbql.schema/StringFilterOptions","metabase.mbql.schema/starts-with","metabase.mbql.schema/ends-with","metabase.mbql.schema/contains","metabase.mbql.schema/does-not-contain","metabase.mbql.schema/TimeIntervalOptions","metabase.mbql.schema/time-interval","metabase.mbql.schema/segment","metabase.mbql.schema/Filter*","js/metabase.mbql.schema.and","js/metabase.mbql.schema.or","js/metabase.mbql.schema.not","js/metabase.mbql.schema.=","js/metabase.mbql.schema.!=","js/metabase.mbql.schema.<","js/metabase.mbql.schema.>","js/metabase.mbql.schema.<=","js/metabase.mbql.schema.>=","js/metabase.mbql.schema.between","js/metabase.mbql.schema.starts-with","js/metabase.mbql.schema.ends-with","js/metabase.mbql.schema.contains","js/metabase.mbql.schema.does-not-contain","js/metabase.mbql.schema.inside","js/metabase.mbql.schema.is-empty","js/metabase.mbql.schema.not-empty","js/metabase.mbql.schema.is-null","js/metabase.mbql.schema.not-null","js/metabase.mbql.schema.time-interval","js/metabase.mbql.schema.segment","metabase.mbql.schema/CaseClause","schema.core/one","metabase.mbql.schema/CaseClauses","metabase.mbql.schema/CaseOptions","metabase.mbql.schema/case","metabase.mbql.schema/FieldOrExpressionDef","metabase.mbql.schema/count","metabase.mbql.schema/cum-count","metabase.mbql.schema/avg","metabase.mbql.schema/cum-sum","metabase.mbql.schema/distinct","metabase.mbql.schema/sum","metabase.mbql.schema/min","metabase.mbql.schema/max","metabase.mbql.schema/sum-where","metabase.mbql.schema/count-where","metabase.mbql.schema/share","metabase.mbql.schema/stddev","metabase.mbql.schema/ag:var","metabase.mbql.schema/median","metabase.mbql.schema/percentile","metabase.mbql.schema/metric","metabase.mbql.schema/UnnamedAggregation*","js/metabase.mbql.schema.count","js/metabase.mbql.schema.avg","js/metabase.mbql.schema.cum-count","js/metabase.mbql.schema.cum-sum","js/metabase.mbql.schema.distinct","js/metabase.mbql.schema.stddev","js/metabase.mbql.schema.sum","js/metabase.mbql.schema.min","js/metabase.mbql.schema.max","js/metabase.mbql.schema.metric","js/metabase.mbql.schema.share","js/metabase.mbql.schema.count-where","js/metabase.mbql.schema.sum-where","js/metabase.mbql.schema.case","js/metabase.mbql.schema.median","js/metabase.mbql.schema.percentile","js/metabase.mbql.schema.ag:var","metabase.mbql.schema/UnnamedAggregation","metabase.mbql.schema/AggregationOptions","metabase.mbql.schema/aggregation-options","metabase.mbql.schema/asc","metabase.mbql.schema/desc","metabase.mbql.schema/OrderBy","js/metabase.mbql.schema.asc","js/metabase.mbql.schema.desc","metabase.mbql.schema/TemplateTag","metabase.mbql.schema/NativeQuery","metabase.mbql.schema/SourceQuery","cljs.core.every_pred","cljs.core/map?","clojure.set/rename-keys","metabase.mbql.schema/MBQLQuery","metabase.mbql.schema/SourceQueryMetadata","metabase.mbql.schema.helpers/Map","metabase.mbql.schema/source-table-card-id-regex","metabase.mbql.schema/SourceTable","metabase.mbql.schema/JoinStrategy","metabase.mbql.schema/Join","cljs.core.some_fn","metabase.mbql.schema/Joins","p1__42503#","metabase.mbql.schema.helpers/non-empty","metabase.mbql.schema.helpers/empty-or-distinct?","cljs.core.filter","cljs.core/some?","cljs.core.map","metabase.mbql.schema/Fields","metabase.mbql.schema.helpers/distinct","metabase.mbql.schema.helpers/IntGreaterThanOrEqualToZero","query","cljs.core/count","cljs.core/select-keys","p__42504","map__42505","breakout","fields","cljs.core/empty?","clojure.set.intersection","cljs.core/set","metabase.mbql.schema/Parameter","metabase.mbql.schema/Settings","metabase.mbql.schema/Constraints","p__42507","map__42508","max-results","max-results-bare-rows","and__4115__auto__","metabase.mbql.schema/MiddlewareOptions","metabase.mbql.schema/Context","metabase.mbql.schema/Info","metabase.mbql.schema/saved-questions-virtual-database-id","metabase.mbql.schema/DatabaseID","metabase.mbql.schema/Query","p__42514","map__42515","native","mbql","query-type","G__42517","cljs.core/Keyword","js/Error","metabase.mbql.schema/validate-query","schema.core/validator"],"sourcesContent":["(ns metabase.mbql.schema\n  \"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"\n  (:refer-clojure :exclude [count distinct min max + - / * and or not not-empty = < > <= >= time case concat replace])\n  #?@\n  (:clj\n   [(:require [clojure.core :as core]\n              [clojure.set :as set]\n              [metabase.mbql.schema.helpers :as helpers :refer [is-clause?]]\n              [metabase.mbql.schema.macros :refer [defclause one-of]]\n              [schema.core :as s])\n    (:import java.time.format.DateTimeFormatter)]\n\n   :cljs\n   [(:require [clojure.core :as core]\n              [clojure.set :as set]\n              [metabase.mbql.schema.helpers :as helpers :refer [is-clause?]]\n              [metabase.mbql.schema.macros :refer [defclause one-of]]\n              [schema.core :as s])]))\n\n;; A NOTE ABOUT METADATA:\n;;\n;; Clauses below are marked with the following tags for documentation purposes:\n;;\n;; *  Clauses marked `^:sugar` are syntactic sugar primarily intended to make generating queries easier on the\n;;    frontend. These clauses are automatically rewritten as simpler clauses by the `desugar` or `expand-macros`\n;;    middleware. Thus driver implementations do not need to handle these clauses.\n;;\n;; *  Clauses marked `^:internal` are automatically generated by `wrap-value-literals` or other middleware from values\n;;    passed in. They are not intended to be used by the frontend when generating a query. These add certain\n;;    information that simplify driver implementations. When writing MBQL queries yourself you should pretend these\n;;    clauses don't exist.\n;;\n;; *  Clauses marked `^{:requires-features #{feature+}}` require a certain set of features to be used. At some date in\n;;    the future we will likely add middleware that uses this metadata to automatically validate that a driver has the\n;;    features needed to run the query in question.\n\n;;; +----------------------------------------------------------------------------------------------------------------+\n;;; |                                                  MBQL Clauses                                                  |\n;;; +----------------------------------------------------------------------------------------------------------------+\n\n;;; ------------------------------------------------- Datetime Stuff -------------------------------------------------\n\n(def date-bucketing-units\n  \"Set of valid units for bucketing or comparing against a *date* Field.\"\n  #{:default :day :day-of-week :day-of-month :day-of-year :week :week-of-year\n    :month :month-of-year :quarter :quarter-of-year :year})\n\n(def time-bucketing-units\n  \"Set of valid units for bucketing or comparing against a *time* Field.\"\n  #{:default :millisecond :second :minute :minute-of-hour :hour :hour-of-day})\n\n(def datetime-bucketing-units\n  \"Set of valid units for bucketing or comparing against a *datetime* Field.\"\n  (set/union date-bucketing-units time-bucketing-units))\n\n(def DateUnit\n  \"Valid unit for *date* bucketing.\"\n  (s/named\n   (apply s/enum date-bucketing-units)\n   \"date-bucketing-unit\"))\n\n;; it could make sense to say hour-of-day(field) =  hour-of-day(\"2018-10-10T12:00\")\n;; but it does not make sense to say month-of-year(field) = month-of-year(\"08:00:00\"),\n;; does it? So we'll restrict the set of units a TimeValue can have to ones that have no notion of day/date.\n(def TimeUnit\n  \"Valid unit for *time* bucketing.\"\n  (s/named\n   (apply s/enum time-bucketing-units)\n   \"time-bucketing-unit\"))\n\n(def DateTimeUnit\n  \"Valid unit for *datetime* bucketing.\"\n  (s/named\n   (apply s/enum datetime-bucketing-units)\n   \"datetime-bucketing-unit\"))\n\n;; TODO -- rename to `TemporalUnit`\n(def ^{:deprecated \"0.39.0\"} DatetimeFieldUnit\n  \"Schema for all valid datetime bucketing units. DEPRECATED -- use `DateUnit`, `TimeUnit`, or\n  `DateTimeUnit` instead.\"\n  (s/named\n   (apply s/enum #{:default :minute :minute-of-hour :hour :hour-of-day :day :day-of-week :day-of-month :day-of-year\n                   :week :week-of-year :month :month-of-year :quarter :quarter-of-year :year})\n   \"datetime-unit\"))\n\n(def ^:private RelativeDatetimeUnit\n  (s/named\n   (apply s/enum #{:default :minute :hour :day :week :month :quarter :year})\n   \"relative-datetime-unit\"))\n\n#?(:clj\n   (defn- can-parse-iso-8601?\n     [^DateTimeFormatter formatter ^String s]\n     (when (string? s)\n       (try\n         (.parse formatter s)\n         true\n         (catch Throwable _\n           false))))\n\n   :cljs\n   (defn- can-parse-iso-8601?\n     [s]\n     (when (string? s)\n       (not= (.parse js/Date s) ##NaN))))\n\n;; TODO -- currently these are all the same between date/time/datetime\n\n(def ^:private ^{:arglists '([s])} can-parse-date?\n  #?(:clj (partial can-parse-iso-8601? DateTimeFormatter/ISO_DATE)\n     :cljs can-parse-iso-8601?))\n\n(def ^:private ^{:arglists '([s])} can-parse-datetime?\n  #?(:clj (partial can-parse-iso-8601? DateTimeFormatter/ISO_DATE_TIME)\n     :cljs can-parse-iso-8601?))\n\n(def ^:private ^{:arglists '([s])} can-parse-time?\n  #?(:clj (partial can-parse-iso-8601? DateTimeFormatter/ISO_TIME)\n     :cljs can-parse-iso-8601?))\n\n(def LiteralDateString\n  \"Schema for an ISO-8601-formatted date string literal.\"\n  (s/constrained helpers/NonBlankString can-parse-date? \"valid ISO-8601 datetime string literal\"))\n\n(def LiteralDatetimeString\n  \"Schema for an ISO-8601-formattedor datetime string literal.\"\n  (s/constrained helpers/NonBlankString can-parse-datetime? \"valid ISO-8601 datetime string literal\"))\n\n(def LiteralTimeString\n  \"Schema for an ISO-8601-formatted time string literal.\"\n  (s/constrained helpers/NonBlankString can-parse-time? \"valid ISO-8601 time string literal\"))\n\n(def TemporalLiteralString\n  \"Schema for either a literal datetime string, literal date string, or a literal time string.\"\n  (s/named\n   (s/conditional\n    can-parse-datetime? LiteralDatetimeString\n    can-parse-date?     LiteralDateString\n    can-parse-time?     LiteralTimeString)\n   \"valid ISO-8601 datetime, date, or time string literal\"))\n\n;; TODO - `unit` is not allowed if `n` is `current`\n(defclause relative-datetime\n  n    (s/cond-pre (s/eq :current) s/Int)\n  unit (optional RelativeDatetimeUnit))\n\n(defclause interval\n  n    s/Int\n  unit RelativeDatetimeUnit)\n\n;; This clause is automatically generated by middleware when datetime literals (literal strings or one of the Java\n;; types) are encountered. Unit is inferred by looking at the Field the timestamp is compared against. Implemented\n;; mostly to convenience driver implementations. You don't need to use this form directly when writing MBQL; datetime\n;; literal strings are preferred instead.\n;;\n;; example:\n;; [:= [:field 10 {:temporal-unit :day}] \"2018-10-02\"]\n;;\n;; becomes:\n;; [:= [:field 10 {:temporal-unit :day}] [:absolute-datetime #inst \"2018-10-02\" :day]]\n(def ^:internal ^{:clause-name :absolute-datetime} absolute-datetime\n  \"Schema for an `:absolute-datetime` clause.\"\n  (s/conditional\n   #(core/not (is-clause? :absolute-datetime %))\n   (helpers/clause\n    :absolute-datetime\n    \"t\"\n    #?(:clj (s/cond-pre java.time.LocalDate java.time.LocalDateTime java.time.OffsetDateTime java.time.ZonedDateTime)\n       :cljs js/Date)\n    \"unit\"\n    DateTimeUnit)\n\n   #(instance? #?(:clj java.time.LocalDate :cljs js/Date) (second %))\n   (helpers/clause\n    :absolute-datetime\n    \"date\" #?(:clj java.time.LocalDate :cljs js/Date)\n    \"unit\" DateUnit)\n\n   :else\n   (helpers/clause\n    :absolute-datetime\n    \"datetime\"\n    #?(:clj (s/cond-pre java.time.LocalDateTime java.time.OffsetDateTime java.time.ZonedDateTime)\n       :cljs js/Date)\n    \"unit\"\n    DateTimeUnit)))\n\n\n;; almost exactly the same as `absolute-datetime`, but generated in some sitations where the literal in question was\n;; clearly a time (e.g. \"08:00:00.000\") and/or the Field derived from `:type/Time` and/or the unit was a\n;; time-bucketing unit\n;;\n;; TODO - should we have a separate `date` type as well\n(defclause ^:internal time\n  time #?(:clj (s/cond-pre java.time.LocalTime java.time.OffsetTime)\n          :cljs js/Date)\n  unit TimeUnit)\n\n(def ^:private DatetimeLiteral\n  \"Schema for valid absolute datetime literals.\"\n  (s/conditional\n   (partial is-clause? :absolute-datetime)\n   absolute-datetime\n\n   (partial is-clause? :time)\n   time\n\n   :else\n   (s/cond-pre\n    ;; literal datetime strings and Java types will get transformed to `absolute-datetime` clauses automatically by\n    ;; middleware so drivers don't need to deal with these directly. You only need to worry about handling\n    ;; `absolute-datetime` clauses.\n    TemporalLiteralString\n\n    #?@(:clj\n        [java.time.LocalTime\n         java.time.LocalDate\n         java.time.LocalDateTime\n         java.time.OffsetTime\n         java.time.OffsetDateTime\n         java.time.ZonedDateTime]\n\n        :cljs\n        [js/Date]))))\n\n(def DateTimeValue\n  \"Schema for a datetime value drivers will personally have to handle, either an `absolute-datetime` form or a\n  `relative-datetime` form.\"\n  (one-of absolute-datetime relative-datetime time))\n\n\n;;; -------------------------------------------------- Other Values --------------------------------------------------\n\n(def ValueTypeInfo\n  \"Type info about a value in a `:value` clause. Added automatically by `wrap-value-literals` middleware to values in\n  filter clauses based on the Field in the clause.\"\n  ;; TODO -- these should use `lisp-case` like everything else in MBQL.\n  {(s/optional-key :database_type) (s/maybe helpers/NonBlankString)\n   (s/optional-key :base_type)     (s/maybe helpers/FieldType)\n   (s/optional-key :semantic_type) (s/maybe helpers/FieldSemanticOrRelationType)\n   (s/optional-key :unit)          (s/maybe DateTimeUnit)\n   (s/optional-key :name)          (s/maybe helpers/NonBlankString)\n   s/Keyword                       s/Any})\n\n;; Arguments to filter clauses are automatically replaced with [:value <value> <type-info>] clauses by the\n;; `wrap-value-literals` middleware. This is done to make it easier to implement query processors, because most driver\n;; implementations dispatch off of Object type, which is often not enough to make informed decisions about how to\n;; treat certain objects. For example, a string compared against a Postgres UUID Field needs to be parsed into a UUID\n;; object, since text <-> UUID comparision doesn't work in Postgres. For this reason, raw literals in `:filter`\n;; clauses are wrapped in `:value` clauses and given information about the type of the Field they will be compared to.\n(defclause ^:internal value\n  value    s/Any\n  type-info (s/maybe ValueTypeInfo))\n\n\n;;; ----------------------------------------------------- Fields -----------------------------------------------------\n\n;; Expression *references* refer to a something in the `:expressions` clause, e.g. something like\n;;\n;;    [:+ [:field 1 nil] [:field 2 nil]]`\n(defclause ^{:requires-features #{:expressions}} expression\n  expression-name helpers/NonBlankString)\n\n(def BinningStrategyName\n  \"Schema for a valid value for the `strategy-name` param of a `binning-strategy` clause.\"\n  (s/enum :num-bins :bin-width :default))\n\n(defn- validate-bin-width [schema]\n  (s/constrained\n   schema\n   (fn [{:keys [strategy bin-width]}]\n     (if (core/= strategy :bin-width)\n       bin-width\n       true))\n   \"You must specify :bin-width when using the :bin-width strategy.\"))\n\n(defn- validate-num-bins [schema]\n  (s/constrained\n   schema\n   (fn [{:keys [strategy num-bins]}]\n     (if (core/= strategy :num-bins)\n       num-bins\n       true))\n   \"You must specify :num-bins when using the :num-bins strategy.\"))\n\n(def FieldBinningOptions\n  \"Schema for `:binning` options passed to a `:field` clause.\"\n  (-> {:strategy                   BinningStrategyName\n       (s/optional-key :num-bins)  helpers/IntGreaterThanZero\n       (s/optional-key :bin-width) (s/constrained s/Num (complement neg?) \"bin width must be >= 0.\")\n       s/Keyword                   s/Any}\n      validate-bin-width\n      validate-num-bins))\n\n(defn- validate-temporal-unit [schema]\n  ;; TODO - consider breaking this out into separate constraints for the three different types so we can generate more\n  ;; specific error messages\n  (s/constrained\n   schema\n   (fn [{:keys [base-type temporal-unit]}]\n     (if-not temporal-unit\n       true\n       (if-let [units (condp #(isa? %2 %1) base-type\n                        :type/Date     date-bucketing-units\n                        :type/Time     time-bucketing-units\n                        :type/DateTime datetime-bucketing-units\n                        nil)]\n         (contains? units temporal-unit)\n         true)))\n   \"Invalid :temporal-unit for the specified :base-type.\"))\n\n(defn- no-binning-options-at-top-level [schema]\n  (s/constrained\n   schema\n   (complement :strategy)\n   \"Found :binning keys at the top level of :field options. binning-related options belong under the :binning key.\"))\n\n(def ^:private FieldOptions\n  (-> {(s/optional-key :base-type)     (s/maybe helpers/FieldType)\n       ;;\n       ;; replaces `fk->`\n       ;;\n       ;; `:source-field` is used to refer to a Field from a different Table you would like IMPLICITLY JOINED to the\n       ;; source table.\n       ;;\n       ;; If both `:source-field` and `:join-alias` are supplied, `:join-alias` should be used to perform the join;\n       ;; `:source-field` should be for information purposes only.\n       (s/optional-key :source-field)  (s/maybe (s/cond-pre helpers/IntGreaterThanZero helpers/NonBlankString))\n       ;;\n       ;; `:temporal-unit` is used to specify DATE BUCKETING for a Field that represents a moment in time of some sort.\n       ;;\n       ;; There is no requirement that all `:type/Temporal` derived Fields specify a `:temporal-unit`, but for legacy\n       ;; reasons `:field` clauses that refer to `:type/DateTime` Fields will be automatically \"bucketed\" in the\n       ;; `:breakout` and `:filter` clauses, but nowhere else. Auto-bucketing only applies to `:filter` clauses when\n       ;; values for comparison are `yyyy-MM-dd` date strings. See the `auto-bucket-datetimes` middleware for more\n       ;; details. `:field` clauses elsewhere will not be automatically bucketed, so drivers still need to make sure they\n       ;; do any special datetime handling for plain `:field` clauses when their Field derives from `:type/DateTime`.\n       (s/optional-key :temporal-unit) (s/maybe DateTimeUnit)\n       ;;\n       ;; replaces `joined-field`\n       ;;\n       ;; `:join-alias` is used to refer to a Field from a different Table/nested query that you are EXPLICITLY\n       ;; JOINING against.\n       (s/optional-key :join-alias)    (s/maybe helpers/NonBlankString)\n       ;;\n       ;; replaces `binning-strategy`\n       ;;\n       ;; Using binning requires the driver to support the `:binning` feature.\n       (s/optional-key :binning)       (s/maybe FieldBinningOptions)\n       ;;\n       s/Keyword                       s/Any}\n      validate-temporal-unit\n      no-binning-options-at-top-level))\n\n(defn- require-base-type-for-field-name [schema]\n  (s/constrained\n   schema\n   (fn [[_ id-or-name {:keys [base-type]}]]\n     (if (string? id-or-name)\n       base-type\n       true))\n   \":field clauses using a string field name must specify :base-type.\"))\n\n(def ^{:clause-name :field, :added \"0.39.0\"} field\n  \"Schema for a `:field` clause.\"\n  (-> (helpers/clause\n       :field\n       \"id-or-name\" (s/cond-pre helpers/IntGreaterThanZero helpers/NonBlankString)\n       \"options\"    (s/maybe (s/recursive #'FieldOptions)))\n      require-base-type-for-field-name))\n\n(def ^{:clause-name :field, :added \"0.39.0\"} field:id\n  \"Schema for a `:field` clause, with the added constraint that it must use an integer Field ID.\"\n  (s/constrained\n   field\n   (fn [[_ id-or-name]]\n     (integer? id-or-name))\n   \"Must be a :field with an integer Field ID.\"))\n\n(def ^{:clause-name :field, :added \"0.39.0\"} field:name\n  \"Schema for a `:field` clause, with the added constraint that it must use an string Field name.\"\n  (s/constrained\n   field\n   (fn [[_ id-or-name]]\n     (string? id-or-name))\n   \"Must be a :field with a string Field name.\"))\n\n(def ^:private Field*\n  (one-of expression field))\n\n;; TODO -- consider renaming this FieldOrExpression,\n(def Field\n  \"Schema for either a `:field` clause (reference to a Field) or an `:expression` clause (reference to an expression).\"\n  (s/recursive #'Field*))\n\n;; aggregate field reference refers to an aggregation, e.g.\n;;\n;;    {:aggregation [[:count]]\n;;     :order-by    [[:asc [:aggregation 0]]]} ;; refers to the 0th aggregation, `:count`\n;;\n;; Currently aggregate Field references can only be used inside order-by clauses. In the future once we support SQL\n;; `HAVING` we can allow them in filter clauses too\n;;\n;; TODO - shouldn't we allow composing aggregations in expressions? e.g.\n;;\n;;    {:order-by [[:asc [:+ [:aggregation 0] [:aggregation 1]]]]}\n;;\n;; TODO - it would be nice if we could check that there's actually an aggregation with the corresponding index,\n;; wouldn't it\n(defclause aggregation, aggregation-clause-index s/Int)\n\n(def FieldOrAggregationReference\n  \"Schema for any type of valid Field clause, or for an indexed reference to an aggregation clause.\"\n  (s/if (partial is-clause? :aggregation)\n    aggregation\n    Field))\n\n\n;;; -------------------------------------------------- Expressions ---------------------------------------------------\n\n;; Expressions are \"calculated column\" definitions, defined once and then used elsewhere in the MBQL query.\n\n(def string-expressions\n  \"String functions\"\n  #{:substring :trim :rtrim :ltrim :upper :lower :replace :concat :regex-match-first :coalesce})\n\n(declare StringExpression)\n\n(def ^:private StringExpressionArg\n  (s/conditional\n   string?\n   s/Str\n\n   (partial is-clause? string-expressions)\n   (s/recursive #'StringExpression)\n\n   (partial is-clause? :value)\n   value\n\n   :else\n   Field))\n\n(def arithmetic-expressions\n  \"Set of valid arithmetic expression clause keywords.\"\n  #{:+ :- :/ :* :coalesce :length :round :ceil :floor :abs :power :sqrt :log :exp})\n\n(def ^:private aggregations #{:sum :avg :stddev :var :median :percentile :min :max :cum-count :cum-sum :count-where :sum-where :share :distinct :metric :aggregation-options :count})\n\n(declare ArithmeticExpression)\n(declare Aggregation)\n\n(def ^:private NumericExpressionArg\n  (s/conditional\n   number?\n   s/Num\n\n   (partial is-clause? arithmetic-expressions)\n   (s/recursive #'ArithmeticExpression)\n\n   (partial is-clause? aggregations)\n   (s/recursive #'Aggregation)\n\n   (partial is-clause? :value)\n   value\n\n   :else\n   Field))\n\n(def ^:private ExpressionArg\n  (s/conditional\n   number?\n   s/Num\n\n   (partial is-clause? arithmetic-expressions)\n   (s/recursive #'ArithmeticExpression)\n\n   string?\n   s/Str\n\n   (partial is-clause? string-expressions)\n   (s/recursive #'StringExpression)\n\n   (partial is-clause? :value)\n   value\n\n   :else\n   Field))\n\n(def ^:private NumericExpressionArgOrInterval\n  (s/if (partial is-clause? :interval)\n    interval\n    NumericExpressionArg))\n\n(defclause ^{:requires-features #{:expressions}} coalesce\n  a ExpressionArg, b ExpressionArg, more (rest ExpressionArg))\n\n(defclause ^{:requires-features #{:expressions}} substring\n  s StringExpressionArg, start NumericExpressionArg, length (optional NumericExpressionArg))\n\n(defclause ^{:requires-features #{:expressions}} length\n  s StringExpressionArg)\n\n(defclause ^{:requires-features #{:expressions}} trim\n  s StringExpressionArg)\n\n(defclause ^{:requires-features #{:expressions}} rtrim\n  s StringExpressionArg)\n\n(defclause ^{:requires-features #{:expressions}} ltrim\n  s StringExpressionArg)\n\n(defclause ^{:requires-features #{:expressions}} upper\n  s StringExpressionArg)\n\n(defclause ^{:requires-features #{:expressions}} lower\n  s StringExpressionArg)\n\n(defclause ^{:requires-features #{:expressions}} replace\n  s StringExpressionArg, match s/Str, replacement s/Str)\n\n(defclause ^{:requires-features #{:expressions}} concat\n  a StringExpressionArg, b StringExpressionArg, more (rest StringExpressionArg))\n\n(defclause ^{:requires-features #{:expressions :regex}} regex-match-first\n  s StringExpressionArg, pattern s/Str)\n\n(def ^:private StringExpression*\n  (one-of substring trim ltrim rtrim replace lower upper concat regex-match-first coalesce))\n\n(def ^:private StringExpression\n  \"Schema for the definition of an string expression.\"\n  (s/recursive #'StringExpression*))\n\n(defclause ^{:requires-features #{:expressions}} +\n  x NumericExpressionArg, y NumericExpressionArgOrInterval, more (rest NumericExpressionArgOrInterval))\n\n(defclause ^{:requires-features #{:expressions}} -\n  x NumericExpressionArg, y NumericExpressionArgOrInterval, more (rest NumericExpressionArgOrInterval))\n\n(defclause ^{:requires-features #{:expressions}} /, x NumericExpressionArg, y NumericExpressionArg, more (rest NumericExpressionArg))\n\n(defclause ^{:requires-features #{:expressions}} *, x NumericExpressionArg, y NumericExpressionArg, more (rest NumericExpressionArg))\n\n(defclause ^{:requires-features #{:expressions}} floor\n  x NumericExpressionArg)\n\n(defclause ^{:requires-features #{:expressions}} ceil\n  x NumericExpressionArg)\n\n(defclause ^{:requires-features #{:expressions}} round\n  x NumericExpressionArg)\n\n(defclause ^{:requires-features #{:expressions}} abs\n  x NumericExpressionArg)\n\n(defclause ^{:requires-features #{:advanced-math-expressions}} power\n  x NumericExpressionArg,  y NumericExpressionArg)\n\n(defclause ^{:requires-features #{:advanced-math-expressions}} sqrt\n  x NumericExpressionArg)\n\n(defclause ^{:requires-features #{:advanced-math-expressions}} exp\n  x NumericExpressionArg)\n\n(defclause ^{:requires-features #{:advanced-math-expressions}} log\n  x NumericExpressionArg)\n\n(def ^:private ArithmeticExpression*\n  (one-of + - / * coalesce length floor ceil round abs power sqrt exp log))\n\n(def ^:private ArithmeticExpression\n  \"Schema for the definition of an arithmetic expression.\"\n  (s/recursive #'ArithmeticExpression*))\n\n\n;;; ----------------------------------------------------- Filter -----------------------------------------------------\n\n(declare Filter)\n\n(defclause and\n  first-clause  (s/recursive #'Filter)\n  second-clause (s/recursive #'Filter)\n  other-clauses (rest (s/recursive #'Filter)))\n\n(defclause or\n  first-clause  (s/recursive #'Filter)\n  second-clause (s/recursive #'Filter)\n  other-clauses (rest (s/recursive #'Filter)))\n\n(defclause not, clause (s/recursive #'Filter))\n\n(def ^:private FieldOrRelativeDatetime\n  (s/if (partial is-clause? :relative-datetime)\n   relative-datetime\n   Field))\n\n(def ^:private EqualityComparable\n  \"Schema for things things that make sense in a `=` or `!=` filter, i.e. things that can be compared for equality.\"\n  (s/maybe\n   (s/cond-pre\n    s/Bool\n    s/Num\n    s/Str\n    DatetimeLiteral\n    FieldOrRelativeDatetime\n    ExpressionArg\n    value)))\n\n(def ^:private OrderComparable\n  \"Schema for things that make sense in a filter like `>` or `<`, i.e. things that can be sorted.\"\n  (s/if (partial is-clause? :value)\n    value\n    (s/cond-pre\n     s/Num\n     s/Str\n     DatetimeLiteral\n     ExpressionArg\n     FieldOrRelativeDatetime)))\n\n;; For all of the non-compound Filter clauses below the first arg is an implicit Field ID\n\n;; These are SORT OF SUGARY, because extra values will automatically be converted a compound clauses. Driver\n;; implementations only need to handle the 2-arg forms.\n;;\n;; `=` works like SQL `IN` with more than 2 args\n;;\n;;    [:= [:field 1 nil] 2 3] --[DESUGAR]--> [:or [:= [:field 1 nil] 2] [:= [:field 1 nil] 3]]\n;;\n;; `!=` works like SQL `NOT IN` with more than 2 args\n;;\n;;    [:!= [:field 1 nil] 2 3] --[DESUGAR]--> [:and [:!= [:field 1 nil] 2] [:!= [:field 1 nil] 3]]\n\n(defclause =,  field EqualityComparable, value-or-field EqualityComparable, more-values-or-fields (rest EqualityComparable))\n(defclause !=, field EqualityComparable, value-or-field EqualityComparable, more-values-or-fields (rest EqualityComparable))\n\n(defclause <,  field OrderComparable, value-or-field OrderComparable)\n(defclause >,  field OrderComparable, value-or-field OrderComparable)\n(defclause <=, field OrderComparable, value-or-field OrderComparable)\n(defclause >=, field OrderComparable, value-or-field OrderComparable)\n\n;; :between is INCLUSIVE just like SQL !!!\n(defclause between field OrderComparable, min OrderComparable, max OrderComparable)\n\n;; SUGAR CLAUSE: This is automatically written as a pair of `:between` clauses by the `:desugar` middleware.\n(defclause ^:sugar inside\n  lat-field OrderComparable\n  lon-field OrderComparable\n  lat-max   OrderComparable\n  lon-min   OrderComparable\n  lat-min   OrderComparable\n  lon-max   OrderComparable)\n\n;; SUGAR CLAUSES: These are rewritten as `[:= <field> nil]` and `[:not= <field> nil]` respectively\n(defclause ^:sugar is-null,  field Field)\n(defclause ^:sugar not-null, field Field)\n\n;; These are rewritten as `[:or [:= <field> nil] [:= <field> \"\"]]` and\n;; `[:and [:not= <field> nil] [:not= <field> \"\"]]`\n(defclause ^:sugar is-empty,  field Field)\n(defclause ^:sugar not-empty, field Field)\n\n(def ^:private StringFilterOptions\n  {(s/optional-key :case-sensitive) s/Bool}) ; default true\n\n(defclause starts-with, field StringExpressionArg, string-or-field StringExpressionArg, options (optional StringFilterOptions))\n(defclause ends-with,   field StringExpressionArg, string-or-field StringExpressionArg, options (optional StringFilterOptions))\n(defclause contains,    field StringExpressionArg, string-or-field StringExpressionArg, options (optional StringFilterOptions))\n\n;; SUGAR: this is rewritten as [:not [:contains ...]]\n(defclause ^:sugar does-not-contain\n  field StringExpressionArg, string-or-field StringExpressionArg, options (optional StringFilterOptions))\n\n(def ^:private TimeIntervalOptions\n  ;; Should we include partial results for the current day/month/etc? Defaults to `false`; set this to `true` to\n  ;; include them.\n  {(s/optional-key :include-current) s/Bool}) ; default false\n\n;; Filter subclause. Syntactic sugar for specifying a specific time interval.\n;;\n;; Return rows where datetime Field 100's value is in the current month\n;;\n;;    [:time-interval [:field 100 nil] :current :month]\n;;\n;; Return rows where datetime Field 100's value is in the current month, including partial results for the\n;; current day\n;;\n;;    [:time-interval [:field 100 nil] :current :month {:include-current true}]\n;;\n;; SUGAR: This is automatically rewritten as a filter clause with a relative-datetime value\n(defclause ^:sugar time-interval\n  field   field\n  n       (s/cond-pre\n           s/Int\n           (s/enum :current :last :next))\n  unit    RelativeDatetimeUnit\n  options (optional TimeIntervalOptions))\n\n;; A segment is a special `macro` that saves some pre-definied filter clause, e.g. [:segment 1]\n;; this gets replaced by a normal Filter clause in MBQL macroexpansion\n;;\n;; It can also be used for GA, which looks something like `[:segment \"gaid::-11\"]`. GA segments aren't actually MBQL\n;; segments and pass-thru to GA.\n(defclause ^:sugar segment, segment-id (s/cond-pre helpers/IntGreaterThanZero helpers/NonBlankString))\n\n(def ^:private Filter*\n  (s/conditional\n   (partial is-clause? arithmetic-expressions) ArithmeticExpression\n   (partial is-clause? string-expressions)     StringExpression\n   :else\n   (one-of\n    ;; filters drivers must implement\n    and or not = != < > <= >= between starts-with ends-with contains\n    ;; SUGAR filters drivers do not need to implement\n    does-not-contain inside is-empty not-empty is-null not-null time-interval segment)))\n\n(def Filter\n  \"Schema for a valid MBQL `:filter` clause.\"\n  (s/recursive #'Filter*))\n\n(def ^:private CaseClause [(s/one Filter \"pred\") (s/one ExpressionArg \"expr\")])\n\n(def ^:private CaseClauses [CaseClause])\n\n(def ^:private CaseOptions\n  {(s/optional-key :default) ExpressionArg})\n\n(defclause ^{:requires-features #{:basic-aggregations}} case\n  clauses CaseClauses, options (optional CaseOptions))\n\n(def FieldOrExpressionDef\n  \"Schema for anything that is accepted as a top-level expression definition, either an arithmetic expression such as a\n  `:+` clause or a `:field` clause.\"\n  (s/conditional\n   (partial is-clause? arithmetic-expressions) ArithmeticExpression\n   (partial is-clause? string-expressions)     StringExpression\n   (partial is-clause? :case)                  case\n   :else                                       Field))\n\n\n;;; -------------------------------------------------- Aggregations --------------------------------------------------\n\n;; For all of the 'normal' Aggregations below (excluding Metrics) fields are implicit Field IDs\n\n;; cum-sum and cum-count are SUGAR because they're implemented in middleware. They clauses are swapped out with\n;; `count` and `sum` aggregations respectively and summation is done in Clojure-land\n(defclause ^{:requires-features #{:basic-aggregations}} ^:sugar count,     field (optional Field))\n(defclause ^{:requires-features #{:basic-aggregations}} ^:sugar cum-count, field (optional Field))\n\n;; technically aggregations besides count can also accept expressions as args, e.g.\n;;\n;;    [[:sum [:+ [:field 1 nil] [:field 2 nil]]]]\n;;\n;; Which is equivalent to SQL:\n;;\n;;    SUM(field_1 + field_2)\n\n(defclause ^{:requires-features #{:basic-aggregations}} avg,      field-or-expression FieldOrExpressionDef)\n(defclause ^{:requires-features #{:basic-aggregations}} cum-sum,  field-or-expression FieldOrExpressionDef)\n(defclause ^{:requires-features #{:basic-aggregations}} distinct, field-or-expression FieldOrExpressionDef)\n(defclause ^{:requires-features #{:basic-aggregations}} sum,      field-or-expression FieldOrExpressionDef)\n(defclause ^{:requires-features #{:basic-aggregations}} min,      field-or-expression FieldOrExpressionDef)\n(defclause ^{:requires-features #{:basic-aggregations}} max,      field-or-expression FieldOrExpressionDef)\n\n(defclause ^{:requires-features #{:basic-aggregations}} sum-where\n  field-or-expression FieldOrExpressionDef, pred Filter)\n\n(defclause ^{:requires-features #{:basic-aggregations}} count-where\n  pred Filter)\n\n(defclause ^{:requires-features #{:basic-aggregations}} share\n  pred Filter)\n\n(defclause ^{:requires-features #{:standard-deviation-aggregations}} stddev\n  field-or-expression FieldOrExpressionDef)\n\n(defclause ^{:requires-features #{:standard-deviation-aggregations}} [ag:var var]\n  field-or-expression FieldOrExpressionDef)\n\n(defclause ^{:requires-features #{:percentile-aggregations}} median\n  field-or-expression FieldOrExpressionDef)\n\n(defclause ^{:requires-features #{:percentile-aggregations}} percentile\n  field-or-expression FieldOrExpressionDef, percentile NumericExpressionArg)\n\n\n;; Metrics are just 'macros' (placeholders for other aggregations with optional filter and breakout clauses) that get\n;; expanded to other aggregations/etc. in the expand-macros middleware\n;;\n;; METRICS WITH STRING IDS, e.g. `[:metric \"ga:sessions\"]`, are Google Analytics metrics, not Metabase metrics! They\n;; pass straight thru to the GA query processor.\n(defclause ^:sugar metric, metric-id (s/cond-pre helpers/IntGreaterThanZero helpers/NonBlankString))\n\n;; the following are definitions for expression aggregations, e.g.\n;;\n;;    [:+ [:sum [:field 10 nil]] [:sum [:field 20 nil]]]\n\n(def ^:private UnnamedAggregation*\n  (s/if (partial is-clause? arithmetic-expressions)\n    ArithmeticExpression\n    (one-of count avg cum-count cum-sum distinct stddev sum min max metric share count-where\n            sum-where case median percentile ag:var)))\n\n(def ^:private UnnamedAggregation\n  (s/recursive #'UnnamedAggregation*))\n\n(def AggregationOptions\n  \"Additional options for any aggregation clause when wrapping it in `:aggregation-options`.\"\n  {;; name to use for this aggregation in the native query instead of the default name (e.g. `count`)\n   (s/optional-key :name)         helpers/NonBlankString\n   ;; user-facing display name for this aggregation instead of the default one\n   (s/optional-key :display-name) helpers/NonBlankString})\n\n(defclause aggregation-options\n  aggregation UnnamedAggregation\n  options     AggregationOptions)\n\n(def Aggregation\n  \"Schema for anything that is a valid `:aggregation` clause.\"\n  (s/if (partial is-clause? :aggregation-options)\n    aggregation-options\n    UnnamedAggregation))\n\n\n;;; ---------------------------------------------------- Order-By ----------------------------------------------------\n\n;; order-by is just a series of `[<direction> <field>]` clauses like\n;;\n;;    {:order-by [[:asc [:field 1 nil]], [:desc [:field 2 nil]]]}\n;;\n;; Field ID is implicit in these clauses\n\n(defclause asc,  field FieldOrAggregationReference)\n(defclause desc, field FieldOrAggregationReference)\n\n(def OrderBy\n  \"Schema for an `order-by` clause subclause.\"\n  (one-of asc desc))\n\n\n;;; +----------------------------------------------------------------------------------------------------------------+\n;;; |                                                    Queries                                                     |\n;;; +----------------------------------------------------------------------------------------------------------------+\n\n;;; ---------------------------------------------- Native [Inner] Query ----------------------------------------------\n\n;; TODO - schemas for template tags and dimensions live in `metabase.query-processor.middleware.parameters.sql`. Move\n;; them here when we get the chance.\n\n(def ^:private TemplateTag\n  s/Any) ; s/Any for now until we move over the stuff from the parameters middleware\n\n(def NativeQuery\n  \"Schema for a valid, normalized native [inner] query.\"\n  {:query                          s/Any\n   (s/optional-key :template-tags) {helpers/NonBlankString TemplateTag}\n   ;; collection (table) this query should run against. Needed for MongoDB\n   (s/optional-key :collection)    (s/maybe helpers/NonBlankString)\n   ;; other stuff gets added in my different bits of QP middleware to record bits of state or pass info around.\n   ;; Everyone else can ignore them.\n   s/Keyword                       s/Any})\n\n\n;;; ----------------------------------------------- MBQL [Inner] Query -----------------------------------------------\n\n(declare Query MBQLQuery)\n\n(def SourceQuery\n  \"Schema for a valid value for a `:source-query` clause.\"\n  (s/if (every-pred map? :native)\n    ;; when using native queries as source queries the schema is exactly the same except use `:native` in place of\n    ;; `:query` for reasons I do not fully remember (perhaps to make it easier to differentiate them from MBQL source\n    ;; queries).\n    (set/rename-keys NativeQuery {:query :native})\n    (s/recursive #'MBQLQuery)))\n\n(def SourceQueryMetadata\n  \"Schema for the expected keys for a single column in `:source-metadata` (`:source-metadata` is a sequence of these\n  entries), if it is passed in to the query.\n\n  This metadata automatically gets added for all source queries that are referenced via the `card__id` `:source-table`\n  form; for explicit `:source-query`s you should usually include this information yourself when specifying explicit\n  `:source-query`s.\"\n  ;; TODO - there is a very similar schema in `metabase.sync.analyze.query-results`; see if we can merge them\n  {:name                           helpers/NonBlankString\n   :base_type                      helpers/FieldType\n   ;; this is only used by the annotate post-processing stage, not really needed at all for pre-processing, might be\n   ;; able to remove this as a requirement\n   :display_name                   helpers/NonBlankString\n   (s/optional-key :semantic_type) (s/maybe helpers/FieldSemanticOrRelationType)\n   ;; you'll need to provide this in order to use BINNING\n   (s/optional-key :fingerprint)   (s/maybe helpers/Map)\n   s/Any                           s/Any})\n\n(def source-table-card-id-regex\n  \"Pattern that matches `card__id` strings that can be used as the `:source-table` of MBQL queries.\"\n  #\"^card__[1-9]\\d*$\")\n\n(def SourceTable\n  \"Schema for a valid value for the `:source-table` clause of an MBQL query.\"\n  (s/cond-pre helpers/IntGreaterThanZero source-table-card-id-regex))\n\n(def JoinStrategy\n  \"Strategy that should be used to perform the equivalent of a SQL `JOIN` against another table or a nested query.\n  These correspond 1:1 to features of the same name in driver features lists; e.g. you should check that the current\n  driver supports `:full-join` before generating a Join clause using that strategy.\"\n  (s/enum :left-join :right-join :inner-join :full-join))\n\n(def Join\n  \"Perform the equivalent of a SQL `JOIN` with another Table or nested `:source-query`. JOINs are either explicitly\n  specified in the incoming query, or implicitly generated when one uses a `:field` clause with `:source-field`.\n\n  In the top-level query, you can reference Fields from the joined table or nested query by including `:source-field`\n  in the `:field` options (known as implicit joins); for explicit joins, you *must* specify `:join-alias` yourself; in\n  the `:field` options, e.g.\n\n    ;; for joins against other Tables/MBQL source queries\n    [:field 1 {:join-alias \\\"my_join_alias\\\"}]\n\n    ;; for joins against native queries\n    [:field \\\"my_field\\\" {:base-type :field/Integer, :join-alias \\\"my_join_alias\\\"}]\"\n  (->\n   {;; *What* to JOIN. Self-joins can be done by using the same `:source-table` as in the query where this is specified.\n    ;; YOU MUST SUPPLY EITHER `:source-table` OR `:source-query`, BUT NOT BOTH!\n    (s/optional-key :source-table)\n    SourceTable\n\n    (s/optional-key :source-query)\n    SourceQuery\n    ;;\n    ;; The condition on which to JOIN. Can be anything that is a valid `:filter` clause. For automatically-generated\n    ;; JOINs this is always\n    ;;\n    ;;    [:= <source-table-fk-field> [:field <dest-table-pk-field> {:join-alias <join-table-alias>}]]\n    ;;\n    :condition\n    Filter\n    ;;\n    ;; Defaults to `:left-join`; used for all automatically-generated JOINs\n    ;;\n    ;; Driver implementations: this is guaranteed to be present after pre-processing.\n    (s/optional-key :strategy)\n    JoinStrategy\n    ;;\n    ;; The Fields to include in the results *if* a top-level `:fields` clause *is not* specified. This can be either\n    ;; `:none`, `:all`, or a sequence of Field clauses.\n    ;;\n    ;; *  `:none`: no Fields from the joined table or nested query are included (unless indirectly included by\n    ;;    breakouts or other clauses). This is the default, and what is used for automatically-generated joins.\n    ;;\n    ;; *  `:all`: will include all of the Fields from the joined table or query\n    ;;\n    ;; *  a sequence of Field clauses: include only the Fields specified. Valid clauses are the same as the top-level\n    ;;    `:fields` clause. This should be non-empty and all elements should be distinct. The normalizer will\n    ;;    automatically remove duplicate fields for you, and replace empty clauses with `:none`.\n    ;;\n    ;; Driver implementations: you can ignore this clause. Relevant fields will be added to top-level `:fields` clause\n    ;; with appropriate aliases.\n    (s/optional-key :fields)\n    (s/named\n     (s/cond-pre\n      (s/enum :all :none)\n      [field])\n     (str\n      \"Valid Join `:fields`: `:all`, `:none`, or a sequence of `:field` clauses that have `:join-alias`.\"))\n    ;;\n    ;; The name used to alias the joined table or query. This is usually generated automatically and generally looks\n    ;; like `table__via__field`. You can specify this yourself if you need to reference a joined field with a\n    ;; `:join-alias` in the options.\n    ;;\n    ;; Driver implementations: This is guaranteed to be present after pre-processing.\n    (s/optional-key :alias)\n    helpers/NonBlankString\n    ;;\n    ;; Used internally, only for annotation purposes in post-processing. When a join is implicitly generated via a\n    ;; `:field` clause with `:source-field`, the ID of the foreign key field in the source Table will\n    ;; be recorded here. This information is used to add `fk_field_id` information to the `:cols` in the query\n    ;; results; I believe this is used to facilitate drill-thru? :shrug:\n    ;;\n    ;; Don't set this information yourself. It will have no effect.\n    (s/optional-key :fk-field-id)\n    (s/maybe helpers/IntGreaterThanZero)\n    ;;\n    ;; Metadata about the source query being used, if pulled in from a Card via the `:source-table \"card__id\"` syntax.\n    ;; added automatically by the `resolve-card-id-source-tables` middleware.\n    (s/optional-key :source-metadata)\n    (s/maybe [SourceQueryMetadata])\n\n    s/Keyword s/Any}\n   (s/constrained\n    (every-pred\n     (some-fn :source-table :source-query)\n     (complement (every-pred :source-table :source-query)))\n    \"Joins must have either a `source-table` or `source-query`, but not both.\")))\n\n(def Joins\n  \"Schema for a valid sequence of `Join`s. Must be a non-empty sequence, and `:alias`, if specified, must be unique.\"\n  (s/constrained\n   (helpers/non-empty [Join])\n   #(helpers/empty-or-distinct? (filter some? (map :alias %)))\n   \"All join aliases must be unique.\"))\n\n(def Fields\n  \"Schema for valid values of the MBQL `:fields` clause.\"\n  (s/named\n   (helpers/distinct (helpers/non-empty [Field]))\n   \"Distinct, non-empty sequence of Field clauses\"))\n\n(def MBQLQuery\n  \"Schema for a valid, normalized MBQL [inner] query.\"\n  (->\n   {(s/optional-key :source-query) SourceQuery\n    (s/optional-key :source-table) SourceTable\n    (s/optional-key :aggregation)  (helpers/non-empty [Aggregation])\n    (s/optional-key :breakout)     (helpers/non-empty [Field])\n    ;; TODO - expressions keys should be strings; fix this when we get a chance (#14647)\n    (s/optional-key :expressions)  {s/Keyword FieldOrExpressionDef}\n    (s/optional-key :fields)       Fields\n    (s/optional-key :filter)       Filter\n    (s/optional-key :limit)        helpers/IntGreaterThanOrEqualToZero\n    (s/optional-key :order-by)     (helpers/distinct (helpers/non-empty [OrderBy]))\n    ;; page = page num, starting with 1. items = number of items per page.\n    ;; e.g.\n    ;; {:page 1, :items 10} = items 1-10\n    ;; {:page 2, :items 10} = items 11-20\n    (s/optional-key :page)         {:page  helpers/IntGreaterThanZero\n                                    :items helpers/IntGreaterThanZero}\n    ;;\n    ;; Various bits of middleware add additonal keys, such as `fields-is-implicit?`, to record bits of state or pass\n    ;; info to other pieces of middleware. Everyone else can ignore them.\n    (s/optional-key :joins)        Joins\n    ;;\n    ;; Info about the columns of the source query. Added in automatically by middleware. This metadata is primarily\n    ;; used to let power things like binning when used with Field Literals instead of normal Fields\n    (s/optional-key :source-metadata) (s/maybe [SourceQueryMetadata])\n    ;;\n    ;; Other keys are added by middleware or frontend client for various purposes\n    s/Keyword                      s/Any}\n\n   (s/constrained\n    (fn [query]\n      (core/= 1 (core/count (select-keys query [:source-query :source-table]))))\n    \"Query must specify either `:source-table` or `:source-query`, but not both.\")\n\n   (s/constrained\n    (fn [{:keys [breakout fields]}]\n      (empty? (set/intersection (set breakout) (set fields))))\n    \"Fields specified in `:breakout` should not be specified in `:fields`; this is implied.\")))\n\n\n;;; ----------------------------------------------------- Params -----------------------------------------------------\n\n(def ^:private Parameter\n  \"Schema for a valid, normalized query parameter.\"\n  s/Any) ; s/Any for now until we move over the stuff from the parameters middleware\n\n\n;;; ---------------------------------------------------- Options -----------------------------------------------------\n\n(def ^:private Settings\n  \"Options that tweak the behavior of the query processor.\"\n  ;; The timezone the query should be ran in, overriding the default report timezone for the instance.\n  {(s/optional-key :report-timezone) helpers/NonBlankString\n   ;; other Settings might be used somewhere, but I don't know about them. Add them if you come across them for\n   ;; documentation purposes\n   s/Keyword                         s/Any})\n\n(def ^:private Constraints\n  \"Additional constraints added to a query limiting the maximum number of rows that can be returned. Mostly useful\n  because native queries don't support the MBQL `:limit` clause. For MBQL queries, if `:limit` is set, it will\n  override these values.\"\n  (s/constrained\n   { ;; maximum number of results to allow for a query with aggregations. If `max-results-bare-rows` is unset, this\n    ;; applies to all queries\n    (s/optional-key :max-results)           helpers/IntGreaterThanOrEqualToZero\n    ;; maximum number of results to allow for a query with no aggregations.\n    ;; If set, this should be LOWER than `:max-results`\n    (s/optional-key :max-results-bare-rows) helpers/IntGreaterThanOrEqualToZero\n    ;; other Constraints might be used somewhere, but I don't know about them. Add them if you come across them for\n    ;; documentation purposes\n    s/Keyword                               s/Any}\n   (fn [{:keys [max-results max-results-bare-rows]}]\n     (if-not (core/and max-results max-results-bare-rows)\n       true\n       (core/>= max-results max-results-bare-rows)))\n   \"max-results-bare-rows must be less or equal to than max-results\"))\n\n(def ^:private MiddlewareOptions\n  \"Additional options that can be used to toggle middleware on or off.\"\n  {;; should we skip adding results_metadata to query results after running the query? Used by\n   ;; `metabase.query-processor.middleware.results-metadata`; default `false`\n   (s/optional-key :skip-results-metadata?)\n   s/Bool\n\n   ;; should we skip converting datetime types to ISO-8601 strings with appropriate timezone when post-processing\n   ;; results? Used by `metabase.query-processor.middleware.format-rows`; default `false`\n   (s/optional-key :format-rows?)\n   s/Bool\n\n   ;; disable the MBQL->native middleware. If you do this, the query will not work at all, so there are no cases where\n   ;; you should set this yourself. This is only used by the `qp/query->preprocessed` function to get the fully\n   ;; pre-processed query without attempting to convert it to native.\n   (s/optional-key :disable-mbql->native?)\n   s/Bool\n\n   ;; Userland queries are ones ran as a result of an API call, Pulse, MetaBot query, or the like. Special handling is\n   ;; done in the `process-userland-query` middleware for such queries -- results are returned in a slightly different\n   ;; format, and QueryExecution entries are normally saved, unless you pass `:no-save` as the option.\n   (s/optional-key :userland-query?)\n   (s/maybe s/Bool)\n\n   ;; Whether to add some default `max-results` and `max-results-bare-rows` constraints. By default, none are added,\n   ;; although the functions that ultimately power most API endpoints tend to set this to `true`. See\n   ;; `add-constraints` middleware for more details.\n   (s/optional-key :add-default-userland-constraints?)\n   (s/maybe s/Bool)\n\n   ;; other middleware options might be used somewhere, but I don't know about them. Add them if you come across them\n   ;; for documentation purposes\n   s/Keyword\n   s/Any})\n\n\n;;; ------------------------------------------------------ Info ------------------------------------------------------\n\n;; This stuff is used for informational purposes, primarily to record QueryExecution entries when a query is ran. Pass\n;; them along if applicable when writing code that creates queries, but when working on middleware and the like you\n;; can most likely ignore this stuff entirely.\n\n(def Context\n  \"Schema for `info.context`; used for informational purposes to record how a query was executed.\"\n  (s/enum :ad-hoc\n          :csv-download\n          :dashboard\n          :embedded-dashboard\n          :embedded-question\n          :json-download\n          :map-tiles\n          :metabot\n          :public-dashboard\n          :public-question\n          :pulse\n          :question\n          :xlsx-download))\n\n;; TODO - this schema is somewhat misleading because if you use a function like\n;; `qp/process-query-and-save-with-max-results-constraints!` some of these keys (e.g. `:context`) are in fact required\n(def Info\n  \"Schema for query `:info` dictionary, which is used for informational purposes to record information about how a query\n  was executed in QueryExecution and other places. It is considered bad form for middleware to change its behavior\n  based on this information, don't do it!\"\n  {;; These keys are nice to pass in if you're running queries on the backend and you know these values. They aren't\n   ;; used for permissions checking or anything like that so don't try to be sneaky\n   (s/optional-key :context)      (s/maybe Context)\n   (s/optional-key :executed-by)  (s/maybe helpers/IntGreaterThanZero)\n   (s/optional-key :card-id)      (s/maybe helpers/IntGreaterThanZero)\n   (s/optional-key :dashboard-id) (s/maybe helpers/IntGreaterThanZero)\n   (s/optional-key :pulse-id)     (s/maybe helpers/IntGreaterThanZero)\n   (s/optional-key :nested?)      (s/maybe s/Bool)\n   ;; `:hash` gets added automatically by `process-query-and-save-execution!`, so don't try passing\n   ;; these in yourself. In fact, I would like this a lot better if we could take these keys out of `:info` entirely\n   ;; and have the code that saves QueryExceutions figure out their values when it goes to save them\n   (s/optional-key :query-hash)   (s/maybe #?(:clj (Class/forName \"[B\")\n                                              :cljs s/Any))})\n\n\n;;; --------------------------------------------- Metabase [Outer] Query ---------------------------------------------\n\n(def ^Integer saved-questions-virtual-database-id\n  \"The ID used to signify that a database is 'virtual' rather than physical.\n\n   A fake integer ID is used so as to minimize the number of changes that need to be made on the frontend -- by using\n   something that would otherwise be a legal ID, *nothing* need change there, and the frontend can query against this\n   'database' none the wiser. (This integer ID is negative which means it will never conflict with a *real* database\n   ID.)\n\n   This ID acts as a sort of flag. The relevant places in the middleware can check whether the DB we're querying is\n   this 'virtual' database and take the appropriate actions.\"\n  -1337)\n;; To the reader: yes, this seems sort of hacky, but one of the goals of the Nested Query Initiative\u2122 was to minimize\n;; if not completely eliminate any changes to the frontend. After experimenting with several possible ways to do this\n;; implementation seemed simplest and best met the goal. Luckily this is the only place this \"magic number\" is defined\n;; and the entire frontend can remain blissfully unaware of its value.\n\n(def DatabaseID\n  \"Schema for a valid `:database` ID, in the top-level 'outer' query. Either a positive integer (referring to an\n  actual Database), or the saved questions virtual ID, which is a placeholder used for queries using the\n  `:source-table \\\"card__id\\\"` shorthand for a source query resolved by middleware (since clients might not know the\n  actual DB for that source query.)\"\n  (s/cond-pre (s/eq saved-questions-virtual-database-id) helpers/IntGreaterThanZero))\n\n(def Query\n  \"Schema for an [outer] query, e.g. the sort of thing you'd pass to the query processor or save in\n  `Card.dataset_query`.\"\n  (->\n   {:database                         DatabaseID\n    ;; Type of query. `:query` = MBQL; `:native` = native. TODO - consider normalizing `:query` to `:mbql`\n    :type                             (s/enum :query :native)\n    (s/optional-key :native)          NativeQuery\n    (s/optional-key :query)           MBQLQuery\n    (s/optional-key :parameters)      [Parameter]\n    ;;\n    ;; OPTIONS\n    ;;\n    ;; These keys are used to tweak behavior of the Query Processor.\n    ;; TODO - can we combine these all into a single `:options` map?\n    ;;\n    (s/optional-key :settings)        (s/maybe Settings)\n    (s/optional-key :constraints)     (s/maybe Constraints)\n    (s/optional-key :middleware)      (s/maybe MiddlewareOptions)\n    ;;\n    ;; INFO\n    ;;\n    ;; Used when recording info about this run in the QueryExecution log; things like context query was ran in and\n    ;; User who ran it\n    (s/optional-key :info)            (s/maybe Info)\n    ;;\n    ;; Other various keys get stuck in the query dictionary at some point or another by various pieces of QP\n    ;; middleware to record bits of state. Everyone else can ignore them.\n    s/Keyword                         s/Any}\n   ;;\n   ;; CONSTRAINTS\n   ;;\n   ;; Make sure we have the combo of query `:type` and `:native`/`:query`\n   (s/constrained\n    (every-pred\n     (some-fn :native :query)\n     (complement (every-pred :native :query)))\n    \"Query must specify either `:native` or `:query`, but not both.\")\n   (s/constrained\n    (fn [{native :native, mbql :query, query-type :type}]\n      (core/case query-type\n        :native native\n        :query  mbql))\n    \"Native queries must specify `:native`; MBQL queries must specify `:query`.\")\n   ;;\n   ;; `:source-metadata` is added to queries when `card__id` source queries are resolved. It contains info about the\n   ;; columns in the source query.\n   ;;\n   ;; Where this is added was changed in Metabase 0.33.0 -- previously, when `card__id` source queries were resolved,\n   ;; the middleware would add `:source-metadata` to the top-level; to support joins against source queries, this has\n   ;; been changed so it is always added at the same level the resolved `:source-query` is added.\n   ;;\n   ;; This should automatically be fixed by `normalize`; if we encounter it, it means some middleware is not\n   ;; functioning properly\n   (s/constrained\n    (complement :source-metadata)\n    \"`:source-metadata` should be added in the same level as `:source-query` (i.e., the 'inner' MBQL query.)\")))\n\n\n;;; --------------------------------------------------- Validators ---------------------------------------------------\n\n(def ^{:arglists '([query])} validate-query\n  \"Compiled schema validator for an [outer] Metabase query. (Pre-compling a validator is more efficient; use this\n  instead of calling `(s/validate Query query)` or similar.\"\n  (s/validator Query))\n"]}