{"version":3,"sources":["schema/spec/variant.cljs"],"mappings":"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","names":["schema.spec.variant/option-step","o","params","else","g","c","schema.spec.core/sub-checker","step","x","guard-result","e41317","js/Object","e#","cljs.core._EQ_","schema.utils/error","schema.utils/make-ValidationError","cljs.core/Delay","cljs.core/List","cljs.core.symbol","schema.utils/fn-name","schema.utils/value-name","temp__5733__auto__","wrap-error","res","e","schema.utils/error-val","this__4380__auto__","k__4381__auto__","this__4382__auto__","k41340","else__4383__auto__","G__41346","cljs.core/Keyword","pre","options","err-f","post","cljs.core.get","__extmap","this__4399__auto__","f__4400__auto__","init__4401__auto__","cljs.core.reduce","ret__4402__auto__","p__41351","vec__41352","k__4403__auto__","cljs.core.nth","v__4404__auto__","cljs.core/PROTOCOL_SENTINEL","this__4394__auto__","writer__4395__auto__","opts__4396__auto__","pr-pair__4397__auto__","keyval__4398__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__41339","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4378__auto__","__meta","this__4375__auto__","__hash","this__4384__auto__","cljs.core/count","this__4376__auto__","h__4238__auto__","coll__4377__auto__","cljs.core/hash-unordered-coll","this41341","other41342","this__4389__auto__","k__4390__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4387__auto__","k__4388__auto__","pred__41405","cljs.core/keyword-identical?","expr__41406","cljs.core.assoc","this__4392__auto__","cljs.core/seq","cljs.core/MapEntry","this__4379__auto__","this__4385__auto__","entry__4386__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","schema.spec.variant/VariantSpec","this__4423__auto__","writer__4424__auto__","cljs.core/-write","G__41343","extmap__4419__auto__","G__41431","cljs.core/record?","schema.spec.variant/->VariantSpec","schema.spec.variant/map->VariantSpec","this","cljs.core.map","t","f","G__41361","cljs.core/reverse","or__4126__auto__","v","schema.utils/error?","G__41369","var_args","G__41438","schema.spec.variant/variant-spec","js/Error","schema.spec.variant.variant_spec","schema.utils/format*","cljs.core/last"],"sourcesContent":["(ns schema.spec.variant\n  (:require\n                                   \n   [schema.utils :as utils]\n   [schema.spec.core :as spec])\n         (:require-macros [schema.macros :as macros]))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; Variant Specs\n\n(defn- option-step [o params else]\n  (let [g (:guard o)\n        c (spec/sub-checker o params)\n        step (if g\n               (fn [x]\n                 (let [guard-result (macros/try-catchall\n                                     (g x)\n                                     (catch e# ::exception))]\n                   (cond (= ::exception guard-result)\n                         (macros/validation-error\n                          (:schema o)\n                          x\n                          (list (symbol (utils/fn-name g)) (utils/value-name x))\n                          'throws?)\n\n                         guard-result\n                         (c x)\n\n                         :else\n                         (else x))))\n               c)]\n    (if-let [wrap-error (:wrap-error o)]\n      (fn [x]\n        (let [res (step x)]\n          (if-let [e (utils/error-val res)]\n            (utils/error (wrap-error e))\n            res)))\n      step)))\n\n(defrecord VariantSpec [pre options err-f post]\n  spec/CoreSpec\n  (subschemas [this] (map :schema options))\n  (checker [this params]\n    (let [t (reduce\n             (fn [f o]\n               (option-step o params f))\n             (fn [x] (macros/validation-error this x (err-f (utils/value-name x))))\n             (reverse options))]\n      (if post\n        (fn [x]\n          (or (pre x)\n              (let [v (t x)]\n                (if (utils/error? v)\n                  v\n                  (or (post (if (:return-walked? params) v x)) v)))))\n        (fn [x]\n          (or (pre x)\n              (t x)))))))\n\n(defn variant-spec\n  \"A variant spec represents a choice between a set of alternative\n   subschemas, e.g., a tagged union. It has an overall precondition,\n   set of options, and error function.\n\n   The semantics of `options` is that the options are processed in\n   order. During checking, the datum must match the schema for the\n   first option for which `guard` passes. During generation, any datum\n   generated from an option will pass the corresponding `guard`.\n\n   err-f is a function to produce an error message if none\n   of the guards match (and must be passed unless the last option has no\n   guard).\"\n  ([pre options]\n     (variant-spec pre options nil))\n  ([pre options err-f]\n     (variant-spec pre options err-f nil))\n  ([pre ;- spec/Precondition\n    options ;- [{:schema (s/protocol Schema)\n    ;;           (s/optional-key :guard) (s/pred fn?)\n    ;;           (s/optional-key :error-wrap) (s/pred fn?)}]\n    err-f ;- (s/pred fn?)\n    post ;- (s/maybe spec/Precondition)\n    ]\n     (macros/assert! (or err-f (nil? (:guard (last options))))\n                     \"when last option has a guard, err-f must be provided\")\n     (->VariantSpec pre options err-f post)))\n\n;;;;;;;;;;;; This file autogenerated from src/cljx/schema/spec/variant.cljx\n"]}