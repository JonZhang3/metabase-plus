{"version":3,"sources":["schema/utils.cljs"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAcA,AAAA;;;;AAAA,AAAAA,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAME,AAGHM,AAAIC;AAHP,AAIE,AAAQ,AAACE,AAAM,AAACC,AAAMH;AAAtB;AAAA,AAAA,AAAA,AAAAC,AAAA;;;AACA,AAACG,AAAK,AAAAC,AAAIN;AAAJ,AAAA,AAAAM;AAAAA;;AAAA;;AACA,AAAAC,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAAA;;AAAA,AAAA,AAAAE,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAAE;AAAA,AAAA,AAAAF,AAAAE;AAAA,AAAA,AAAA,AAAAE,AAAAJ;AAAA,AAAAK,AAi7E2C,AAAA+J,AAAApK;AAj7E3CM,AAAA,AAAAV,AAAAS;AAAAE,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAH;AAAA,AAAAI,AAAA,AAAAC,AAAAN,AAAAI;AAAA,AAAAG,AAAAF,AAAA,AAAA,AAAOW;AAAP,AAAAT,AAAAF,AAAA,AAAA,AAASY;AAAT,AAAA,AACYA;AADZ,AAAA,AAAAT,AAAAN,AAAA,AAEGc,AAAEC;;AAFL,AAAA,AAAAb,AAAA;;;;AAAA,AAAA,AAAAA,AAAA;;;;;AAAA;;;;;AAAA,AAAAK,AAAA,AAAAC,AAAAR,AAAA,AAAAS,AAAA,AAAAC,AAAAjB;;AAAA,AAAAc,AAAA,AAAAC,AAAAR,AAAA;;;AAAA,AAAAW,AAAA,AAAA7B,AAAAW;AAAA,AAAAY,AAAAM,AAAA,AAAA,AAAOG;AAAP,AAAAT,AAAAM,AAAA,AAAA,AAASI;AAAT,AAAA,AACYA;AADZ,AAAAH,AAAA,AAAA,AAAAH,AAAA,AAAAI,AAAApB,AAEGqB,AAAEC;;AAFL,AAAA,AAAAF,AAAApB;;;;;;AAAA;;;;AAAA,AAAA;;AAAA,AAAA,AAAAD,AAAY,AAAA,AAACwB,AAAY9B;;;;AANjC,AAAA,AAAA,AAAMP;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA,AAAAC,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAA,AAAA,AAAAI,AAAA;AAAA,AAAA,AAAAA,AAAAH,AAAAD;;;AAAA,AAUA,AAAA,AAAMqC,AAASC;AAAf,AAES,AAAkBA;;AAE3B;;;;AAAA,AAAMC,AAGHC;AAHH,AAKSA;;AAET,AAAA,AAAA,AAAA/C,AAAMgD;AAAN,AAAA,AAAA/C,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA+C,AAAA,AAAA,AAAA,AAAA5C;;;AAAA,AAAA,AAAA,AAAA,AAAM4C,AAASG,AAAMC;AAArB,AACE,AAACC,AAA0BC,AAAeH,AAAIC;;;AADhD,AAAA,AAAA,AAAMJ;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA,AAAAzC,AAAAwC;AAAAA,AAAA,AAAAvC,AAAAuC;AAAA,AAAA,AAAAtC,AAAA;AAAA,AAAA,AAAAA,AAAAuC,AAAAD;;;AAAA,AAGA,AAAKM,AAAiB,AAAA,AAACC;AAEvB;;;AAAA,AAAMC,AAEHC;AAFH,AAGE,AAAMC,AAAE,AAACf,AAAQc;AAAjB,AACE,AAAI,AAAA,AAAAE,AAAI,AAAO,AAAKF,AAASH;AAC3BG;;AACA,AAACG,AAAO,AAAA,AAA2CF;;;AAKzD;;;AAAA,AAAMG,AAEHC;AAFH,AAKO,AAACI,AAAO,AAAAC,AAAaL;AAAb,AAAA,AAAAM,AAAAD;AAAA,AAAApC,AAAAqC,AAAA,AAAA,AAAgBC;AAAhB,AAAAtC,AAAAqC,AAAA,AAAA,AAAmBE;AAAnB,AAA0B,AAACC,AAAeT,AAAEQ,AAAK,AAAKD;AAD9D,AAAA,AAAAN,AAACC,AACmEF;AADpE,AAAU,AAAG,AAAC/C,AAAM,AAAAgD,AAACE;AADrB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;AAIP;;;AAAA,AAAMO,AAEH1B;AAFH,AAIE,AAAA2B,AAAY,AAAA,AAACE,AAA8B,AAACC,AAAO9B;AAAnD,AAAAf,AAAA0C,AAAA,AAAA,AAAOC;AAAP,AAAA3C,AAAA0C,AAAA,AAAA,AAASX;AAAT,AACE,AAAI,AAAA,AAACe,AAAaf;AAAlB;;AAEOA,AAAEgB,AAAQ,AAAA,AAAA,AAACC;;;AAStB,AAAA,AAAMC,AAASpC;AAAf,AAES,AAAA,AAAA,AAAA,AAAoBA;AAApB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAqC,AAAA,AAAoBrC,AAAAA;AAApB;;AAAA,AAAA,AAAA,AAAoBA;AAApB,AAAAsC,AAAYC,AAAQvC;;AAApB;;;;AAAA,AAAAsC,AAAYC,AAAQvC;;;AAU7B,AAAA,AAEA,AAAA;;;;;;;;;;;;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAS4C,AAEaK,AAAKC,AAAOC;;AAFlC,AAAA,AAAA,AAEsBF;AAFtB,AAGW,AAACG,AAAW,AAACC,AAAAA,AAAAA,AAAyBJ,AAAAA,AAAMC,AAAOC;;;AAH9D,AAAA,AAAA,AAASP;AAAT,AAAA,AAAA;;;AAAA,AAAA,AAAA,AAASA;;AAAT,AAAA,AAAA,AAASA;;AAAT,AAAA,AAAA,AAAAJ,AAAAC,AAAAC,AAASE;AAAT,AAAA,AAAAD,AAAAF,AAAA;;;AAAA;;;AAAA,AAASI,AAAiBC,AAAOjC,AAAMkC,AAAkBC;AAAzD,AAAA,AAAAJ,AAA0BE,AAAOjC,AAAMkC,AAAkBC;;;AAAhDJ,AAKT,AAAA,AAAMS,AAA2CC;AAAjD,AACE,AAAAC,AAAA,AAAM,AAAAlF,AAAI,AAAoBiF;AAAxB,AAAA,AAAAjF;AAAAA;;AAAA,AAAA;;AAAN,AAAAkF,AAAA,AAAA,AAAAxC,AAAA,AAAA,AAAA,AAAA,AAAA,AAA0C,AAAqBuC;;AAMjE;;;AAAA,AAAME,AAEHV,AAAOjC,AAAMkC,AAAkBC;AAFlC,AAGE,AAAAJ,AAAkBE,AAAOjC,AAAMkC,AAAkBC;;AAInD,AAAA,AAEA,AAAA;;;;;;;;;;;AAAA,AAAA,AAAA,AAAA,AAAA,AAASS,AAEaR,AAAKC,AAAOC;;AAFlC,AAAA,AAAA,AAEsBF;AAFtB,AAGW,AAACG,AAAW,AAACS,AAAAA,AAAAA,AAAoBZ,AAAAA,AAAMC,AAAOC;;;AAHzD,AAAA,AAAA,AAASM;AAAT,AAAA,AAAA;;;AAAA,AAAA,AAAA,AAASA;;AAAT,AAAA,AAAA,AAASA;;AAAT,AAAA,AAAA,AAAAjB,AAAAC,AAAAC,AAASe;AAAT,AAAA,AAAAd,AAAAF,AAAA;;;AAAA;;;AAAA,AAASiB,AAAYC,AAAKC;AAA1B,AAAA,AAAAH,AAAqBE,AAAKC;;;AAAjBH,AAKT,AAAA,AAAMI,AAAiCP;AAAvC,AACE,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAa,AAASD,AAAK,AAAQA;;AAUrC,AAAA,AAAA,AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAAQ,AAAAC,AAAW0D;;AAAX,AAAA,AAAA3D,AAAA;AAAA,AAAA,AAAAA,AAAAC,AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAAC,AAAAC,AAAWuD;;AAAX,AAAA,AAAAzD,AAAA;AAAA,AAAA,AAAAG,AAAAF;AAAAE,AAAA,AAAA,AAAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAAP;;;;AAAA,AAAAS,AAAAC,AAAAL,AAAAC;;;;;AAAA,AAAA,AAAA,AAAA,AAAAK,AAAAC,AAAAC,AAAWgD;;AAAX,AAAA,AAAAlD,AAAA;AAAA,AAAA,AAAAjD,AAAA,AAAAoD,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAAE,AAAA,AAAA1F,AAAAyF,AAAA,AAAA;AAAAE,AAAA,AAAA3F,AAAAyF,AAAA,AAAA;AAAA,AAAA,AAAAJ,AAAAA,AAAAE,AAAAG,AAAAC,AAAAN,AAAAE,AAAAG,AAAAC;AAAAL,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAAQ,AAAAC,AAAAC,AAAWwC;;AAAX,AAAA,AAAA1C,AAAA;AAAA,AAAA,AAAAG,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAAJ,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAAE;;AAAA,AAAA,AAAAC,AAAAJ,AAAAE,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAAI,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA1B,AAAA,AAAAU;;;AAAA,AAAA,AAAA,AAAA,AAAAiB,AAAWkC;;AAAX,AAAA,AAAAlC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAjB,AAAA,AAAAmB,AAAAnB,AAAA,AAAAoB;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAW8B;;AAAX,AAAA,AAAA9B,AAAA;AAAA,AAAAC;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAW4B;;AAAX,AAAA,AAAA5B,AAAA;AAAA,AAAA,AAAAjC,AAAAgC,AAAAtB,AAAAwB,AAAW2B;;;AAAX,AAAA,AAAA,AAAA,AAAA1B,AAAW0B;;AAAX,AAAA,AAAA1B,AAAA;AAAA,AAAA,AAAA,AAAA,AAAA5H,AAAAmG;;;AAAA,AAAA,AAAA,AAAA,AAAA0B,AAAWyB;;AAAX,AAAA,AAAAzB,AAAA;AAAA,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAA;AAAAA;;AAAA,AAAAA,AAAA,AAAA,AAAAC;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAAD;AAAAF;AAAA,AAAA,AAAAF,AAAAG;;AAAAA;;;;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAAC,AAAWoB;;AAAX,AAAA,AAAArB,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAAC,AAAA,AAAApE,AAAA,AAAAmE,AAAA,AAAAC,AAAA,AAAApE,AAAA,AAAAmE,AAAA,AAAAC;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAAC,AAAWkB;;AAAX,AAAA,AAAAnB,AAAA;AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAA,AAAAC,AAAA,AAAAtI,AAAA,AAAAkI,AAAAV,AAAAW;;AAAA,AAAA3C,AAAAgC,AAAA,AAAAe,AAAA,AAAAF,AAAAnC,AAAAiC,AAAA,AAAWkB;;;;AAAX,AAAA,AAAA,AAAA,AAAAb,AAAAC,AAAAtB,AAAWkC;;AAAX,AAAA,AAAAb,AAAA;AAAA,AAAA,AAAAE,AAAAC;AAAAC,AAAAH;AAAA,AAAA,AAAA,AAAAC,AAAAA,AAAA,AAAAE,AAAAF,AAAA,AAAAE;AAAA,AAAAzB,AAAAK,AAAAtB,AAAA,AAAWmD;;AAAX,AAAA7D,AAAAgC,AAAA,AAAAqB,AAAA3C,AAAAuC,AAAAtB,AAAA,AAAWkC;;;;AAAX,AAAA,AAAA,AAAA,AAAAP,AAAWO;;AAAX,AAAA,AAAAP,AAAA;AAAA,AAAA,AAAAxI,AAAA,AAAA2G,AAAA,AAAA,AAAA8B,AAAA,AAAAvD,AAAA,AAAAU;;;AAAA,AAAA,AAAA,AAAA,AAAA8C,AAAA7B,AAAWkC;;AAAX,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAxD,AAAA2B,AAAAjB,AAAAwB,AAAW2B;;;AAAX,AAAA,AAAA,AAAA,AAAAJ,AAAAC,AAAWG;;AAAX,AAAA,AAAAJ,AAAA;AAAA,AAAA,AAAA,AAAAE,AAAAD;AAAA,AAAAD,AAAA,AAAAnI,AAAAoI,AAAA,AAAA,AAAApI,AAAAoI,AAAA;;AAAA,AAAAhG,AAAAkG,AAAAH,AAAAC;;;;AAAA,AAAA,AAAAG,AAAA;AAAA,AAAA,AAAA;;;AAAA,AAAA,AAAAA,AAAA;;AAAA,AAAA,AAAAA,AAAA,AAAAC;AAAA,AAAA,AAAAnE,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA,AAAA,AAAAkE,AAAA,AAAAC,AAAAC;AAAA,AAAA,AAAAhF,AAAAgF,AAAA;;;AAAA;;;AAAA,AAAWK,AAAgBpE;AAA3B,AAAA,AAAA6D,AAAA,AAAA,AAAA,AAA2B7D;;;AAA3B;;;AAAA,AAAAgE,AAAWK;AAAX,AAAA,AAAAJ,AAAA,AAAAC,AAAA,AAAArB,AAAAmB,AAAA;AAAA,AAAA,AAAA,AAAAG,AAAAH;AAAA,AAAAxJ,AAAA,AAAA0J;;AAAAA;;;AAAA,AAAA,AAAAL,AAAA,AAAA,AAAAG,AAAA,AAAA,AAAAjB,AAAAkB,AAAA;;;AAAAJ,AAEA;;;AAAA,AAAMS,AAEHlI;AAFH,AAEM,AAAQA;AAAR;AAAA,AAAA,AAAA,AAAA/B,AAAA;;;AAAW,AAAC+J,AAAiBhI;;AAEnC,AAAA,AAAMmI,AAAQnI;AAAd,AACE,AAAWyH,AAAezH;;AAE5B,AAAA,AAAMoI,AAAWpI;AAAjB,AACE,AAAM,AAACmI,AAAOnI;AAAd,AACE,AAAyBA;;AAD3B;;;AAuBF,AACE,AAAA,AAAMqI,AAAuBC,AAAMxF;AAAnC,AACE,AAAA,AAACyF,AAAYD,AAA4BxF;;;AAE3C,AAAA,AAAM0F,AAAcF;AAApB,AACE,AAAA,AAACG,AAAYH;;AAMjB;;;;;AAAKI,AAMI,AAAA,AAAC/H","names":["var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","schema.utils/assoc-when","seq36839","G__36840","cljs.core/first","cljs.core/next","self__4723__auto__","m","kvs","js/Error","cljs.core/even?","cljs.core/count","cljs.core.into","or__4126__auto__","iter__4529__auto__","s__36867","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__36869","cljs.core/chunk-buffer","i__36868","vec__36882","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__36866","cljs.core/chunk-rest","vec__36896","cljs.core/cons","cljs.core/rest","k","v","cljs.core.partition","schema.utils/type-of","x","schema.utils/fn-schema-bearer","f","schema.utils/format*","seq36905","G__36906","fmt","args","cljs.core.apply","goog.string/format","schema.utils/max-value-length","cljs.core.atom","schema.utils/value-name","value","t","cljs.core/deref","cljs.core.symbol","schema.utils/unmunge","s","p1__36909#","cljs.core.sort_by","cljs.core/second","cljs.core.reduce","p__36912","vec__36914","to","from","clojure.string/replace","schema.utils/fn-name","vec__36927","_","cljs.core/re-matches","cljs.core.pr_str","cljs.core._EQ_","cljs.core/demunge","cljs.core/re-find","schema.utils/record?","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IRecord","this__4369__auto__","writer__4370__auto__","opt__4371__auto__","cljs.core/-write","schema.utils/ValidationError","schema.utils/->ValidationError","schema","expectation-delay","fail-explanation","this","writer","opts","cljs.core/-pr-writer","schema.utils/validation-error-explain","err","cljs.core/List","schema.utils/make-ValidationError","schema.utils/NamedError","schema.utils/->NamedError","name","error","schema.utils/named-error-explain","this__4380__auto__","k__4381__auto__","this__4382__auto__","k36955","else__4383__auto__","G__36968","cljs.core/Keyword","cljs.core.get","__extmap","this__4399__auto__","f__4400__auto__","init__4401__auto__","ret__4402__auto__","p__36997","vec__36999","k__4403__auto__","v__4404__auto__","this__4394__auto__","writer__4395__auto__","opts__4396__auto__","pr-pair__4397__auto__","keyval__4398__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__36954","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4378__auto__","__meta","this__4375__auto__","__hash","this__4384__auto__","this__4376__auto__","h__4238__auto__","coll__4377__auto__","cljs.core/hash-unordered-coll","this36956","other36957","this__4389__auto__","k__4390__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core/not-empty","this__4387__auto__","k__4388__auto__","pred__37023","cljs.core/keyword-identical?","expr__37024","cljs.core.assoc","this__4392__auto__","cljs.core/MapEntry","this__4379__auto__","this__4385__auto__","entry__4386__auto__","cljs.core/vector?","cljs.core/-conj","schema.utils/ErrorContainer","this__4423__auto__","writer__4424__auto__","G__36958","extmap__4419__auto__","G__37039","cljs.core/record?","schema.utils/->ErrorContainer","schema.utils/map->ErrorContainer","schema.utils/error","schema.utils/error?","schema.utils/error-val","schema.utils/declare-class-schema!","klass","goog.object/set","schema.utils/class-schema","goog.object/get","schema.utils/use-fn-validation","cljs.core/chunk-first"],"sourcesContent":["(ns schema.utils\n  \"Private utilities used in schema implementation.\"\n  (:refer-clojure :exclude [record?])\n                                              \n         (:require\n          goog.string.format\n          [goog.object :as gobject]\n          [goog.string :as gstring]\n          [clojure.string :as string])\n         (:require-macros [schema.utils :refer [char-map]]))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; Miscellaneous helpers\n\n(defn assoc-when\n  \"Like assoc but only assocs when value is truthy.  Copied from plumbing.core so that\n   schema need not depend on plumbing.\"\n  [m & kvs]\n  (assert (even? (count kvs)))\n  (into (or m {})\n        (for [[k v] (partition 2 kvs)\n              :when v]\n          [k v])))\n\n(defn type-of [x]\n                 \n         (js* \"typeof ~{}\" x))\n\n(defn fn-schema-bearer\n  \"What class can we associate the fn schema with? In Clojure use the class of the fn; in\n   cljs just use the fn itself.\"\n  [f]\n                 \n         f)\n\n(defn format* [fmt & args]\n  (apply                     gstring/format fmt args))\n\n(def max-value-length (atom 19))\n\n(defn value-name\n  \"Provide a descriptive short name for a value.\"\n  [value]\n  (let [t (type-of value)]\n    (if (<= (count (str value)) @max-value-length)\n      value\n      (symbol (str \"a-\"                                  t)))))\n\n                     \n                                 \n\n(defn unmunge\n  \"TODO: eventually use built in demunge in latest cljs.\"\n  [s]\n  (->> (char-map)\n       (sort-by #(- (count (second %))))\n       (reduce (fn [^String s [to from]] (string/replace s from (str to))) s)))\n\n(defn fn-name\n  \"A meaningful name for a function that looks like its symbol, if applicable.\"\n  [f]\n        \n  (let [[_ s] (re-matches #\"#object\\[(.*)\\]\" (pr-str f))]\n    (if (= \"Function\" s)\n      \"function\"\n      (->> s demunge (re-find #\"[^/]+(?:$|(?=/+$))\"))))\n                                    \n                                        \n                          \n                                   \n                                                                    \n                         \n                                                    )\n\n(defn record? [x]\n                                          \n         (satisfies? IRecord x))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; Error descriptions\n\n;; A leaf schema validation error, describing the schema and value and why it failed to\n;; match the schema.  In Clojure, prints like a form describing the failure that would\n;; return true.\n\n(declare validation-error-explain)\n\n(deftype ValidationError [schema value expectation-delay fail-explanation]\n         IPrintWithWriter\n         (-pr-writer [this writer opts]\n           (-pr-writer (validation-error-explain this) writer opts)))\n\n(defn validation-error-explain [^ValidationError err]\n  (list (or (.-fail-explanation err) 'not) @(.-expectation-delay err)))\n\n                                                                   \n                                                    \n                                                       \n\n(defn make-ValidationError\n  \"for cljs sake (easier than normalizing imports in macros.clj)\"\n  [schema value expectation-delay fail-explanation]\n  (ValidationError. schema value expectation-delay fail-explanation))\n\n\n;; Attach a name to an error from a named schema.\n(declare named-error-explain)\n\n(deftype NamedError [name error]\n         IPrintWithWriter\n         (-pr-writer [this writer opts]\n           (-pr-writer (named-error-explain this) writer opts)))\n\n(defn named-error-explain [^NamedError err]\n  (list 'named (.-error err) (.-name err)))\n\n                                                                   \n                                               \n                                                  \n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; Monoidish error containers, which wrap errors (to distinguish from success values).\n\n(defrecord ErrorContainer [error])\n\n(defn error\n  \"Distinguish a value (must be non-nil) as an error.\"\n  [x] (assert x) (->ErrorContainer x))\n\n(defn error? [x]\n  (instance? ErrorContainer x))\n\n(defn error-val [x]\n  (when (error? x)\n    (.-error ^ErrorContainer x)))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; Registry for attaching schemas to classes, used for defn and defrecord\n\n     \n                                                                                                       \n                                            \n                                                                                     \n                                                                              \n                                                                      \n                                                 \n                          \n                                                                                   \n                                         \n\n                            \n                                                                       \n                                   \n\n      \n(do\n  (defn declare-class-schema! [klass schema]\n    (gobject/set klass \"schema$utils$schema\" schema))\n\n  (defn class-schema [klass]\n    (gobject/get klass \"schema$utils$schema\")))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; Utilities for fast-as-possible reference to use to turn fn schema validation on/off\n\n(def use-fn-validation\n  \"Turn on run-time function validation for functions compiled when\n   s/compile-fn-validation was true -- has no effect for functions compiled\n   when it is false.\"\n  ;; specialize in Clojure for performance\n                                                            \n         (atom false))\n\n;;;;;;;;;;;; This file autogenerated from src/cljx/schema/utils.cljx\n"]}